
F303K8_WS2812B.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e2c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003fb4  08003fb4  00004fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fec  08003fec  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003fec  08003fec  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003fec  08003fec  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fec  08003fec  00004fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ff0  08003ff0  00004ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003ff4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          0000015c  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000168  20000168  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f3d6  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001be9  00000000  00000000  00014412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc8  00000000  00000000  00016000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ae1  00000000  00000000  00016dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001adc5  00000000  00000000  000178a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010e13  00000000  00000000  0003266e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a2dcc  00000000  00000000  00043481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e624d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b04  00000000  00000000  000e6290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  000e9d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003f9c 	.word	0x08003f9c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003f9c 	.word	0x08003f9c

080001c8 <wait_290us>:

#include <stdint.h>
#include "stm32f3xx_hal.h"
#include "WS2812B.h"

void wait_290us(TIM_HandleTypeDef *htim){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	//activate timer only for the first time
	static int executed = 0;
	if(executed == 0){
 80001d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000208 <wait_290us+0x40>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d102      	bne.n	80001de <wait_290us+0x16>
		HAL_TIM_Base_Start(htim);
 80001d8:	6878      	ldr	r0, [r7, #4]
 80001da:	f003 f9cd 	bl	8003578 <HAL_TIM_Base_Start>
	}
	executed++;
 80001de:	4b0a      	ldr	r3, [pc, #40]	@ (8000208 <wait_290us+0x40>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	3301      	adds	r3, #1
 80001e4:	4a08      	ldr	r2, [pc, #32]	@ (8000208 <wait_290us+0x40>)
 80001e6:	6013      	str	r3, [r2, #0]
	//wait for 290us
	htim->Instance->CNT = 0;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	2200      	movs	r2, #0
 80001ee:	625a      	str	r2, [r3, #36]	@ 0x24
	while((htim->Instance->CNT)<290);
 80001f0:	bf00      	nop
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80001f8:	f5b3 7f91 	cmp.w	r3, #290	@ 0x122
 80001fc:	d3f9      	bcc.n	80001f2 <wait_290us+0x2a>
}
 80001fe:	bf00      	nop
 8000200:	bf00      	nop
 8000202:	3708      	adds	r7, #8
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}
 8000208:	20000028 	.word	0x20000028

0800020c <WS2812B_red>:

void WS2812B_red (SPI_HandleTypeDef *hspi, TIM_HandleTypeDef *htim, uint8_t led_number,uint8_t quantity_of_light)
{
 800020c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000210:	b08d      	sub	sp, #52	@ 0x34
 8000212:	af00      	add	r7, sp, #0
 8000214:	60f8      	str	r0, [r7, #12]
 8000216:	60b9      	str	r1, [r7, #8]
 8000218:	4611      	mov	r1, r2
 800021a:	461a      	mov	r2, r3
 800021c:	460b      	mov	r3, r1
 800021e:	71fb      	strb	r3, [r7, #7]
 8000220:	4613      	mov	r3, r2
 8000222:	71bb      	strb	r3, [r7, #6]
 8000224:	466b      	mov	r3, sp
 8000226:	461e      	mov	r6, r3
	float potion = (float)(quantity_of_light/100);
 8000228:	79bb      	ldrb	r3, [r7, #6]
 800022a:	4a59      	ldr	r2, [pc, #356]	@ (8000390 <WS2812B_red+0x184>)
 800022c:	fba2 2303 	umull	r2, r3, r2, r3
 8000230:	095b      	lsrs	r3, r3, #5
 8000232:	b2db      	uxtb	r3, r3
 8000234:	ee07 3a90 	vmov	s15, r3
 8000238:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800023c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	uint8_t red = (uint8_t)(255*potion);
 8000240:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000244:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8000394 <WS2812B_red+0x188>
 8000248:	ee67 7a87 	vmul.f32	s15, s15, s14
 800024c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000250:	edc7 7a00 	vstr	s15, [r7]
 8000254:	783b      	ldrb	r3, [r7, #0]
 8000256:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t green = (uint8_t)(0*potion);
 800025a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800025e:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8000398 <WS2812B_red+0x18c>
 8000262:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000266:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800026a:	edc7 7a00 	vstr	s15, [r7]
 800026e:	783b      	ldrb	r3, [r7, #0]
 8000270:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	uint8_t blue = (uint8_t)(0*potion);
 8000274:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000278:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8000398 <WS2812B_red+0x18c>
 800027c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000280:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000284:	edc7 7a00 	vstr	s15, [r7]
 8000288:	783b      	ldrb	r3, [r7, #0]
 800028a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

	uint32_t color = green<<16 | red<<8 | blue;
 800028e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000292:	041a      	lsls	r2, r3, #16
 8000294:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000298:	021b      	lsls	r3, r3, #8
 800029a:	431a      	orrs	r2, r3
 800029c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80002a0:	4313      	orrs	r3, r2
 80002a2:	61fb      	str	r3, [r7, #28]
	uint8_t sendData[24*led_number];
 80002a4:	79fa      	ldrb	r2, [r7, #7]
 80002a6:	4613      	mov	r3, r2
 80002a8:	005b      	lsls	r3, r3, #1
 80002aa:	4413      	add	r3, r2
 80002ac:	00db      	lsls	r3, r3, #3
 80002ae:	4619      	mov	r1, r3
 80002b0:	1e4b      	subs	r3, r1, #1
 80002b2:	61bb      	str	r3, [r7, #24]
 80002b4:	460a      	mov	r2, r1
 80002b6:	2300      	movs	r3, #0
 80002b8:	4690      	mov	r8, r2
 80002ba:	4699      	mov	r9, r3
 80002bc:	f04f 0200 	mov.w	r2, #0
 80002c0:	f04f 0300 	mov.w	r3, #0
 80002c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80002c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80002cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80002d0:	460a      	mov	r2, r1
 80002d2:	2300      	movs	r3, #0
 80002d4:	4614      	mov	r4, r2
 80002d6:	461d      	mov	r5, r3
 80002d8:	f04f 0200 	mov.w	r2, #0
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	00eb      	lsls	r3, r5, #3
 80002e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80002e6:	00e2      	lsls	r2, r4, #3
 80002e8:	460b      	mov	r3, r1
 80002ea:	3307      	adds	r3, #7
 80002ec:	08db      	lsrs	r3, r3, #3
 80002ee:	00db      	lsls	r3, r3, #3
 80002f0:	ebad 0d03 	sub.w	sp, sp, r3
 80002f4:	466b      	mov	r3, sp
 80002f6:	3300      	adds	r3, #0
 80002f8:	617b      	str	r3, [r7, #20]

	for(int i=0; i<led_number; i++){
 80002fa:	2300      	movs	r3, #0
 80002fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80002fe:	e02c      	b.n	800035a <WS2812B_red+0x14e>
		for(int j=0; j<24; j++){
 8000300:	2300      	movs	r3, #0
 8000302:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000304:	e023      	b.n	800034e <WS2812B_red+0x142>
			if (((color>>(23-j))&0x01) == 1) {
 8000306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000308:	f1c3 0317 	rsb	r3, r3, #23
 800030c:	69fa      	ldr	r2, [r7, #28]
 800030e:	fa22 f303 	lsr.w	r3, r2, r3
 8000312:	f003 0301 	and.w	r3, r3, #1
 8000316:	2b00      	cmp	r3, #0
 8000318:	d00b      	beq.n	8000332 <WS2812B_red+0x126>
				sendData[i*24 + j] = 0b11000000;  // store 1
 800031a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800031c:	4613      	mov	r3, r2
 800031e:	005b      	lsls	r3, r3, #1
 8000320:	4413      	add	r3, r2
 8000322:	00db      	lsls	r3, r3, #3
 8000324:	461a      	mov	r2, r3
 8000326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000328:	4413      	add	r3, r2
 800032a:	697a      	ldr	r2, [r7, #20]
 800032c:	21c0      	movs	r1, #192	@ 0xc0
 800032e:	54d1      	strb	r1, [r2, r3]
 8000330:	e00a      	b.n	8000348 <WS2812B_red+0x13c>
			}
			else{
				sendData[i*24 + j] = 0b10000000;  // store 0
 8000332:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000334:	4613      	mov	r3, r2
 8000336:	005b      	lsls	r3, r3, #1
 8000338:	4413      	add	r3, r2
 800033a:	00db      	lsls	r3, r3, #3
 800033c:	461a      	mov	r2, r3
 800033e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000340:	4413      	add	r3, r2
 8000342:	697a      	ldr	r2, [r7, #20]
 8000344:	2180      	movs	r1, #128	@ 0x80
 8000346:	54d1      	strb	r1, [r2, r3]
		for(int j=0; j<24; j++){
 8000348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800034a:	3301      	adds	r3, #1
 800034c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800034e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000350:	2b17      	cmp	r3, #23
 8000352:	ddd8      	ble.n	8000306 <WS2812B_red+0xfa>
	for(int i=0; i<led_number; i++){
 8000354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000356:	3301      	adds	r3, #1
 8000358:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800035e:	429a      	cmp	r2, r3
 8000360:	dbce      	blt.n	8000300 <WS2812B_red+0xf4>
			}
		}
	}

	HAL_SPI_Transmit(hspi, sendData, 24*led_number, 1000);
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	b29b      	uxth	r3, r3
 8000366:	461a      	mov	r2, r3
 8000368:	0052      	lsls	r2, r2, #1
 800036a:	4413      	add	r3, r2
 800036c:	00db      	lsls	r3, r3, #3
 800036e:	b29a      	uxth	r2, r3
 8000370:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000374:	6979      	ldr	r1, [r7, #20]
 8000376:	68f8      	ldr	r0, [r7, #12]
 8000378:	f002 fdcd 	bl	8002f16 <HAL_SPI_Transmit>
	wait_290us(htim);
 800037c:	68b8      	ldr	r0, [r7, #8]
 800037e:	f7ff ff23 	bl	80001c8 <wait_290us>
 8000382:	46b5      	mov	sp, r6
}
 8000384:	bf00      	nop
 8000386:	3734      	adds	r7, #52	@ 0x34
 8000388:	46bd      	mov	sp, r7
 800038a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800038e:	bf00      	nop
 8000390:	51eb851f 	.word	0x51eb851f
 8000394:	437f0000 	.word	0x437f0000
 8000398:	00000000 	.word	0x00000000

0800039c <WS2812B_orange>:

void WS2812B_orange (SPI_HandleTypeDef *hspi, TIM_HandleTypeDef *htim, uint8_t led_number,uint8_t quantity_of_light)
{
 800039c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80003a0:	b08d      	sub	sp, #52	@ 0x34
 80003a2:	af00      	add	r7, sp, #0
 80003a4:	60f8      	str	r0, [r7, #12]
 80003a6:	60b9      	str	r1, [r7, #8]
 80003a8:	4611      	mov	r1, r2
 80003aa:	461a      	mov	r2, r3
 80003ac:	460b      	mov	r3, r1
 80003ae:	71fb      	strb	r3, [r7, #7]
 80003b0:	4613      	mov	r3, r2
 80003b2:	71bb      	strb	r3, [r7, #6]
 80003b4:	466b      	mov	r3, sp
 80003b6:	461e      	mov	r6, r3
	float potion = (float)(quantity_of_light/100);
 80003b8:	79bb      	ldrb	r3, [r7, #6]
 80003ba:	4a59      	ldr	r2, [pc, #356]	@ (8000520 <WS2812B_orange+0x184>)
 80003bc:	fba2 2303 	umull	r2, r3, r2, r3
 80003c0:	095b      	lsrs	r3, r3, #5
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	ee07 3a90 	vmov	s15, r3
 80003c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80003cc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	uint8_t red = (uint8_t)(255*potion);
 80003d0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80003d4:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8000524 <WS2812B_orange+0x188>
 80003d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80003dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80003e0:	edc7 7a00 	vstr	s15, [r7]
 80003e4:	783b      	ldrb	r3, [r7, #0]
 80003e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t green = (uint8_t)(16*potion);
 80003ea:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80003ee:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 80003f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80003f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80003fa:	edc7 7a00 	vstr	s15, [r7]
 80003fe:	783b      	ldrb	r3, [r7, #0]
 8000400:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	uint8_t blue = (uint8_t)(0*potion);
 8000404:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000408:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8000528 <WS2812B_orange+0x18c>
 800040c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000414:	edc7 7a00 	vstr	s15, [r7]
 8000418:	783b      	ldrb	r3, [r7, #0]
 800041a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

	uint32_t color = green<<16 | red<<8 | blue;
 800041e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000422:	041a      	lsls	r2, r3, #16
 8000424:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000428:	021b      	lsls	r3, r3, #8
 800042a:	431a      	orrs	r2, r3
 800042c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8000430:	4313      	orrs	r3, r2
 8000432:	61fb      	str	r3, [r7, #28]
	uint8_t sendData[24*led_number];
 8000434:	79fa      	ldrb	r2, [r7, #7]
 8000436:	4613      	mov	r3, r2
 8000438:	005b      	lsls	r3, r3, #1
 800043a:	4413      	add	r3, r2
 800043c:	00db      	lsls	r3, r3, #3
 800043e:	4619      	mov	r1, r3
 8000440:	1e4b      	subs	r3, r1, #1
 8000442:	61bb      	str	r3, [r7, #24]
 8000444:	460a      	mov	r2, r1
 8000446:	2300      	movs	r3, #0
 8000448:	4690      	mov	r8, r2
 800044a:	4699      	mov	r9, r3
 800044c:	f04f 0200 	mov.w	r2, #0
 8000450:	f04f 0300 	mov.w	r3, #0
 8000454:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000458:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800045c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000460:	460a      	mov	r2, r1
 8000462:	2300      	movs	r3, #0
 8000464:	4614      	mov	r4, r2
 8000466:	461d      	mov	r5, r3
 8000468:	f04f 0200 	mov.w	r2, #0
 800046c:	f04f 0300 	mov.w	r3, #0
 8000470:	00eb      	lsls	r3, r5, #3
 8000472:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000476:	00e2      	lsls	r2, r4, #3
 8000478:	460b      	mov	r3, r1
 800047a:	3307      	adds	r3, #7
 800047c:	08db      	lsrs	r3, r3, #3
 800047e:	00db      	lsls	r3, r3, #3
 8000480:	ebad 0d03 	sub.w	sp, sp, r3
 8000484:	466b      	mov	r3, sp
 8000486:	3300      	adds	r3, #0
 8000488:	617b      	str	r3, [r7, #20]

	for(int i=0; i<led_number; i++){
 800048a:	2300      	movs	r3, #0
 800048c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800048e:	e02c      	b.n	80004ea <WS2812B_orange+0x14e>
		for(int j=0; j<24; j++){
 8000490:	2300      	movs	r3, #0
 8000492:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000494:	e023      	b.n	80004de <WS2812B_orange+0x142>
			if (((color>>(23-j))&0x01) == 1) {
 8000496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000498:	f1c3 0317 	rsb	r3, r3, #23
 800049c:	69fa      	ldr	r2, [r7, #28]
 800049e:	fa22 f303 	lsr.w	r3, r2, r3
 80004a2:	f003 0301 	and.w	r3, r3, #1
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d00b      	beq.n	80004c2 <WS2812B_orange+0x126>
				sendData[i*24 + j] = 0b11000000;  // store 1
 80004aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80004ac:	4613      	mov	r3, r2
 80004ae:	005b      	lsls	r3, r3, #1
 80004b0:	4413      	add	r3, r2
 80004b2:	00db      	lsls	r3, r3, #3
 80004b4:	461a      	mov	r2, r3
 80004b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80004b8:	4413      	add	r3, r2
 80004ba:	697a      	ldr	r2, [r7, #20]
 80004bc:	21c0      	movs	r1, #192	@ 0xc0
 80004be:	54d1      	strb	r1, [r2, r3]
 80004c0:	e00a      	b.n	80004d8 <WS2812B_orange+0x13c>
			}
			else{
				sendData[i*24 + j] = 0b10000000;  // store 0
 80004c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80004c4:	4613      	mov	r3, r2
 80004c6:	005b      	lsls	r3, r3, #1
 80004c8:	4413      	add	r3, r2
 80004ca:	00db      	lsls	r3, r3, #3
 80004cc:	461a      	mov	r2, r3
 80004ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80004d0:	4413      	add	r3, r2
 80004d2:	697a      	ldr	r2, [r7, #20]
 80004d4:	2180      	movs	r1, #128	@ 0x80
 80004d6:	54d1      	strb	r1, [r2, r3]
		for(int j=0; j<24; j++){
 80004d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80004da:	3301      	adds	r3, #1
 80004dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80004de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80004e0:	2b17      	cmp	r3, #23
 80004e2:	ddd8      	ble.n	8000496 <WS2812B_orange+0xfa>
	for(int i=0; i<led_number; i++){
 80004e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80004e6:	3301      	adds	r3, #1
 80004e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80004ea:	79fb      	ldrb	r3, [r7, #7]
 80004ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80004ee:	429a      	cmp	r2, r3
 80004f0:	dbce      	blt.n	8000490 <WS2812B_orange+0xf4>
			}
		}
	}

	HAL_SPI_Transmit(hspi, sendData, 24*led_number, 1000);
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	b29b      	uxth	r3, r3
 80004f6:	461a      	mov	r2, r3
 80004f8:	0052      	lsls	r2, r2, #1
 80004fa:	4413      	add	r3, r2
 80004fc:	00db      	lsls	r3, r3, #3
 80004fe:	b29a      	uxth	r2, r3
 8000500:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000504:	6979      	ldr	r1, [r7, #20]
 8000506:	68f8      	ldr	r0, [r7, #12]
 8000508:	f002 fd05 	bl	8002f16 <HAL_SPI_Transmit>
	wait_290us(htim);
 800050c:	68b8      	ldr	r0, [r7, #8]
 800050e:	f7ff fe5b 	bl	80001c8 <wait_290us>
 8000512:	46b5      	mov	sp, r6
}
 8000514:	bf00      	nop
 8000516:	3734      	adds	r7, #52	@ 0x34
 8000518:	46bd      	mov	sp, r7
 800051a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800051e:	bf00      	nop
 8000520:	51eb851f 	.word	0x51eb851f
 8000524:	437f0000 	.word	0x437f0000
 8000528:	00000000 	.word	0x00000000

0800052c <WS2812B_yellow>:

void WS2812B_yellow (SPI_HandleTypeDef *hspi, TIM_HandleTypeDef *htim, uint8_t led_number,uint8_t quantity_of_light)
{
 800052c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000530:	b08d      	sub	sp, #52	@ 0x34
 8000532:	af00      	add	r7, sp, #0
 8000534:	60f8      	str	r0, [r7, #12]
 8000536:	60b9      	str	r1, [r7, #8]
 8000538:	4611      	mov	r1, r2
 800053a:	461a      	mov	r2, r3
 800053c:	460b      	mov	r3, r1
 800053e:	71fb      	strb	r3, [r7, #7]
 8000540:	4613      	mov	r3, r2
 8000542:	71bb      	strb	r3, [r7, #6]
 8000544:	466b      	mov	r3, sp
 8000546:	461e      	mov	r6, r3
	float potion = (float)(quantity_of_light/100);
 8000548:	79bb      	ldrb	r3, [r7, #6]
 800054a:	4a59      	ldr	r2, [pc, #356]	@ (80006b0 <WS2812B_yellow+0x184>)
 800054c:	fba2 2303 	umull	r2, r3, r2, r3
 8000550:	095b      	lsrs	r3, r3, #5
 8000552:	b2db      	uxtb	r3, r3
 8000554:	ee07 3a90 	vmov	s15, r3
 8000558:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800055c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	uint8_t red = (uint8_t)(255*potion);
 8000560:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000564:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 80006b4 <WS2812B_yellow+0x188>
 8000568:	ee67 7a87 	vmul.f32	s15, s15, s14
 800056c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000570:	edc7 7a00 	vstr	s15, [r7]
 8000574:	783b      	ldrb	r3, [r7, #0]
 8000576:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t green = (uint8_t)(255*potion);
 800057a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800057e:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80006b4 <WS2812B_yellow+0x188>
 8000582:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000586:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800058a:	edc7 7a00 	vstr	s15, [r7]
 800058e:	783b      	ldrb	r3, [r7, #0]
 8000590:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	uint8_t blue = (uint8_t)(0*potion);
 8000594:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000598:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80006b8 <WS2812B_yellow+0x18c>
 800059c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005a4:	edc7 7a00 	vstr	s15, [r7]
 80005a8:	783b      	ldrb	r3, [r7, #0]
 80005aa:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

	uint32_t color = green<<16 | red<<8 | blue;
 80005ae:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80005b2:	041a      	lsls	r2, r3, #16
 80005b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80005b8:	021b      	lsls	r3, r3, #8
 80005ba:	431a      	orrs	r2, r3
 80005bc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80005c0:	4313      	orrs	r3, r2
 80005c2:	61fb      	str	r3, [r7, #28]
	uint8_t sendData[24*led_number];
 80005c4:	79fa      	ldrb	r2, [r7, #7]
 80005c6:	4613      	mov	r3, r2
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	4413      	add	r3, r2
 80005cc:	00db      	lsls	r3, r3, #3
 80005ce:	4619      	mov	r1, r3
 80005d0:	1e4b      	subs	r3, r1, #1
 80005d2:	61bb      	str	r3, [r7, #24]
 80005d4:	460a      	mov	r2, r1
 80005d6:	2300      	movs	r3, #0
 80005d8:	4690      	mov	r8, r2
 80005da:	4699      	mov	r9, r3
 80005dc:	f04f 0200 	mov.w	r2, #0
 80005e0:	f04f 0300 	mov.w	r3, #0
 80005e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80005e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80005ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80005f0:	460a      	mov	r2, r1
 80005f2:	2300      	movs	r3, #0
 80005f4:	4614      	mov	r4, r2
 80005f6:	461d      	mov	r5, r3
 80005f8:	f04f 0200 	mov.w	r2, #0
 80005fc:	f04f 0300 	mov.w	r3, #0
 8000600:	00eb      	lsls	r3, r5, #3
 8000602:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000606:	00e2      	lsls	r2, r4, #3
 8000608:	460b      	mov	r3, r1
 800060a:	3307      	adds	r3, #7
 800060c:	08db      	lsrs	r3, r3, #3
 800060e:	00db      	lsls	r3, r3, #3
 8000610:	ebad 0d03 	sub.w	sp, sp, r3
 8000614:	466b      	mov	r3, sp
 8000616:	3300      	adds	r3, #0
 8000618:	617b      	str	r3, [r7, #20]

	for(int i=0; i<led_number; i++){
 800061a:	2300      	movs	r3, #0
 800061c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800061e:	e02c      	b.n	800067a <WS2812B_yellow+0x14e>
		for(int j=0; j<24; j++){
 8000620:	2300      	movs	r3, #0
 8000622:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000624:	e023      	b.n	800066e <WS2812B_yellow+0x142>
			if (((color>>(23-j))&0x01) == 1) {
 8000626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000628:	f1c3 0317 	rsb	r3, r3, #23
 800062c:	69fa      	ldr	r2, [r7, #28]
 800062e:	fa22 f303 	lsr.w	r3, r2, r3
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	2b00      	cmp	r3, #0
 8000638:	d00b      	beq.n	8000652 <WS2812B_yellow+0x126>
				sendData[i*24 + j] = 0b11000000;  // store 1
 800063a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800063c:	4613      	mov	r3, r2
 800063e:	005b      	lsls	r3, r3, #1
 8000640:	4413      	add	r3, r2
 8000642:	00db      	lsls	r3, r3, #3
 8000644:	461a      	mov	r2, r3
 8000646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000648:	4413      	add	r3, r2
 800064a:	697a      	ldr	r2, [r7, #20]
 800064c:	21c0      	movs	r1, #192	@ 0xc0
 800064e:	54d1      	strb	r1, [r2, r3]
 8000650:	e00a      	b.n	8000668 <WS2812B_yellow+0x13c>
			}
			else{
				sendData[i*24 + j] = 0b10000000;  // store 0
 8000652:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000654:	4613      	mov	r3, r2
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	4413      	add	r3, r2
 800065a:	00db      	lsls	r3, r3, #3
 800065c:	461a      	mov	r2, r3
 800065e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000660:	4413      	add	r3, r2
 8000662:	697a      	ldr	r2, [r7, #20]
 8000664:	2180      	movs	r1, #128	@ 0x80
 8000666:	54d1      	strb	r1, [r2, r3]
		for(int j=0; j<24; j++){
 8000668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800066a:	3301      	adds	r3, #1
 800066c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800066e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000670:	2b17      	cmp	r3, #23
 8000672:	ddd8      	ble.n	8000626 <WS2812B_yellow+0xfa>
	for(int i=0; i<led_number; i++){
 8000674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000676:	3301      	adds	r3, #1
 8000678:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800067e:	429a      	cmp	r2, r3
 8000680:	dbce      	blt.n	8000620 <WS2812B_yellow+0xf4>
			}
		}
	}

	HAL_SPI_Transmit(hspi, sendData, 24*led_number, 1000);
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	b29b      	uxth	r3, r3
 8000686:	461a      	mov	r2, r3
 8000688:	0052      	lsls	r2, r2, #1
 800068a:	4413      	add	r3, r2
 800068c:	00db      	lsls	r3, r3, #3
 800068e:	b29a      	uxth	r2, r3
 8000690:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000694:	6979      	ldr	r1, [r7, #20]
 8000696:	68f8      	ldr	r0, [r7, #12]
 8000698:	f002 fc3d 	bl	8002f16 <HAL_SPI_Transmit>
	wait_290us(htim);
 800069c:	68b8      	ldr	r0, [r7, #8]
 800069e:	f7ff fd93 	bl	80001c8 <wait_290us>
 80006a2:	46b5      	mov	sp, r6
}
 80006a4:	bf00      	nop
 80006a6:	3734      	adds	r7, #52	@ 0x34
 80006a8:	46bd      	mov	sp, r7
 80006aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80006ae:	bf00      	nop
 80006b0:	51eb851f 	.word	0x51eb851f
 80006b4:	437f0000 	.word	0x437f0000
 80006b8:	00000000 	.word	0x00000000

080006bc <WS2812B_green>:

void WS2812B_green (SPI_HandleTypeDef *hspi, TIM_HandleTypeDef *htim, uint8_t led_number,uint8_t quantity_of_light)
{
 80006bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80006c0:	b08d      	sub	sp, #52	@ 0x34
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	60f8      	str	r0, [r7, #12]
 80006c6:	60b9      	str	r1, [r7, #8]
 80006c8:	4611      	mov	r1, r2
 80006ca:	461a      	mov	r2, r3
 80006cc:	460b      	mov	r3, r1
 80006ce:	71fb      	strb	r3, [r7, #7]
 80006d0:	4613      	mov	r3, r2
 80006d2:	71bb      	strb	r3, [r7, #6]
 80006d4:	466b      	mov	r3, sp
 80006d6:	461e      	mov	r6, r3
	float potion = (float)(quantity_of_light/100);
 80006d8:	79bb      	ldrb	r3, [r7, #6]
 80006da:	4a59      	ldr	r2, [pc, #356]	@ (8000840 <WS2812B_green+0x184>)
 80006dc:	fba2 2303 	umull	r2, r3, r2, r3
 80006e0:	095b      	lsrs	r3, r3, #5
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	ee07 3a90 	vmov	s15, r3
 80006e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006ec:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	uint8_t red = (uint8_t)(0*potion);
 80006f0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80006f4:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8000844 <WS2812B_green+0x188>
 80006f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000700:	edc7 7a00 	vstr	s15, [r7]
 8000704:	783b      	ldrb	r3, [r7, #0]
 8000706:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t green = (uint8_t)(255*potion);
 800070a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800070e:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8000848 <WS2812B_green+0x18c>
 8000712:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000716:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800071a:	edc7 7a00 	vstr	s15, [r7]
 800071e:	783b      	ldrb	r3, [r7, #0]
 8000720:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	uint8_t blue = (uint8_t)(0*potion);
 8000724:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000728:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8000844 <WS2812B_green+0x188>
 800072c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000730:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000734:	edc7 7a00 	vstr	s15, [r7]
 8000738:	783b      	ldrb	r3, [r7, #0]
 800073a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

	uint32_t color = green<<16 | red<<8 | blue;
 800073e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000742:	041a      	lsls	r2, r3, #16
 8000744:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000748:	021b      	lsls	r3, r3, #8
 800074a:	431a      	orrs	r2, r3
 800074c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8000750:	4313      	orrs	r3, r2
 8000752:	61fb      	str	r3, [r7, #28]
	uint8_t sendData[24*led_number];
 8000754:	79fa      	ldrb	r2, [r7, #7]
 8000756:	4613      	mov	r3, r2
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	4413      	add	r3, r2
 800075c:	00db      	lsls	r3, r3, #3
 800075e:	4619      	mov	r1, r3
 8000760:	1e4b      	subs	r3, r1, #1
 8000762:	61bb      	str	r3, [r7, #24]
 8000764:	460a      	mov	r2, r1
 8000766:	2300      	movs	r3, #0
 8000768:	4690      	mov	r8, r2
 800076a:	4699      	mov	r9, r3
 800076c:	f04f 0200 	mov.w	r2, #0
 8000770:	f04f 0300 	mov.w	r3, #0
 8000774:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000778:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800077c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000780:	460a      	mov	r2, r1
 8000782:	2300      	movs	r3, #0
 8000784:	4614      	mov	r4, r2
 8000786:	461d      	mov	r5, r3
 8000788:	f04f 0200 	mov.w	r2, #0
 800078c:	f04f 0300 	mov.w	r3, #0
 8000790:	00eb      	lsls	r3, r5, #3
 8000792:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000796:	00e2      	lsls	r2, r4, #3
 8000798:	460b      	mov	r3, r1
 800079a:	3307      	adds	r3, #7
 800079c:	08db      	lsrs	r3, r3, #3
 800079e:	00db      	lsls	r3, r3, #3
 80007a0:	ebad 0d03 	sub.w	sp, sp, r3
 80007a4:	466b      	mov	r3, sp
 80007a6:	3300      	adds	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]

	for(int i=0; i<led_number; i++){
 80007aa:	2300      	movs	r3, #0
 80007ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80007ae:	e02c      	b.n	800080a <WS2812B_green+0x14e>
		for(int j=0; j<24; j++){
 80007b0:	2300      	movs	r3, #0
 80007b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80007b4:	e023      	b.n	80007fe <WS2812B_green+0x142>
			if (((color>>(23-j))&0x01) == 1) {
 80007b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007b8:	f1c3 0317 	rsb	r3, r3, #23
 80007bc:	69fa      	ldr	r2, [r7, #28]
 80007be:	fa22 f303 	lsr.w	r3, r2, r3
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d00b      	beq.n	80007e2 <WS2812B_green+0x126>
				sendData[i*24 + j] = 0b11000000;  // store 1
 80007ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80007cc:	4613      	mov	r3, r2
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	4413      	add	r3, r2
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	461a      	mov	r2, r3
 80007d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007d8:	4413      	add	r3, r2
 80007da:	697a      	ldr	r2, [r7, #20]
 80007dc:	21c0      	movs	r1, #192	@ 0xc0
 80007de:	54d1      	strb	r1, [r2, r3]
 80007e0:	e00a      	b.n	80007f8 <WS2812B_green+0x13c>
			}
			else{
				sendData[i*24 + j] = 0b10000000;  // store 0
 80007e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80007e4:	4613      	mov	r3, r2
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	4413      	add	r3, r2
 80007ea:	00db      	lsls	r3, r3, #3
 80007ec:	461a      	mov	r2, r3
 80007ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007f0:	4413      	add	r3, r2
 80007f2:	697a      	ldr	r2, [r7, #20]
 80007f4:	2180      	movs	r1, #128	@ 0x80
 80007f6:	54d1      	strb	r1, [r2, r3]
		for(int j=0; j<24; j++){
 80007f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007fa:	3301      	adds	r3, #1
 80007fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80007fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000800:	2b17      	cmp	r3, #23
 8000802:	ddd8      	ble.n	80007b6 <WS2812B_green+0xfa>
	for(int i=0; i<led_number; i++){
 8000804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000806:	3301      	adds	r3, #1
 8000808:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800080e:	429a      	cmp	r2, r3
 8000810:	dbce      	blt.n	80007b0 <WS2812B_green+0xf4>
			}
		}
	}

	HAL_SPI_Transmit(hspi, sendData, 24*led_number, 1000);
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	b29b      	uxth	r3, r3
 8000816:	461a      	mov	r2, r3
 8000818:	0052      	lsls	r2, r2, #1
 800081a:	4413      	add	r3, r2
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	b29a      	uxth	r2, r3
 8000820:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000824:	6979      	ldr	r1, [r7, #20]
 8000826:	68f8      	ldr	r0, [r7, #12]
 8000828:	f002 fb75 	bl	8002f16 <HAL_SPI_Transmit>
	wait_290us(htim);
 800082c:	68b8      	ldr	r0, [r7, #8]
 800082e:	f7ff fccb 	bl	80001c8 <wait_290us>
 8000832:	46b5      	mov	sp, r6
}
 8000834:	bf00      	nop
 8000836:	3734      	adds	r7, #52	@ 0x34
 8000838:	46bd      	mov	sp, r7
 800083a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800083e:	bf00      	nop
 8000840:	51eb851f 	.word	0x51eb851f
 8000844:	00000000 	.word	0x00000000
 8000848:	437f0000 	.word	0x437f0000

0800084c <WS2812B_light_blue>:

void WS2812B_light_blue (SPI_HandleTypeDef *hspi, TIM_HandleTypeDef *htim, uint8_t led_number,uint8_t quantity_of_light)
{
 800084c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000850:	b08d      	sub	sp, #52	@ 0x34
 8000852:	af00      	add	r7, sp, #0
 8000854:	60f8      	str	r0, [r7, #12]
 8000856:	60b9      	str	r1, [r7, #8]
 8000858:	4611      	mov	r1, r2
 800085a:	461a      	mov	r2, r3
 800085c:	460b      	mov	r3, r1
 800085e:	71fb      	strb	r3, [r7, #7]
 8000860:	4613      	mov	r3, r2
 8000862:	71bb      	strb	r3, [r7, #6]
 8000864:	466b      	mov	r3, sp
 8000866:	461e      	mov	r6, r3
	float potion = (float)(quantity_of_light/100);
 8000868:	79bb      	ldrb	r3, [r7, #6]
 800086a:	4a59      	ldr	r2, [pc, #356]	@ (80009d0 <WS2812B_light_blue+0x184>)
 800086c:	fba2 2303 	umull	r2, r3, r2, r3
 8000870:	095b      	lsrs	r3, r3, #5
 8000872:	b2db      	uxtb	r3, r3
 8000874:	ee07 3a90 	vmov	s15, r3
 8000878:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800087c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	uint8_t red = (uint8_t)(0*potion);
 8000880:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000884:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 80009d4 <WS2812B_light_blue+0x188>
 8000888:	ee67 7a87 	vmul.f32	s15, s15, s14
 800088c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000890:	edc7 7a00 	vstr	s15, [r7]
 8000894:	783b      	ldrb	r3, [r7, #0]
 8000896:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t green = (uint8_t)(255*potion);
 800089a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800089e:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 80009d8 <WS2812B_light_blue+0x18c>
 80008a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008aa:	edc7 7a00 	vstr	s15, [r7]
 80008ae:	783b      	ldrb	r3, [r7, #0]
 80008b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	uint8_t blue = (uint8_t)(255*potion);
 80008b4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80008b8:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80009d8 <WS2812B_light_blue+0x18c>
 80008bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008c4:	edc7 7a00 	vstr	s15, [r7]
 80008c8:	783b      	ldrb	r3, [r7, #0]
 80008ca:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

	uint32_t color = green<<16 | red<<8 | blue;
 80008ce:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80008d2:	041a      	lsls	r2, r3, #16
 80008d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80008d8:	021b      	lsls	r3, r3, #8
 80008da:	431a      	orrs	r2, r3
 80008dc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80008e0:	4313      	orrs	r3, r2
 80008e2:	61fb      	str	r3, [r7, #28]
	uint8_t sendData[24*led_number];
 80008e4:	79fa      	ldrb	r2, [r7, #7]
 80008e6:	4613      	mov	r3, r2
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	4413      	add	r3, r2
 80008ec:	00db      	lsls	r3, r3, #3
 80008ee:	4619      	mov	r1, r3
 80008f0:	1e4b      	subs	r3, r1, #1
 80008f2:	61bb      	str	r3, [r7, #24]
 80008f4:	460a      	mov	r2, r1
 80008f6:	2300      	movs	r3, #0
 80008f8:	4690      	mov	r8, r2
 80008fa:	4699      	mov	r9, r3
 80008fc:	f04f 0200 	mov.w	r2, #0
 8000900:	f04f 0300 	mov.w	r3, #0
 8000904:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000908:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800090c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000910:	460a      	mov	r2, r1
 8000912:	2300      	movs	r3, #0
 8000914:	4614      	mov	r4, r2
 8000916:	461d      	mov	r5, r3
 8000918:	f04f 0200 	mov.w	r2, #0
 800091c:	f04f 0300 	mov.w	r3, #0
 8000920:	00eb      	lsls	r3, r5, #3
 8000922:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000926:	00e2      	lsls	r2, r4, #3
 8000928:	460b      	mov	r3, r1
 800092a:	3307      	adds	r3, #7
 800092c:	08db      	lsrs	r3, r3, #3
 800092e:	00db      	lsls	r3, r3, #3
 8000930:	ebad 0d03 	sub.w	sp, sp, r3
 8000934:	466b      	mov	r3, sp
 8000936:	3300      	adds	r3, #0
 8000938:	617b      	str	r3, [r7, #20]

	for(int i=0; i<led_number; i++){
 800093a:	2300      	movs	r3, #0
 800093c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800093e:	e02c      	b.n	800099a <WS2812B_light_blue+0x14e>
		for(int j=0; j<24; j++){
 8000940:	2300      	movs	r3, #0
 8000942:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000944:	e023      	b.n	800098e <WS2812B_light_blue+0x142>
			if (((color>>(23-j))&0x01) == 1) {
 8000946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000948:	f1c3 0317 	rsb	r3, r3, #23
 800094c:	69fa      	ldr	r2, [r7, #28]
 800094e:	fa22 f303 	lsr.w	r3, r2, r3
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	2b00      	cmp	r3, #0
 8000958:	d00b      	beq.n	8000972 <WS2812B_light_blue+0x126>
				sendData[i*24 + j] = 0b11000000;  // store 1
 800095a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800095c:	4613      	mov	r3, r2
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	4413      	add	r3, r2
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	461a      	mov	r2, r3
 8000966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000968:	4413      	add	r3, r2
 800096a:	697a      	ldr	r2, [r7, #20]
 800096c:	21c0      	movs	r1, #192	@ 0xc0
 800096e:	54d1      	strb	r1, [r2, r3]
 8000970:	e00a      	b.n	8000988 <WS2812B_light_blue+0x13c>
			}
			else{
				sendData[i*24 + j] = 0b10000000;  // store 0
 8000972:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000974:	4613      	mov	r3, r2
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	4413      	add	r3, r2
 800097a:	00db      	lsls	r3, r3, #3
 800097c:	461a      	mov	r2, r3
 800097e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000980:	4413      	add	r3, r2
 8000982:	697a      	ldr	r2, [r7, #20]
 8000984:	2180      	movs	r1, #128	@ 0x80
 8000986:	54d1      	strb	r1, [r2, r3]
		for(int j=0; j<24; j++){
 8000988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800098a:	3301      	adds	r3, #1
 800098c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800098e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000990:	2b17      	cmp	r3, #23
 8000992:	ddd8      	ble.n	8000946 <WS2812B_light_blue+0xfa>
	for(int i=0; i<led_number; i++){
 8000994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000996:	3301      	adds	r3, #1
 8000998:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800099e:	429a      	cmp	r2, r3
 80009a0:	dbce      	blt.n	8000940 <WS2812B_light_blue+0xf4>
			}
		}
	}

	HAL_SPI_Transmit(hspi, sendData, 24*led_number, 1000);
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	461a      	mov	r2, r3
 80009a8:	0052      	lsls	r2, r2, #1
 80009aa:	4413      	add	r3, r2
 80009ac:	00db      	lsls	r3, r3, #3
 80009ae:	b29a      	uxth	r2, r3
 80009b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009b4:	6979      	ldr	r1, [r7, #20]
 80009b6:	68f8      	ldr	r0, [r7, #12]
 80009b8:	f002 faad 	bl	8002f16 <HAL_SPI_Transmit>
	wait_290us(htim);
 80009bc:	68b8      	ldr	r0, [r7, #8]
 80009be:	f7ff fc03 	bl	80001c8 <wait_290us>
 80009c2:	46b5      	mov	sp, r6
}
 80009c4:	bf00      	nop
 80009c6:	3734      	adds	r7, #52	@ 0x34
 80009c8:	46bd      	mov	sp, r7
 80009ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80009ce:	bf00      	nop
 80009d0:	51eb851f 	.word	0x51eb851f
 80009d4:	00000000 	.word	0x00000000
 80009d8:	437f0000 	.word	0x437f0000

080009dc <WS2812B_blue>:

void WS2812B_blue (SPI_HandleTypeDef *hspi, TIM_HandleTypeDef *htim, uint8_t led_number,uint8_t quantity_of_light)
{
 80009dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80009e0:	b08d      	sub	sp, #52	@ 0x34
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	60f8      	str	r0, [r7, #12]
 80009e6:	60b9      	str	r1, [r7, #8]
 80009e8:	4611      	mov	r1, r2
 80009ea:	461a      	mov	r2, r3
 80009ec:	460b      	mov	r3, r1
 80009ee:	71fb      	strb	r3, [r7, #7]
 80009f0:	4613      	mov	r3, r2
 80009f2:	71bb      	strb	r3, [r7, #6]
 80009f4:	466b      	mov	r3, sp
 80009f6:	461e      	mov	r6, r3
	float potion = (float)(quantity_of_light/100);
 80009f8:	79bb      	ldrb	r3, [r7, #6]
 80009fa:	4a59      	ldr	r2, [pc, #356]	@ (8000b60 <WS2812B_blue+0x184>)
 80009fc:	fba2 2303 	umull	r2, r3, r2, r3
 8000a00:	095b      	lsrs	r3, r3, #5
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	ee07 3a90 	vmov	s15, r3
 8000a08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a0c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	uint8_t red = (uint8_t)(0*potion);
 8000a10:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000a14:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8000b64 <WS2812B_blue+0x188>
 8000a18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a20:	edc7 7a00 	vstr	s15, [r7]
 8000a24:	783b      	ldrb	r3, [r7, #0]
 8000a26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t green = (uint8_t)(0*potion);
 8000a2a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000a2e:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8000b64 <WS2812B_blue+0x188>
 8000a32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a3a:	edc7 7a00 	vstr	s15, [r7]
 8000a3e:	783b      	ldrb	r3, [r7, #0]
 8000a40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	uint8_t blue = (uint8_t)(255*potion);
 8000a44:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000a48:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8000b68 <WS2812B_blue+0x18c>
 8000a4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a54:	edc7 7a00 	vstr	s15, [r7]
 8000a58:	783b      	ldrb	r3, [r7, #0]
 8000a5a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

	uint32_t color = green<<16 | red<<8 | blue;
 8000a5e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000a62:	041a      	lsls	r2, r3, #16
 8000a64:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000a68:	021b      	lsls	r3, r3, #8
 8000a6a:	431a      	orrs	r2, r3
 8000a6c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8000a70:	4313      	orrs	r3, r2
 8000a72:	61fb      	str	r3, [r7, #28]
	uint8_t sendData[24*led_number];
 8000a74:	79fa      	ldrb	r2, [r7, #7]
 8000a76:	4613      	mov	r3, r2
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	4413      	add	r3, r2
 8000a7c:	00db      	lsls	r3, r3, #3
 8000a7e:	4619      	mov	r1, r3
 8000a80:	1e4b      	subs	r3, r1, #1
 8000a82:	61bb      	str	r3, [r7, #24]
 8000a84:	460a      	mov	r2, r1
 8000a86:	2300      	movs	r3, #0
 8000a88:	4690      	mov	r8, r2
 8000a8a:	4699      	mov	r9, r3
 8000a8c:	f04f 0200 	mov.w	r2, #0
 8000a90:	f04f 0300 	mov.w	r3, #0
 8000a94:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000a98:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000a9c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000aa0:	460a      	mov	r2, r1
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	4614      	mov	r4, r2
 8000aa6:	461d      	mov	r5, r3
 8000aa8:	f04f 0200 	mov.w	r2, #0
 8000aac:	f04f 0300 	mov.w	r3, #0
 8000ab0:	00eb      	lsls	r3, r5, #3
 8000ab2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000ab6:	00e2      	lsls	r2, r4, #3
 8000ab8:	460b      	mov	r3, r1
 8000aba:	3307      	adds	r3, #7
 8000abc:	08db      	lsrs	r3, r3, #3
 8000abe:	00db      	lsls	r3, r3, #3
 8000ac0:	ebad 0d03 	sub.w	sp, sp, r3
 8000ac4:	466b      	mov	r3, sp
 8000ac6:	3300      	adds	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]

	for(int i=0; i<led_number; i++){
 8000aca:	2300      	movs	r3, #0
 8000acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ace:	e02c      	b.n	8000b2a <WS2812B_blue+0x14e>
		for(int j=0; j<24; j++){
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ad4:	e023      	b.n	8000b1e <WS2812B_blue+0x142>
			if (((color>>(23-j))&0x01) == 1) {
 8000ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ad8:	f1c3 0317 	rsb	r3, r3, #23
 8000adc:	69fa      	ldr	r2, [r7, #28]
 8000ade:	fa22 f303 	lsr.w	r3, r2, r3
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d00b      	beq.n	8000b02 <WS2812B_blue+0x126>
				sendData[i*24 + j] = 0b11000000;  // store 1
 8000aea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000aec:	4613      	mov	r3, r2
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	4413      	add	r3, r2
 8000af2:	00db      	lsls	r3, r3, #3
 8000af4:	461a      	mov	r2, r3
 8000af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000af8:	4413      	add	r3, r2
 8000afa:	697a      	ldr	r2, [r7, #20]
 8000afc:	21c0      	movs	r1, #192	@ 0xc0
 8000afe:	54d1      	strb	r1, [r2, r3]
 8000b00:	e00a      	b.n	8000b18 <WS2812B_blue+0x13c>
			}
			else{
				sendData[i*24 + j] = 0b10000000;  // store 0
 8000b02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000b04:	4613      	mov	r3, r2
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	4413      	add	r3, r2
 8000b0a:	00db      	lsls	r3, r3, #3
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b10:	4413      	add	r3, r2
 8000b12:	697a      	ldr	r2, [r7, #20]
 8000b14:	2180      	movs	r1, #128	@ 0x80
 8000b16:	54d1      	strb	r1, [r2, r3]
		for(int j=0; j<24; j++){
 8000b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b20:	2b17      	cmp	r3, #23
 8000b22:	ddd8      	ble.n	8000ad6 <WS2812B_blue+0xfa>
	for(int i=0; i<led_number; i++){
 8000b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b26:	3301      	adds	r3, #1
 8000b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	dbce      	blt.n	8000ad0 <WS2812B_blue+0xf4>
			}
		}
	}

	HAL_SPI_Transmit(hspi, sendData, 24*led_number, 1000);
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	461a      	mov	r2, r3
 8000b38:	0052      	lsls	r2, r2, #1
 8000b3a:	4413      	add	r3, r2
 8000b3c:	00db      	lsls	r3, r3, #3
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b44:	6979      	ldr	r1, [r7, #20]
 8000b46:	68f8      	ldr	r0, [r7, #12]
 8000b48:	f002 f9e5 	bl	8002f16 <HAL_SPI_Transmit>
	wait_290us(htim);
 8000b4c:	68b8      	ldr	r0, [r7, #8]
 8000b4e:	f7ff fb3b 	bl	80001c8 <wait_290us>
 8000b52:	46b5      	mov	sp, r6
}
 8000b54:	bf00      	nop
 8000b56:	3734      	adds	r7, #52	@ 0x34
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b5e:	bf00      	nop
 8000b60:	51eb851f 	.word	0x51eb851f
 8000b64:	00000000 	.word	0x00000000
 8000b68:	437f0000 	.word	0x437f0000

08000b6c <WS2812B_purple>:

void WS2812B_purple (SPI_HandleTypeDef *hspi, TIM_HandleTypeDef *htim, uint8_t led_number,uint8_t quantity_of_light)
{
 8000b6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b70:	b08d      	sub	sp, #52	@ 0x34
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	60f8      	str	r0, [r7, #12]
 8000b76:	60b9      	str	r1, [r7, #8]
 8000b78:	4611      	mov	r1, r2
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	71fb      	strb	r3, [r7, #7]
 8000b80:	4613      	mov	r3, r2
 8000b82:	71bb      	strb	r3, [r7, #6]
 8000b84:	466b      	mov	r3, sp
 8000b86:	461e      	mov	r6, r3
	float potion = (float)(quantity_of_light/100);
 8000b88:	79bb      	ldrb	r3, [r7, #6]
 8000b8a:	4a59      	ldr	r2, [pc, #356]	@ (8000cf0 <WS2812B_purple+0x184>)
 8000b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b90:	095b      	lsrs	r3, r3, #5
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	ee07 3a90 	vmov	s15, r3
 8000b98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b9c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	uint8_t red = (uint8_t)(255*potion);
 8000ba0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000ba4:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8000cf4 <WS2812B_purple+0x188>
 8000ba8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bb0:	edc7 7a00 	vstr	s15, [r7]
 8000bb4:	783b      	ldrb	r3, [r7, #0]
 8000bb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t green = (uint8_t)(0*potion);
 8000bba:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000bbe:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8000cf8 <WS2812B_purple+0x18c>
 8000bc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bca:	edc7 7a00 	vstr	s15, [r7]
 8000bce:	783b      	ldrb	r3, [r7, #0]
 8000bd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	uint8_t blue = (uint8_t)(255*potion);
 8000bd4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000bd8:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8000cf4 <WS2812B_purple+0x188>
 8000bdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000be0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000be4:	edc7 7a00 	vstr	s15, [r7]
 8000be8:	783b      	ldrb	r3, [r7, #0]
 8000bea:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

	uint32_t color = green<<16 | red<<8 | blue;
 8000bee:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000bf2:	041a      	lsls	r2, r3, #16
 8000bf4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000bf8:	021b      	lsls	r3, r3, #8
 8000bfa:	431a      	orrs	r2, r3
 8000bfc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8000c00:	4313      	orrs	r3, r2
 8000c02:	61fb      	str	r3, [r7, #28]
	uint8_t sendData[24*led_number];
 8000c04:	79fa      	ldrb	r2, [r7, #7]
 8000c06:	4613      	mov	r3, r2
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	4413      	add	r3, r2
 8000c0c:	00db      	lsls	r3, r3, #3
 8000c0e:	4619      	mov	r1, r3
 8000c10:	1e4b      	subs	r3, r1, #1
 8000c12:	61bb      	str	r3, [r7, #24]
 8000c14:	460a      	mov	r2, r1
 8000c16:	2300      	movs	r3, #0
 8000c18:	4690      	mov	r8, r2
 8000c1a:	4699      	mov	r9, r3
 8000c1c:	f04f 0200 	mov.w	r2, #0
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000c28:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000c2c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000c30:	460a      	mov	r2, r1
 8000c32:	2300      	movs	r3, #0
 8000c34:	4614      	mov	r4, r2
 8000c36:	461d      	mov	r5, r3
 8000c38:	f04f 0200 	mov.w	r2, #0
 8000c3c:	f04f 0300 	mov.w	r3, #0
 8000c40:	00eb      	lsls	r3, r5, #3
 8000c42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c46:	00e2      	lsls	r2, r4, #3
 8000c48:	460b      	mov	r3, r1
 8000c4a:	3307      	adds	r3, #7
 8000c4c:	08db      	lsrs	r3, r3, #3
 8000c4e:	00db      	lsls	r3, r3, #3
 8000c50:	ebad 0d03 	sub.w	sp, sp, r3
 8000c54:	466b      	mov	r3, sp
 8000c56:	3300      	adds	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]

	for(int i=0; i<led_number; i++){
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c5e:	e02c      	b.n	8000cba <WS2812B_purple+0x14e>
		for(int j=0; j<24; j++){
 8000c60:	2300      	movs	r3, #0
 8000c62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c64:	e023      	b.n	8000cae <WS2812B_purple+0x142>
			if (((color>>(23-j))&0x01) == 1) {
 8000c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c68:	f1c3 0317 	rsb	r3, r3, #23
 8000c6c:	69fa      	ldr	r2, [r7, #28]
 8000c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d00b      	beq.n	8000c92 <WS2812B_purple+0x126>
				sendData[i*24 + j] = 0b11000000;  // store 1
 8000c7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	4413      	add	r3, r2
 8000c82:	00db      	lsls	r3, r3, #3
 8000c84:	461a      	mov	r2, r3
 8000c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c88:	4413      	add	r3, r2
 8000c8a:	697a      	ldr	r2, [r7, #20]
 8000c8c:	21c0      	movs	r1, #192	@ 0xc0
 8000c8e:	54d1      	strb	r1, [r2, r3]
 8000c90:	e00a      	b.n	8000ca8 <WS2812B_purple+0x13c>
			}
			else{
				sendData[i*24 + j] = 0b10000000;  // store 0
 8000c92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000c94:	4613      	mov	r3, r2
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	4413      	add	r3, r2
 8000c9a:	00db      	lsls	r3, r3, #3
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ca0:	4413      	add	r3, r2
 8000ca2:	697a      	ldr	r2, [r7, #20]
 8000ca4:	2180      	movs	r1, #128	@ 0x80
 8000ca6:	54d1      	strb	r1, [r2, r3]
		for(int j=0; j<24; j++){
 8000ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000caa:	3301      	adds	r3, #1
 8000cac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cb0:	2b17      	cmp	r3, #23
 8000cb2:	ddd8      	ble.n	8000c66 <WS2812B_purple+0xfa>
	for(int i=0; i<led_number; i++){
 8000cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	dbce      	blt.n	8000c60 <WS2812B_purple+0xf4>
			}
		}
	}

	HAL_SPI_Transmit(hspi, sendData, 24*led_number, 1000);
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	0052      	lsls	r2, r2, #1
 8000cca:	4413      	add	r3, r2
 8000ccc:	00db      	lsls	r3, r3, #3
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cd4:	6979      	ldr	r1, [r7, #20]
 8000cd6:	68f8      	ldr	r0, [r7, #12]
 8000cd8:	f002 f91d 	bl	8002f16 <HAL_SPI_Transmit>
	wait_290us(htim);
 8000cdc:	68b8      	ldr	r0, [r7, #8]
 8000cde:	f7ff fa73 	bl	80001c8 <wait_290us>
 8000ce2:	46b5      	mov	sp, r6
}
 8000ce4:	bf00      	nop
 8000ce6:	3734      	adds	r7, #52	@ 0x34
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000cee:	bf00      	nop
 8000cf0:	51eb851f 	.word	0x51eb851f
 8000cf4:	437f0000 	.word	0x437f0000
 8000cf8:	00000000 	.word	0x00000000

08000cfc <WS2812B_white>:

void WS2812B_white (SPI_HandleTypeDef *hspi, TIM_HandleTypeDef *htim, uint8_t led_number,uint8_t quantity_of_light)
{
 8000cfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d00:	b08d      	sub	sp, #52	@ 0x34
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	60f8      	str	r0, [r7, #12]
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	4611      	mov	r1, r2
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	71fb      	strb	r3, [r7, #7]
 8000d10:	4613      	mov	r3, r2
 8000d12:	71bb      	strb	r3, [r7, #6]
 8000d14:	466b      	mov	r3, sp
 8000d16:	461e      	mov	r6, r3
	float potion = (float)(quantity_of_light/100);
 8000d18:	79bb      	ldrb	r3, [r7, #6]
 8000d1a:	4a59      	ldr	r2, [pc, #356]	@ (8000e80 <WS2812B_white+0x184>)
 8000d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d20:	095b      	lsrs	r3, r3, #5
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	ee07 3a90 	vmov	s15, r3
 8000d28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d2c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	uint8_t red = (uint8_t)(255*potion);
 8000d30:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000d34:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8000e84 <WS2812B_white+0x188>
 8000d38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d40:	edc7 7a00 	vstr	s15, [r7]
 8000d44:	783b      	ldrb	r3, [r7, #0]
 8000d46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t green = (uint8_t)(255*potion);
 8000d4a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000d4e:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8000e84 <WS2812B_white+0x188>
 8000d52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d5a:	edc7 7a00 	vstr	s15, [r7]
 8000d5e:	783b      	ldrb	r3, [r7, #0]
 8000d60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	uint8_t blue = (uint8_t)(255*potion);
 8000d64:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000d68:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8000e84 <WS2812B_white+0x188>
 8000d6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d74:	edc7 7a00 	vstr	s15, [r7]
 8000d78:	783b      	ldrb	r3, [r7, #0]
 8000d7a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

	uint32_t color = green<<16 | red<<8 | blue;
 8000d7e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000d82:	041a      	lsls	r2, r3, #16
 8000d84:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000d88:	021b      	lsls	r3, r3, #8
 8000d8a:	431a      	orrs	r2, r3
 8000d8c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8000d90:	4313      	orrs	r3, r2
 8000d92:	61fb      	str	r3, [r7, #28]
	uint8_t sendData[24*led_number];
 8000d94:	79fa      	ldrb	r2, [r7, #7]
 8000d96:	4613      	mov	r3, r2
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	4413      	add	r3, r2
 8000d9c:	00db      	lsls	r3, r3, #3
 8000d9e:	4619      	mov	r1, r3
 8000da0:	1e4b      	subs	r3, r1, #1
 8000da2:	61bb      	str	r3, [r7, #24]
 8000da4:	460a      	mov	r2, r1
 8000da6:	2300      	movs	r3, #0
 8000da8:	4690      	mov	r8, r2
 8000daa:	4699      	mov	r9, r3
 8000dac:	f04f 0200 	mov.w	r2, #0
 8000db0:	f04f 0300 	mov.w	r3, #0
 8000db4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000db8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000dbc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000dc0:	460a      	mov	r2, r1
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	4614      	mov	r4, r2
 8000dc6:	461d      	mov	r5, r3
 8000dc8:	f04f 0200 	mov.w	r2, #0
 8000dcc:	f04f 0300 	mov.w	r3, #0
 8000dd0:	00eb      	lsls	r3, r5, #3
 8000dd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000dd6:	00e2      	lsls	r2, r4, #3
 8000dd8:	460b      	mov	r3, r1
 8000dda:	3307      	adds	r3, #7
 8000ddc:	08db      	lsrs	r3, r3, #3
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	ebad 0d03 	sub.w	sp, sp, r3
 8000de4:	466b      	mov	r3, sp
 8000de6:	3300      	adds	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]

	for(int i=0; i<led_number; i++){
 8000dea:	2300      	movs	r3, #0
 8000dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000dee:	e02c      	b.n	8000e4a <WS2812B_white+0x14e>
		for(int j=0; j<24; j++){
 8000df0:	2300      	movs	r3, #0
 8000df2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000df4:	e023      	b.n	8000e3e <WS2812B_white+0x142>
			if (((color>>(23-j))&0x01) == 1) {
 8000df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000df8:	f1c3 0317 	rsb	r3, r3, #23
 8000dfc:	69fa      	ldr	r2, [r7, #28]
 8000dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d00b      	beq.n	8000e22 <WS2812B_white+0x126>
				sendData[i*24 + j] = 0b11000000;  // store 1
 8000e0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	4413      	add	r3, r2
 8000e12:	00db      	lsls	r3, r3, #3
 8000e14:	461a      	mov	r2, r3
 8000e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e18:	4413      	add	r3, r2
 8000e1a:	697a      	ldr	r2, [r7, #20]
 8000e1c:	21c0      	movs	r1, #192	@ 0xc0
 8000e1e:	54d1      	strb	r1, [r2, r3]
 8000e20:	e00a      	b.n	8000e38 <WS2812B_white+0x13c>
			}
			else{
				sendData[i*24 + j] = 0b10000000;  // store 0
 8000e22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e24:	4613      	mov	r3, r2
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	4413      	add	r3, r2
 8000e2a:	00db      	lsls	r3, r3, #3
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e30:	4413      	add	r3, r2
 8000e32:	697a      	ldr	r2, [r7, #20]
 8000e34:	2180      	movs	r1, #128	@ 0x80
 8000e36:	54d1      	strb	r1, [r2, r3]
		for(int j=0; j<24; j++){
 8000e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e40:	2b17      	cmp	r3, #23
 8000e42:	ddd8      	ble.n	8000df6 <WS2812B_white+0xfa>
	for(int i=0; i<led_number; i++){
 8000e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e46:	3301      	adds	r3, #1
 8000e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	dbce      	blt.n	8000df0 <WS2812B_white+0xf4>
			}
		}
	}

	HAL_SPI_Transmit(hspi, sendData, 24*led_number, 1000);
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	461a      	mov	r2, r3
 8000e58:	0052      	lsls	r2, r2, #1
 8000e5a:	4413      	add	r3, r2
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	b29a      	uxth	r2, r3
 8000e60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e64:	6979      	ldr	r1, [r7, #20]
 8000e66:	68f8      	ldr	r0, [r7, #12]
 8000e68:	f002 f855 	bl	8002f16 <HAL_SPI_Transmit>
	wait_290us(htim);
 8000e6c:	68b8      	ldr	r0, [r7, #8]
 8000e6e:	f7ff f9ab 	bl	80001c8 <wait_290us>
 8000e72:	46b5      	mov	sp, r6
}
 8000e74:	bf00      	nop
 8000e76:	3734      	adds	r7, #52	@ 0x34
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e7e:	bf00      	nop
 8000e80:	51eb851f 	.word	0x51eb851f
 8000e84:	437f0000 	.word	0x437f0000

08000e88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e8c:	f000 fa84 	bl	8001398 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e90:	f000 f83e 	bl	8000f10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e94:	f000 f920 	bl	80010d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e98:	f000 f8ee 	bl	8001078 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000e9c:	f000 f878 	bl	8000f90 <MX_SPI1_Init>
  MX_TIM7_Init();
 8000ea0:	f000 f8b4 	bl	800100c <MX_TIM7_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  WS2812B_red(&hspi1, &htim7, 15, 100);
 8000ea4:	2364      	movs	r3, #100	@ 0x64
 8000ea6:	220f      	movs	r2, #15
 8000ea8:	4917      	ldr	r1, [pc, #92]	@ (8000f08 <main+0x80>)
 8000eaa:	4818      	ldr	r0, [pc, #96]	@ (8000f0c <main+0x84>)
 8000eac:	f7ff f9ae 	bl	800020c <WS2812B_red>
	  WS2812B_orange(&hspi1, &htim7, 15, 100);
 8000eb0:	2364      	movs	r3, #100	@ 0x64
 8000eb2:	220f      	movs	r2, #15
 8000eb4:	4914      	ldr	r1, [pc, #80]	@ (8000f08 <main+0x80>)
 8000eb6:	4815      	ldr	r0, [pc, #84]	@ (8000f0c <main+0x84>)
 8000eb8:	f7ff fa70 	bl	800039c <WS2812B_orange>
	  WS2812B_yellow(&hspi1, &htim7, 15, 100);
 8000ebc:	2364      	movs	r3, #100	@ 0x64
 8000ebe:	220f      	movs	r2, #15
 8000ec0:	4911      	ldr	r1, [pc, #68]	@ (8000f08 <main+0x80>)
 8000ec2:	4812      	ldr	r0, [pc, #72]	@ (8000f0c <main+0x84>)
 8000ec4:	f7ff fb32 	bl	800052c <WS2812B_yellow>
	  WS2812B_green(&hspi1, &htim7, 15, 100);
 8000ec8:	2364      	movs	r3, #100	@ 0x64
 8000eca:	220f      	movs	r2, #15
 8000ecc:	490e      	ldr	r1, [pc, #56]	@ (8000f08 <main+0x80>)
 8000ece:	480f      	ldr	r0, [pc, #60]	@ (8000f0c <main+0x84>)
 8000ed0:	f7ff fbf4 	bl	80006bc <WS2812B_green>
	  WS2812B_light_blue(&hspi1, &htim7, 15, 100);
 8000ed4:	2364      	movs	r3, #100	@ 0x64
 8000ed6:	220f      	movs	r2, #15
 8000ed8:	490b      	ldr	r1, [pc, #44]	@ (8000f08 <main+0x80>)
 8000eda:	480c      	ldr	r0, [pc, #48]	@ (8000f0c <main+0x84>)
 8000edc:	f7ff fcb6 	bl	800084c <WS2812B_light_blue>
	  WS2812B_blue(&hspi1, &htim7, 15, 100);
 8000ee0:	2364      	movs	r3, #100	@ 0x64
 8000ee2:	220f      	movs	r2, #15
 8000ee4:	4908      	ldr	r1, [pc, #32]	@ (8000f08 <main+0x80>)
 8000ee6:	4809      	ldr	r0, [pc, #36]	@ (8000f0c <main+0x84>)
 8000ee8:	f7ff fd78 	bl	80009dc <WS2812B_blue>
	  WS2812B_purple(&hspi1, &htim7, 15, 100);
 8000eec:	2364      	movs	r3, #100	@ 0x64
 8000eee:	220f      	movs	r2, #15
 8000ef0:	4905      	ldr	r1, [pc, #20]	@ (8000f08 <main+0x80>)
 8000ef2:	4806      	ldr	r0, [pc, #24]	@ (8000f0c <main+0x84>)
 8000ef4:	f7ff fe3a 	bl	8000b6c <WS2812B_purple>
	  WS2812B_white(&hspi1, &htim7, 15, 100);
 8000ef8:	2364      	movs	r3, #100	@ 0x64
 8000efa:	220f      	movs	r2, #15
 8000efc:	4902      	ldr	r1, [pc, #8]	@ (8000f08 <main+0x80>)
 8000efe:	4803      	ldr	r0, [pc, #12]	@ (8000f0c <main+0x84>)
 8000f00:	f7ff fefc 	bl	8000cfc <WS2812B_white>
	  WS2812B_red(&hspi1, &htim7, 15, 100);
 8000f04:	bf00      	nop
 8000f06:	e7cd      	b.n	8000ea4 <main+0x1c>
 8000f08:	20000090 	.word	0x20000090
 8000f0c:	2000002c 	.word	0x2000002c

08000f10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b090      	sub	sp, #64	@ 0x40
 8000f14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f16:	f107 0318 	add.w	r3, r7, #24
 8000f1a:	2228      	movs	r2, #40	@ 0x28
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f003 f80f 	bl	8003f42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
 8000f30:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f32:	2302      	movs	r3, #2
 8000f34:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f36:	2301      	movs	r3, #1
 8000f38:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f3a:	2310      	movs	r3, #16
 8000f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f42:	2300      	movs	r3, #0
 8000f44:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000f46:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 8000f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4c:	f107 0318 	add.w	r3, r7, #24
 8000f50:	4618      	mov	r0, r3
 8000f52:	f000 fcdf 	bl	8001914 <HAL_RCC_OscConfig>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000f5c:	f000 f8e0 	bl	8001120 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f60:	230f      	movs	r3, #15
 8000f62:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f64:	2302      	movs	r3, #2
 8000f66:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	2101      	movs	r1, #1
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f001 fd09 	bl	8002990 <HAL_RCC_ClockConfig>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000f84:	f000 f8cc 	bl	8001120 <Error_Handler>
  }
}
 8000f88:	bf00      	nop
 8000f8a:	3740      	adds	r7, #64	@ 0x40
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f94:	4b1b      	ldr	r3, [pc, #108]	@ (8001004 <MX_SPI1_Init+0x74>)
 8000f96:	4a1c      	ldr	r2, [pc, #112]	@ (8001008 <MX_SPI1_Init+0x78>)
 8000f98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001004 <MX_SPI1_Init+0x74>)
 8000f9c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000fa0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fa2:	4b18      	ldr	r3, [pc, #96]	@ (8001004 <MX_SPI1_Init+0x74>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fa8:	4b16      	ldr	r3, [pc, #88]	@ (8001004 <MX_SPI1_Init+0x74>)
 8000faa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000fae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fb0:	4b14      	ldr	r3, [pc, #80]	@ (8001004 <MX_SPI1_Init+0x74>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fb6:	4b13      	ldr	r3, [pc, #76]	@ (8001004 <MX_SPI1_Init+0x74>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fbc:	4b11      	ldr	r3, [pc, #68]	@ (8001004 <MX_SPI1_Init+0x74>)
 8000fbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fc2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001004 <MX_SPI1_Init+0x74>)
 8000fc6:	2208      	movs	r2, #8
 8000fc8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fca:	4b0e      	ldr	r3, [pc, #56]	@ (8001004 <MX_SPI1_Init+0x74>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <MX_SPI1_Init+0x74>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001004 <MX_SPI1_Init+0x74>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000fdc:	4b09      	ldr	r3, [pc, #36]	@ (8001004 <MX_SPI1_Init+0x74>)
 8000fde:	2207      	movs	r2, #7
 8000fe0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fe2:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <MX_SPI1_Init+0x74>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fe8:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <MX_SPI1_Init+0x74>)
 8000fea:	2208      	movs	r2, #8
 8000fec:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fee:	4805      	ldr	r0, [pc, #20]	@ (8001004 <MX_SPI1_Init+0x74>)
 8000ff0:	f001 feee 	bl	8002dd0 <HAL_SPI_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ffa:	f000 f891 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	2000002c 	.word	0x2000002c
 8001008:	40013000 	.word	0x40013000

0800100c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800101c:	4b14      	ldr	r3, [pc, #80]	@ (8001070 <MX_TIM7_Init+0x64>)
 800101e:	4a15      	ldr	r2, [pc, #84]	@ (8001074 <MX_TIM7_Init+0x68>)
 8001020:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 32-1;
 8001022:	4b13      	ldr	r3, [pc, #76]	@ (8001070 <MX_TIM7_Init+0x64>)
 8001024:	221f      	movs	r2, #31
 8001026:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001028:	4b11      	ldr	r3, [pc, #68]	@ (8001070 <MX_TIM7_Init+0x64>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 800102e:	4b10      	ldr	r3, [pc, #64]	@ (8001070 <MX_TIM7_Init+0x64>)
 8001030:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001034:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001036:	4b0e      	ldr	r3, [pc, #56]	@ (8001070 <MX_TIM7_Init+0x64>)
 8001038:	2200      	movs	r2, #0
 800103a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800103c:	480c      	ldr	r0, [pc, #48]	@ (8001070 <MX_TIM7_Init+0x64>)
 800103e:	f002 fa43 	bl	80034c8 <HAL_TIM_Base_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001048:	f000 f86a 	bl	8001120 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800104c:	2300      	movs	r3, #0
 800104e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001050:	2300      	movs	r3, #0
 8001052:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	4619      	mov	r1, r3
 8001058:	4805      	ldr	r0, [pc, #20]	@ (8001070 <MX_TIM7_Init+0x64>)
 800105a:	f002 fb65 	bl	8003728 <HAL_TIMEx_MasterConfigSynchronization>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001064:	f000 f85c 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001068:	bf00      	nop
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000090 	.word	0x20000090
 8001074:	40001400 	.word	0x40001400

08001078 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800107c:	4b14      	ldr	r3, [pc, #80]	@ (80010d0 <MX_USART2_UART_Init+0x58>)
 800107e:	4a15      	ldr	r2, [pc, #84]	@ (80010d4 <MX_USART2_UART_Init+0x5c>)
 8001080:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001082:	4b13      	ldr	r3, [pc, #76]	@ (80010d0 <MX_USART2_UART_Init+0x58>)
 8001084:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001088:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800108a:	4b11      	ldr	r3, [pc, #68]	@ (80010d0 <MX_USART2_UART_Init+0x58>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001090:	4b0f      	ldr	r3, [pc, #60]	@ (80010d0 <MX_USART2_UART_Init+0x58>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001096:	4b0e      	ldr	r3, [pc, #56]	@ (80010d0 <MX_USART2_UART_Init+0x58>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800109c:	4b0c      	ldr	r3, [pc, #48]	@ (80010d0 <MX_USART2_UART_Init+0x58>)
 800109e:	220c      	movs	r2, #12
 80010a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a2:	4b0b      	ldr	r3, [pc, #44]	@ (80010d0 <MX_USART2_UART_Init+0x58>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a8:	4b09      	ldr	r3, [pc, #36]	@ (80010d0 <MX_USART2_UART_Init+0x58>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ae:	4b08      	ldr	r3, [pc, #32]	@ (80010d0 <MX_USART2_UART_Init+0x58>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010b4:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <MX_USART2_UART_Init+0x58>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ba:	4805      	ldr	r0, [pc, #20]	@ (80010d0 <MX_USART2_UART_Init+0x58>)
 80010bc:	f002 fba2 	bl	8003804 <HAL_UART_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010c6:	f000 f82b 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200000dc 	.word	0x200000dc
 80010d4:	40004400 	.word	0x40004400

080010d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010de:	4b0f      	ldr	r3, [pc, #60]	@ (800111c <MX_GPIO_Init+0x44>)
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	4a0e      	ldr	r2, [pc, #56]	@ (800111c <MX_GPIO_Init+0x44>)
 80010e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010e8:	6153      	str	r3, [r2, #20]
 80010ea:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <MX_GPIO_Init+0x44>)
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	4b09      	ldr	r3, [pc, #36]	@ (800111c <MX_GPIO_Init+0x44>)
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	4a08      	ldr	r2, [pc, #32]	@ (800111c <MX_GPIO_Init+0x44>)
 80010fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001100:	6153      	str	r3, [r2, #20]
 8001102:	4b06      	ldr	r3, [pc, #24]	@ (800111c <MX_GPIO_Init+0x44>)
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	40021000 	.word	0x40021000

08001120 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001124:	b672      	cpsid	i
}
 8001126:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <Error_Handler+0x8>

0800112c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001132:	4b0f      	ldr	r3, [pc, #60]	@ (8001170 <HAL_MspInit+0x44>)
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	4a0e      	ldr	r2, [pc, #56]	@ (8001170 <HAL_MspInit+0x44>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6193      	str	r3, [r2, #24]
 800113e:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <HAL_MspInit+0x44>)
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800114a:	4b09      	ldr	r3, [pc, #36]	@ (8001170 <HAL_MspInit+0x44>)
 800114c:	69db      	ldr	r3, [r3, #28]
 800114e:	4a08      	ldr	r2, [pc, #32]	@ (8001170 <HAL_MspInit+0x44>)
 8001150:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001154:	61d3      	str	r3, [r2, #28]
 8001156:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <HAL_MspInit+0x44>)
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800115e:	603b      	str	r3, [r7, #0]
 8001160:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	40021000 	.word	0x40021000

08001174 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08a      	sub	sp, #40	@ 0x28
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a17      	ldr	r2, [pc, #92]	@ (80011f0 <HAL_SPI_MspInit+0x7c>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d128      	bne.n	80011e8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001196:	4b17      	ldr	r3, [pc, #92]	@ (80011f4 <HAL_SPI_MspInit+0x80>)
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	4a16      	ldr	r2, [pc, #88]	@ (80011f4 <HAL_SPI_MspInit+0x80>)
 800119c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011a0:	6193      	str	r3, [r2, #24]
 80011a2:	4b14      	ldr	r3, [pc, #80]	@ (80011f4 <HAL_SPI_MspInit+0x80>)
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	4b11      	ldr	r3, [pc, #68]	@ (80011f4 <HAL_SPI_MspInit+0x80>)
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	4a10      	ldr	r2, [pc, #64]	@ (80011f4 <HAL_SPI_MspInit+0x80>)
 80011b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011b8:	6153      	str	r3, [r2, #20]
 80011ba:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <HAL_SPI_MspInit+0x80>)
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011c6:	23e0      	movs	r3, #224	@ 0xe0
 80011c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d2:	2303      	movs	r3, #3
 80011d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011d6:	2305      	movs	r3, #5
 80011d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	4619      	mov	r1, r3
 80011e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011e4:	f000 fa24 	bl	8001630 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80011e8:	bf00      	nop
 80011ea:	3728      	adds	r7, #40	@ 0x28
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40013000 	.word	0x40013000
 80011f4:	40021000 	.word	0x40021000

080011f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a0a      	ldr	r2, [pc, #40]	@ (8001230 <HAL_TIM_Base_MspInit+0x38>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d10b      	bne.n	8001222 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800120a:	4b0a      	ldr	r3, [pc, #40]	@ (8001234 <HAL_TIM_Base_MspInit+0x3c>)
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	4a09      	ldr	r2, [pc, #36]	@ (8001234 <HAL_TIM_Base_MspInit+0x3c>)
 8001210:	f043 0320 	orr.w	r3, r3, #32
 8001214:	61d3      	str	r3, [r2, #28]
 8001216:	4b07      	ldr	r3, [pc, #28]	@ (8001234 <HAL_TIM_Base_MspInit+0x3c>)
 8001218:	69db      	ldr	r3, [r3, #28]
 800121a:	f003 0320 	and.w	r3, r3, #32
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM7_MspInit 1 */

  }

}
 8001222:	bf00      	nop
 8001224:	3714      	adds	r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	40001400 	.word	0x40001400
 8001234:	40021000 	.word	0x40021000

08001238 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	@ 0x28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a18      	ldr	r2, [pc, #96]	@ (80012b8 <HAL_UART_MspInit+0x80>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d129      	bne.n	80012ae <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800125a:	4b18      	ldr	r3, [pc, #96]	@ (80012bc <HAL_UART_MspInit+0x84>)
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	4a17      	ldr	r2, [pc, #92]	@ (80012bc <HAL_UART_MspInit+0x84>)
 8001260:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001264:	61d3      	str	r3, [r2, #28]
 8001266:	4b15      	ldr	r3, [pc, #84]	@ (80012bc <HAL_UART_MspInit+0x84>)
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001272:	4b12      	ldr	r3, [pc, #72]	@ (80012bc <HAL_UART_MspInit+0x84>)
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	4a11      	ldr	r2, [pc, #68]	@ (80012bc <HAL_UART_MspInit+0x84>)
 8001278:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800127c:	6153      	str	r3, [r2, #20]
 800127e:	4b0f      	ldr	r3, [pc, #60]	@ (80012bc <HAL_UART_MspInit+0x84>)
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800128a:	f248 0304 	movw	r3, #32772	@ 0x8004
 800128e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001298:	2303      	movs	r3, #3
 800129a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800129c:	2307      	movs	r3, #7
 800129e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4619      	mov	r1, r3
 80012a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012aa:	f000 f9c1 	bl	8001630 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80012ae:	bf00      	nop
 80012b0:	3728      	adds	r7, #40	@ 0x28
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40004400 	.word	0x40004400
 80012bc:	40021000 	.word	0x40021000

080012c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <NMI_Handler+0x4>

080012c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <HardFault_Handler+0x4>

080012d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <MemManage_Handler+0x4>

080012d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012dc:	bf00      	nop
 80012de:	e7fd      	b.n	80012dc <BusFault_Handler+0x4>

080012e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <UsageFault_Handler+0x4>

080012e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001316:	f000 f885 	bl	8001424 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001324:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <SystemInit+0x20>)
 8001326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800132a:	4a05      	ldr	r2, [pc, #20]	@ (8001340 <SystemInit+0x20>)
 800132c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001330:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001344:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800137c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001348:	f7ff ffea 	bl	8001320 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800134c:	480c      	ldr	r0, [pc, #48]	@ (8001380 <LoopForever+0x6>)
  ldr r1, =_edata
 800134e:	490d      	ldr	r1, [pc, #52]	@ (8001384 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001350:	4a0d      	ldr	r2, [pc, #52]	@ (8001388 <LoopForever+0xe>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001354:	e002      	b.n	800135c <LoopCopyDataInit>

08001356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800135a:	3304      	adds	r3, #4

0800135c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800135c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800135e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001360:	d3f9      	bcc.n	8001356 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001362:	4a0a      	ldr	r2, [pc, #40]	@ (800138c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001364:	4c0a      	ldr	r4, [pc, #40]	@ (8001390 <LoopForever+0x16>)
  movs r3, #0
 8001366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001368:	e001      	b.n	800136e <LoopFillZerobss>

0800136a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800136a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800136c:	3204      	adds	r2, #4

0800136e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800136e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001370:	d3fb      	bcc.n	800136a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001372:	f002 fdef 	bl	8003f54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001376:	f7ff fd87 	bl	8000e88 <main>

0800137a <LoopForever>:

LoopForever:
    b LoopForever
 800137a:	e7fe      	b.n	800137a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800137c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001384:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001388:	08003ff4 	.word	0x08003ff4
  ldr r2, =_sbss
 800138c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001390:	20000168 	.word	0x20000168

08001394 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001394:	e7fe      	b.n	8001394 <ADC1_2_IRQHandler>
	...

08001398 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800139c:	4b08      	ldr	r3, [pc, #32]	@ (80013c0 <HAL_Init+0x28>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a07      	ldr	r2, [pc, #28]	@ (80013c0 <HAL_Init+0x28>)
 80013a2:	f043 0310 	orr.w	r3, r3, #16
 80013a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a8:	2003      	movs	r0, #3
 80013aa:	f000 f90d 	bl	80015c8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ae:	2000      	movs	r0, #0
 80013b0:	f000 f808 	bl	80013c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b4:	f7ff feba 	bl	800112c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40022000 	.word	0x40022000

080013c4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013cc:	4b12      	ldr	r3, [pc, #72]	@ (8001418 <HAL_InitTick+0x54>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b12      	ldr	r3, [pc, #72]	@ (800141c <HAL_InitTick+0x58>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	4619      	mov	r1, r3
 80013d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013da:	fbb3 f3f1 	udiv	r3, r3, r1
 80013de:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 f917 	bl	8001616 <HAL_SYSTICK_Config>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e00e      	b.n	8001410 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b0f      	cmp	r3, #15
 80013f6:	d80a      	bhi.n	800140e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f8:	2200      	movs	r2, #0
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001400:	f000 f8ed 	bl	80015de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001404:	4a06      	ldr	r2, [pc, #24]	@ (8001420 <HAL_InitTick+0x5c>)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800140a:	2300      	movs	r3, #0
 800140c:	e000      	b.n	8001410 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
}
 8001410:	4618      	mov	r0, r3
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000000 	.word	0x20000000
 800141c:	20000008 	.word	0x20000008
 8001420:	20000004 	.word	0x20000004

08001424 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001428:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <HAL_IncTick+0x20>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <HAL_IncTick+0x24>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4413      	add	r3, r2
 8001434:	4a04      	ldr	r2, [pc, #16]	@ (8001448 <HAL_IncTick+0x24>)
 8001436:	6013      	str	r3, [r2, #0]
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	20000008 	.word	0x20000008
 8001448:	20000164 	.word	0x20000164

0800144c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001450:	4b03      	ldr	r3, [pc, #12]	@ (8001460 <HAL_GetTick+0x14>)
 8001452:	681b      	ldr	r3, [r3, #0]
}
 8001454:	4618      	mov	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	20000164 	.word	0x20000164

08001464 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001474:	4b0c      	ldr	r3, [pc, #48]	@ (80014a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001480:	4013      	ands	r3, r2
 8001482:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800148c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001490:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001494:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001496:	4a04      	ldr	r2, [pc, #16]	@ (80014a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	60d3      	str	r3, [r2, #12]
}
 800149c:	bf00      	nop
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b0:	4b04      	ldr	r3, [pc, #16]	@ (80014c4 <__NVIC_GetPriorityGrouping+0x18>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	0a1b      	lsrs	r3, r3, #8
 80014b6:	f003 0307 	and.w	r3, r3, #7
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	6039      	str	r1, [r7, #0]
 80014d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	db0a      	blt.n	80014f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	490c      	ldr	r1, [pc, #48]	@ (8001514 <__NVIC_SetPriority+0x4c>)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	0112      	lsls	r2, r2, #4
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	440b      	add	r3, r1
 80014ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f0:	e00a      	b.n	8001508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4908      	ldr	r1, [pc, #32]	@ (8001518 <__NVIC_SetPriority+0x50>)
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	f003 030f 	and.w	r3, r3, #15
 80014fe:	3b04      	subs	r3, #4
 8001500:	0112      	lsls	r2, r2, #4
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	440b      	add	r3, r1
 8001506:	761a      	strb	r2, [r3, #24]
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	e000e100 	.word	0xe000e100
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800151c:	b480      	push	{r7}
 800151e:	b089      	sub	sp, #36	@ 0x24
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f1c3 0307 	rsb	r3, r3, #7
 8001536:	2b04      	cmp	r3, #4
 8001538:	bf28      	it	cs
 800153a:	2304      	movcs	r3, #4
 800153c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3304      	adds	r3, #4
 8001542:	2b06      	cmp	r3, #6
 8001544:	d902      	bls.n	800154c <NVIC_EncodePriority+0x30>
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3b03      	subs	r3, #3
 800154a:	e000      	b.n	800154e <NVIC_EncodePriority+0x32>
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	f04f 32ff 	mov.w	r2, #4294967295
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43da      	mvns	r2, r3
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	401a      	ands	r2, r3
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001564:	f04f 31ff 	mov.w	r1, #4294967295
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	fa01 f303 	lsl.w	r3, r1, r3
 800156e:	43d9      	mvns	r1, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	4313      	orrs	r3, r2
         );
}
 8001576:	4618      	mov	r0, r3
 8001578:	3724      	adds	r7, #36	@ 0x24
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3b01      	subs	r3, #1
 8001590:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001594:	d301      	bcc.n	800159a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001596:	2301      	movs	r3, #1
 8001598:	e00f      	b.n	80015ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800159a:	4a0a      	ldr	r2, [pc, #40]	@ (80015c4 <SysTick_Config+0x40>)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3b01      	subs	r3, #1
 80015a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015a2:	210f      	movs	r1, #15
 80015a4:	f04f 30ff 	mov.w	r0, #4294967295
 80015a8:	f7ff ff8e 	bl	80014c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015ac:	4b05      	ldr	r3, [pc, #20]	@ (80015c4 <SysTick_Config+0x40>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015b2:	4b04      	ldr	r3, [pc, #16]	@ (80015c4 <SysTick_Config+0x40>)
 80015b4:	2207      	movs	r2, #7
 80015b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	e000e010 	.word	0xe000e010

080015c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff ff47 	bl	8001464 <__NVIC_SetPriorityGrouping>
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b086      	sub	sp, #24
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	4603      	mov	r3, r0
 80015e6:	60b9      	str	r1, [r7, #8]
 80015e8:	607a      	str	r2, [r7, #4]
 80015ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015f0:	f7ff ff5c 	bl	80014ac <__NVIC_GetPriorityGrouping>
 80015f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	68b9      	ldr	r1, [r7, #8]
 80015fa:	6978      	ldr	r0, [r7, #20]
 80015fc:	f7ff ff8e 	bl	800151c <NVIC_EncodePriority>
 8001600:	4602      	mov	r2, r0
 8001602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001606:	4611      	mov	r1, r2
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ff5d 	bl	80014c8 <__NVIC_SetPriority>
}
 800160e:	bf00      	nop
 8001610:	3718      	adds	r7, #24
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff ffb0 	bl	8001584 <SysTick_Config>
 8001624:	4603      	mov	r3, r0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
	...

08001630 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001630:	b480      	push	{r7}
 8001632:	b087      	sub	sp, #28
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800163e:	e14e      	b.n	80018de <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	2101      	movs	r1, #1
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	fa01 f303 	lsl.w	r3, r1, r3
 800164c:	4013      	ands	r3, r2
 800164e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2b00      	cmp	r3, #0
 8001654:	f000 8140 	beq.w	80018d8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 0303 	and.w	r3, r3, #3
 8001660:	2b01      	cmp	r3, #1
 8001662:	d005      	beq.n	8001670 <HAL_GPIO_Init+0x40>
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 0303 	and.w	r3, r3, #3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d130      	bne.n	80016d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	2203      	movs	r2, #3
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4013      	ands	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	68da      	ldr	r2, [r3, #12]
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016a6:	2201      	movs	r2, #1
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4013      	ands	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	091b      	lsrs	r3, r3, #4
 80016bc:	f003 0201 	and.w	r2, r3, #1
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	2b03      	cmp	r3, #3
 80016dc:	d017      	beq.n	800170e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	2203      	movs	r2, #3
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43db      	mvns	r3, r3
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	4013      	ands	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f003 0303 	and.w	r3, r3, #3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d123      	bne.n	8001762 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	08da      	lsrs	r2, r3, #3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3208      	adds	r2, #8
 8001722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001726:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	220f      	movs	r2, #15
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43db      	mvns	r3, r3
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	4013      	ands	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	691a      	ldr	r2, [r3, #16]
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4313      	orrs	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	08da      	lsrs	r2, r3, #3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3208      	adds	r2, #8
 800175c:	6939      	ldr	r1, [r7, #16]
 800175e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	2203      	movs	r2, #3
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4013      	ands	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f003 0203 	and.w	r2, r3, #3
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4313      	orrs	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f000 809a 	beq.w	80018d8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a4:	4b55      	ldr	r3, [pc, #340]	@ (80018fc <HAL_GPIO_Init+0x2cc>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	4a54      	ldr	r2, [pc, #336]	@ (80018fc <HAL_GPIO_Init+0x2cc>)
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	6193      	str	r3, [r2, #24]
 80017b0:	4b52      	ldr	r3, [pc, #328]	@ (80018fc <HAL_GPIO_Init+0x2cc>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017bc:	4a50      	ldr	r2, [pc, #320]	@ (8001900 <HAL_GPIO_Init+0x2d0>)
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	089b      	lsrs	r3, r3, #2
 80017c2:	3302      	adds	r3, #2
 80017c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	220f      	movs	r2, #15
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80017e6:	d013      	beq.n	8001810 <HAL_GPIO_Init+0x1e0>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a46      	ldr	r2, [pc, #280]	@ (8001904 <HAL_GPIO_Init+0x2d4>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d00d      	beq.n	800180c <HAL_GPIO_Init+0x1dc>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a45      	ldr	r2, [pc, #276]	@ (8001908 <HAL_GPIO_Init+0x2d8>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d007      	beq.n	8001808 <HAL_GPIO_Init+0x1d8>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a44      	ldr	r2, [pc, #272]	@ (800190c <HAL_GPIO_Init+0x2dc>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d101      	bne.n	8001804 <HAL_GPIO_Init+0x1d4>
 8001800:	2303      	movs	r3, #3
 8001802:	e006      	b.n	8001812 <HAL_GPIO_Init+0x1e2>
 8001804:	2305      	movs	r3, #5
 8001806:	e004      	b.n	8001812 <HAL_GPIO_Init+0x1e2>
 8001808:	2302      	movs	r3, #2
 800180a:	e002      	b.n	8001812 <HAL_GPIO_Init+0x1e2>
 800180c:	2301      	movs	r3, #1
 800180e:	e000      	b.n	8001812 <HAL_GPIO_Init+0x1e2>
 8001810:	2300      	movs	r3, #0
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	f002 0203 	and.w	r2, r2, #3
 8001818:	0092      	lsls	r2, r2, #2
 800181a:	4093      	lsls	r3, r2
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	4313      	orrs	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001822:	4937      	ldr	r1, [pc, #220]	@ (8001900 <HAL_GPIO_Init+0x2d0>)
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	089b      	lsrs	r3, r3, #2
 8001828:	3302      	adds	r3, #2
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001830:	4b37      	ldr	r3, [pc, #220]	@ (8001910 <HAL_GPIO_Init+0x2e0>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	43db      	mvns	r3, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4013      	ands	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	4313      	orrs	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001854:	4a2e      	ldr	r2, [pc, #184]	@ (8001910 <HAL_GPIO_Init+0x2e0>)
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800185a:	4b2d      	ldr	r3, [pc, #180]	@ (8001910 <HAL_GPIO_Init+0x2e0>)
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	43db      	mvns	r3, r3
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	4013      	ands	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4313      	orrs	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800187e:	4a24      	ldr	r2, [pc, #144]	@ (8001910 <HAL_GPIO_Init+0x2e0>)
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001884:	4b22      	ldr	r3, [pc, #136]	@ (8001910 <HAL_GPIO_Init+0x2e0>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	43db      	mvns	r3, r3
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4013      	ands	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d003      	beq.n	80018a8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018a8:	4a19      	ldr	r2, [pc, #100]	@ (8001910 <HAL_GPIO_Init+0x2e0>)
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018ae:	4b18      	ldr	r3, [pc, #96]	@ (8001910 <HAL_GPIO_Init+0x2e0>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	43db      	mvns	r3, r3
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	4013      	ands	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001910 <HAL_GPIO_Init+0x2e0>)
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	3301      	adds	r3, #1
 80018dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	fa22 f303 	lsr.w	r3, r2, r3
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f47f aea9 	bne.w	8001640 <HAL_GPIO_Init+0x10>
  }
}
 80018ee:	bf00      	nop
 80018f0:	bf00      	nop
 80018f2:	371c      	adds	r7, #28
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	40021000 	.word	0x40021000
 8001900:	40010000 	.word	0x40010000
 8001904:	48000400 	.word	0x48000400
 8001908:	48000800 	.word	0x48000800
 800190c:	48000c00 	.word	0x48000c00
 8001910:	40010400 	.word	0x40010400

08001914 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800191a:	af00      	add	r7, sp, #0
 800191c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001920:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001924:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001926:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800192a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d102      	bne.n	800193a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	f001 b823 	b.w	8002980 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800193a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800193e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b00      	cmp	r3, #0
 800194c:	f000 817d 	beq.w	8001c4a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001950:	4bbc      	ldr	r3, [pc, #752]	@ (8001c44 <HAL_RCC_OscConfig+0x330>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 030c 	and.w	r3, r3, #12
 8001958:	2b04      	cmp	r3, #4
 800195a:	d00c      	beq.n	8001976 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800195c:	4bb9      	ldr	r3, [pc, #740]	@ (8001c44 <HAL_RCC_OscConfig+0x330>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 030c 	and.w	r3, r3, #12
 8001964:	2b08      	cmp	r3, #8
 8001966:	d15c      	bne.n	8001a22 <HAL_RCC_OscConfig+0x10e>
 8001968:	4bb6      	ldr	r3, [pc, #728]	@ (8001c44 <HAL_RCC_OscConfig+0x330>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001974:	d155      	bne.n	8001a22 <HAL_RCC_OscConfig+0x10e>
 8001976:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800197a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001982:	fa93 f3a3 	rbit	r3, r3
 8001986:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800198a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800198e:	fab3 f383 	clz	r3, r3
 8001992:	b2db      	uxtb	r3, r3
 8001994:	095b      	lsrs	r3, r3, #5
 8001996:	b2db      	uxtb	r3, r3
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d102      	bne.n	80019a8 <HAL_RCC_OscConfig+0x94>
 80019a2:	4ba8      	ldr	r3, [pc, #672]	@ (8001c44 <HAL_RCC_OscConfig+0x330>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	e015      	b.n	80019d4 <HAL_RCC_OscConfig+0xc0>
 80019a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019ac:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80019b4:	fa93 f3a3 	rbit	r3, r3
 80019b8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80019bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019c0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80019c4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80019c8:	fa93 f3a3 	rbit	r3, r3
 80019cc:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80019d0:	4b9c      	ldr	r3, [pc, #624]	@ (8001c44 <HAL_RCC_OscConfig+0x330>)
 80019d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80019d8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80019dc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80019e0:	fa92 f2a2 	rbit	r2, r2
 80019e4:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80019e8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80019ec:	fab2 f282 	clz	r2, r2
 80019f0:	b2d2      	uxtb	r2, r2
 80019f2:	f042 0220 	orr.w	r2, r2, #32
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	f002 021f 	and.w	r2, r2, #31
 80019fc:	2101      	movs	r1, #1
 80019fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001a02:	4013      	ands	r3, r2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 811f 	beq.w	8001c48 <HAL_RCC_OscConfig+0x334>
 8001a0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f040 8116 	bne.w	8001c48 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	f000 bfaf 	b.w	8002980 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a32:	d106      	bne.n	8001a42 <HAL_RCC_OscConfig+0x12e>
 8001a34:	4b83      	ldr	r3, [pc, #524]	@ (8001c44 <HAL_RCC_OscConfig+0x330>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a82      	ldr	r2, [pc, #520]	@ (8001c44 <HAL_RCC_OscConfig+0x330>)
 8001a3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a3e:	6013      	str	r3, [r2, #0]
 8001a40:	e036      	b.n	8001ab0 <HAL_RCC_OscConfig+0x19c>
 8001a42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10c      	bne.n	8001a6c <HAL_RCC_OscConfig+0x158>
 8001a52:	4b7c      	ldr	r3, [pc, #496]	@ (8001c44 <HAL_RCC_OscConfig+0x330>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a7b      	ldr	r2, [pc, #492]	@ (8001c44 <HAL_RCC_OscConfig+0x330>)
 8001a58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	4b79      	ldr	r3, [pc, #484]	@ (8001c44 <HAL_RCC_OscConfig+0x330>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a78      	ldr	r2, [pc, #480]	@ (8001c44 <HAL_RCC_OscConfig+0x330>)
 8001a64:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	e021      	b.n	8001ab0 <HAL_RCC_OscConfig+0x19c>
 8001a6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a7c:	d10c      	bne.n	8001a98 <HAL_RCC_OscConfig+0x184>
 8001a7e:	4b71      	ldr	r3, [pc, #452]	@ (8001c44 <HAL_RCC_OscConfig+0x330>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a70      	ldr	r2, [pc, #448]	@ (8001c44 <HAL_RCC_OscConfig+0x330>)
 8001a84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a88:	6013      	str	r3, [r2, #0]
 8001a8a:	4b6e      	ldr	r3, [pc, #440]	@ (8001c44 <HAL_RCC_OscConfig+0x330>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a6d      	ldr	r2, [pc, #436]	@ (8001c44 <HAL_RCC_OscConfig+0x330>)
 8001a90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	e00b      	b.n	8001ab0 <HAL_RCC_OscConfig+0x19c>
 8001a98:	4b6a      	ldr	r3, [pc, #424]	@ (8001c44 <HAL_RCC_OscConfig+0x330>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a69      	ldr	r2, [pc, #420]	@ (8001c44 <HAL_RCC_OscConfig+0x330>)
 8001a9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001aa2:	6013      	str	r3, [r2, #0]
 8001aa4:	4b67      	ldr	r3, [pc, #412]	@ (8001c44 <HAL_RCC_OscConfig+0x330>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a66      	ldr	r2, [pc, #408]	@ (8001c44 <HAL_RCC_OscConfig+0x330>)
 8001aaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aae:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ab0:	4b64      	ldr	r3, [pc, #400]	@ (8001c44 <HAL_RCC_OscConfig+0x330>)
 8001ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab4:	f023 020f 	bic.w	r2, r3, #15
 8001ab8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001abc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	495f      	ldr	r1, [pc, #380]	@ (8001c44 <HAL_RCC_OscConfig+0x330>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ace:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d059      	beq.n	8001b8e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ada:	f7ff fcb7 	bl	800144c <HAL_GetTick>
 8001ade:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae2:	e00a      	b.n	8001afa <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ae4:	f7ff fcb2 	bl	800144c <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b64      	cmp	r3, #100	@ 0x64
 8001af2:	d902      	bls.n	8001afa <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	f000 bf43 	b.w	8002980 <HAL_RCC_OscConfig+0x106c>
 8001afa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001afe:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b02:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001b06:	fa93 f3a3 	rbit	r3, r3
 8001b0a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001b0e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b12:	fab3 f383 	clz	r3, r3
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	095b      	lsrs	r3, r3, #5
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d102      	bne.n	8001b2c <HAL_RCC_OscConfig+0x218>
 8001b26:	4b47      	ldr	r3, [pc, #284]	@ (8001c44 <HAL_RCC_OscConfig+0x330>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	e015      	b.n	8001b58 <HAL_RCC_OscConfig+0x244>
 8001b2c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b30:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b34:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001b38:	fa93 f3a3 	rbit	r3, r3
 8001b3c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001b40:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b44:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001b48:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001b4c:	fa93 f3a3 	rbit	r3, r3
 8001b50:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001b54:	4b3b      	ldr	r3, [pc, #236]	@ (8001c44 <HAL_RCC_OscConfig+0x330>)
 8001b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b58:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b5c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001b60:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001b64:	fa92 f2a2 	rbit	r2, r2
 8001b68:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001b6c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001b70:	fab2 f282 	clz	r2, r2
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	f042 0220 	orr.w	r2, r2, #32
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	f002 021f 	and.w	r2, r2, #31
 8001b80:	2101      	movs	r1, #1
 8001b82:	fa01 f202 	lsl.w	r2, r1, r2
 8001b86:	4013      	ands	r3, r2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0ab      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x1d0>
 8001b8c:	e05d      	b.n	8001c4a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8e:	f7ff fc5d 	bl	800144c <HAL_GetTick>
 8001b92:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b96:	e00a      	b.n	8001bae <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b98:	f7ff fc58 	bl	800144c <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b64      	cmp	r3, #100	@ 0x64
 8001ba6:	d902      	bls.n	8001bae <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	f000 bee9 	b.w	8002980 <HAL_RCC_OscConfig+0x106c>
 8001bae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bb2:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001bba:	fa93 f3a3 	rbit	r3, r3
 8001bbe:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001bc2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bc6:	fab3 f383 	clz	r3, r3
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	095b      	lsrs	r3, r3, #5
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d102      	bne.n	8001be0 <HAL_RCC_OscConfig+0x2cc>
 8001bda:	4b1a      	ldr	r3, [pc, #104]	@ (8001c44 <HAL_RCC_OscConfig+0x330>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	e015      	b.n	8001c0c <HAL_RCC_OscConfig+0x2f8>
 8001be0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001be4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001bec:	fa93 f3a3 	rbit	r3, r3
 8001bf0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001bf4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bf8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001bfc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001c00:	fa93 f3a3 	rbit	r3, r3
 8001c04:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001c08:	4b0e      	ldr	r3, [pc, #56]	@ (8001c44 <HAL_RCC_OscConfig+0x330>)
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c10:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001c14:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001c18:	fa92 f2a2 	rbit	r2, r2
 8001c1c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001c20:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001c24:	fab2 f282 	clz	r2, r2
 8001c28:	b2d2      	uxtb	r2, r2
 8001c2a:	f042 0220 	orr.w	r2, r2, #32
 8001c2e:	b2d2      	uxtb	r2, r2
 8001c30:	f002 021f 	and.w	r2, r2, #31
 8001c34:	2101      	movs	r1, #1
 8001c36:	fa01 f202 	lsl.w	r2, r1, r2
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1ab      	bne.n	8001b98 <HAL_RCC_OscConfig+0x284>
 8001c40:	e003      	b.n	8001c4a <HAL_RCC_OscConfig+0x336>
 8001c42:	bf00      	nop
 8001c44:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 817d 	beq.w	8001f5a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c60:	4ba6      	ldr	r3, [pc, #664]	@ (8001efc <HAL_RCC_OscConfig+0x5e8>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 030c 	and.w	r3, r3, #12
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d00b      	beq.n	8001c84 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c6c:	4ba3      	ldr	r3, [pc, #652]	@ (8001efc <HAL_RCC_OscConfig+0x5e8>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 030c 	and.w	r3, r3, #12
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d172      	bne.n	8001d5e <HAL_RCC_OscConfig+0x44a>
 8001c78:	4ba0      	ldr	r3, [pc, #640]	@ (8001efc <HAL_RCC_OscConfig+0x5e8>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d16c      	bne.n	8001d5e <HAL_RCC_OscConfig+0x44a>
 8001c84:	2302      	movs	r3, #2
 8001c86:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001c8e:	fa93 f3a3 	rbit	r3, r3
 8001c92:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001c96:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c9a:	fab3 f383 	clz	r3, r3
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	095b      	lsrs	r3, r3, #5
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d102      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x3a0>
 8001cae:	4b93      	ldr	r3, [pc, #588]	@ (8001efc <HAL_RCC_OscConfig+0x5e8>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	e013      	b.n	8001cdc <HAL_RCC_OscConfig+0x3c8>
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cba:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001cbe:	fa93 f3a3 	rbit	r3, r3
 8001cc2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001ccc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001cd0:	fa93 f3a3 	rbit	r3, r3
 8001cd4:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001cd8:	4b88      	ldr	r3, [pc, #544]	@ (8001efc <HAL_RCC_OscConfig+0x5e8>)
 8001cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cdc:	2202      	movs	r2, #2
 8001cde:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001ce2:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001ce6:	fa92 f2a2 	rbit	r2, r2
 8001cea:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001cee:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001cf2:	fab2 f282 	clz	r2, r2
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	f042 0220 	orr.w	r2, r2, #32
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	f002 021f 	and.w	r2, r2, #31
 8001d02:	2101      	movs	r1, #1
 8001d04:	fa01 f202 	lsl.w	r2, r1, r2
 8001d08:	4013      	ands	r3, r2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00a      	beq.n	8001d24 <HAL_RCC_OscConfig+0x410>
 8001d0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d002      	beq.n	8001d24 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	f000 be2e 	b.w	8002980 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d24:	4b75      	ldr	r3, [pc, #468]	@ (8001efc <HAL_RCC_OscConfig+0x5e8>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d30:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	21f8      	movs	r1, #248	@ 0xf8
 8001d3a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001d42:	fa91 f1a1 	rbit	r1, r1
 8001d46:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001d4a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001d4e:	fab1 f181 	clz	r1, r1
 8001d52:	b2c9      	uxtb	r1, r1
 8001d54:	408b      	lsls	r3, r1
 8001d56:	4969      	ldr	r1, [pc, #420]	@ (8001efc <HAL_RCC_OscConfig+0x5e8>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d5c:	e0fd      	b.n	8001f5a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 8088 	beq.w	8001e80 <HAL_RCC_OscConfig+0x56c>
 8001d70:	2301      	movs	r3, #1
 8001d72:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d76:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001d7a:	fa93 f3a3 	rbit	r3, r3
 8001d7e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001d82:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d86:	fab3 f383 	clz	r3, r3
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d90:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	461a      	mov	r2, r3
 8001d98:	2301      	movs	r3, #1
 8001d9a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9c:	f7ff fb56 	bl	800144c <HAL_GetTick>
 8001da0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da4:	e00a      	b.n	8001dbc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001da6:	f7ff fb51 	bl	800144c <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d902      	bls.n	8001dbc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	f000 bde2 	b.w	8002980 <HAL_RCC_OscConfig+0x106c>
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001dc6:	fa93 f3a3 	rbit	r3, r3
 8001dca:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001dce:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd2:	fab3 f383 	clz	r3, r3
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	095b      	lsrs	r3, r3, #5
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d102      	bne.n	8001dec <HAL_RCC_OscConfig+0x4d8>
 8001de6:	4b45      	ldr	r3, [pc, #276]	@ (8001efc <HAL_RCC_OscConfig+0x5e8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	e013      	b.n	8001e14 <HAL_RCC_OscConfig+0x500>
 8001dec:	2302      	movs	r3, #2
 8001dee:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001df6:	fa93 f3a3 	rbit	r3, r3
 8001dfa:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001dfe:	2302      	movs	r3, #2
 8001e00:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001e04:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001e08:	fa93 f3a3 	rbit	r3, r3
 8001e0c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001e10:	4b3a      	ldr	r3, [pc, #232]	@ (8001efc <HAL_RCC_OscConfig+0x5e8>)
 8001e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e14:	2202      	movs	r2, #2
 8001e16:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001e1a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001e1e:	fa92 f2a2 	rbit	r2, r2
 8001e22:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001e26:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001e2a:	fab2 f282 	clz	r2, r2
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	f042 0220 	orr.w	r2, r2, #32
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	f002 021f 	and.w	r2, r2, #31
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e40:	4013      	ands	r3, r2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0af      	beq.n	8001da6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e46:	4b2d      	ldr	r3, [pc, #180]	@ (8001efc <HAL_RCC_OscConfig+0x5e8>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e52:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	21f8      	movs	r1, #248	@ 0xf8
 8001e5c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e60:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001e64:	fa91 f1a1 	rbit	r1, r1
 8001e68:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001e6c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001e70:	fab1 f181 	clz	r1, r1
 8001e74:	b2c9      	uxtb	r1, r1
 8001e76:	408b      	lsls	r3, r1
 8001e78:	4920      	ldr	r1, [pc, #128]	@ (8001efc <HAL_RCC_OscConfig+0x5e8>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	600b      	str	r3, [r1, #0]
 8001e7e:	e06c      	b.n	8001f5a <HAL_RCC_OscConfig+0x646>
 8001e80:	2301      	movs	r3, #1
 8001e82:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e86:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001e8a:	fa93 f3a3 	rbit	r3, r3
 8001e8e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001e92:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e96:	fab3 f383 	clz	r3, r3
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ea0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eac:	f7ff face 	bl	800144c <HAL_GetTick>
 8001eb0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eb4:	e00a      	b.n	8001ecc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eb6:	f7ff fac9 	bl	800144c <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d902      	bls.n	8001ecc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	f000 bd5a 	b.w	8002980 <HAL_RCC_OscConfig+0x106c>
 8001ecc:	2302      	movs	r3, #2
 8001ece:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001ed6:	fa93 f3a3 	rbit	r3, r3
 8001eda:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001ede:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ee2:	fab3 f383 	clz	r3, r3
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	095b      	lsrs	r3, r3, #5
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d104      	bne.n	8001f00 <HAL_RCC_OscConfig+0x5ec>
 8001ef6:	4b01      	ldr	r3, [pc, #4]	@ (8001efc <HAL_RCC_OscConfig+0x5e8>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	e015      	b.n	8001f28 <HAL_RCC_OscConfig+0x614>
 8001efc:	40021000 	.word	0x40021000
 8001f00:	2302      	movs	r3, #2
 8001f02:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f06:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001f0a:	fa93 f3a3 	rbit	r3, r3
 8001f0e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001f12:	2302      	movs	r3, #2
 8001f14:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001f18:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001f1c:	fa93 f3a3 	rbit	r3, r3
 8001f20:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001f24:	4bc8      	ldr	r3, [pc, #800]	@ (8002248 <HAL_RCC_OscConfig+0x934>)
 8001f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f28:	2202      	movs	r2, #2
 8001f2a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001f2e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001f32:	fa92 f2a2 	rbit	r2, r2
 8001f36:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001f3a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001f3e:	fab2 f282 	clz	r2, r2
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	f042 0220 	orr.w	r2, r2, #32
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	f002 021f 	and.w	r2, r2, #31
 8001f4e:	2101      	movs	r1, #1
 8001f50:	fa01 f202 	lsl.w	r2, r1, r2
 8001f54:	4013      	ands	r3, r2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1ad      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 8110 	beq.w	8002190 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f74:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d079      	beq.n	8002074 <HAL_RCC_OscConfig+0x760>
 8001f80:	2301      	movs	r3, #1
 8001f82:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f86:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001f8a:	fa93 f3a3 	rbit	r3, r3
 8001f8e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001f92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f96:	fab3 f383 	clz	r3, r3
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4bab      	ldr	r3, [pc, #684]	@ (800224c <HAL_RCC_OscConfig+0x938>)
 8001fa0:	4413      	add	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001faa:	f7ff fa4f 	bl	800144c <HAL_GetTick>
 8001fae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fb2:	e00a      	b.n	8001fca <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fb4:	f7ff fa4a 	bl	800144c <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d902      	bls.n	8001fca <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	f000 bcdb 	b.w	8002980 <HAL_RCC_OscConfig+0x106c>
 8001fca:	2302      	movs	r3, #2
 8001fcc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001fd4:	fa93 f3a3 	rbit	r3, r3
 8001fd8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001fdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fe0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fec:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	fa93 f2a3 	rbit	r2, r3
 8001ff6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ffa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002004:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002008:	2202      	movs	r2, #2
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002010:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	fa93 f2a3 	rbit	r2, r3
 800201a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800201e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002022:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002024:	4b88      	ldr	r3, [pc, #544]	@ (8002248 <HAL_RCC_OscConfig+0x934>)
 8002026:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002028:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800202c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002030:	2102      	movs	r1, #2
 8002032:	6019      	str	r1, [r3, #0]
 8002034:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002038:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	fa93 f1a3 	rbit	r1, r3
 8002042:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002046:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800204a:	6019      	str	r1, [r3, #0]
  return result;
 800204c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002050:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	fab3 f383 	clz	r3, r3
 800205a:	b2db      	uxtb	r3, r3
 800205c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002060:	b2db      	uxtb	r3, r3
 8002062:	f003 031f 	and.w	r3, r3, #31
 8002066:	2101      	movs	r1, #1
 8002068:	fa01 f303 	lsl.w	r3, r1, r3
 800206c:	4013      	ands	r3, r2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0a0      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x6a0>
 8002072:	e08d      	b.n	8002190 <HAL_RCC_OscConfig+0x87c>
 8002074:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002078:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800207c:	2201      	movs	r2, #1
 800207e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002080:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002084:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	fa93 f2a3 	rbit	r2, r3
 800208e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002092:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002096:	601a      	str	r2, [r3, #0]
  return result;
 8002098:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800209c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80020a0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020a2:	fab3 f383 	clz	r3, r3
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	461a      	mov	r2, r3
 80020aa:	4b68      	ldr	r3, [pc, #416]	@ (800224c <HAL_RCC_OscConfig+0x938>)
 80020ac:	4413      	add	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	461a      	mov	r2, r3
 80020b2:	2300      	movs	r3, #0
 80020b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b6:	f7ff f9c9 	bl	800144c <HAL_GetTick>
 80020ba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020be:	e00a      	b.n	80020d6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020c0:	f7ff f9c4 	bl	800144c <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d902      	bls.n	80020d6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	f000 bc55 	b.w	8002980 <HAL_RCC_OscConfig+0x106c>
 80020d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020da:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80020de:	2202      	movs	r2, #2
 80020e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	fa93 f2a3 	rbit	r2, r3
 80020f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020f4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020fe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002102:	2202      	movs	r2, #2
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800210a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	fa93 f2a3 	rbit	r2, r3
 8002114:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002118:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002122:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002126:	2202      	movs	r2, #2
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800212e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	fa93 f2a3 	rbit	r2, r3
 8002138:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800213c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002140:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002142:	4b41      	ldr	r3, [pc, #260]	@ (8002248 <HAL_RCC_OscConfig+0x934>)
 8002144:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002146:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800214a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800214e:	2102      	movs	r1, #2
 8002150:	6019      	str	r1, [r3, #0]
 8002152:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002156:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	fa93 f1a3 	rbit	r1, r3
 8002160:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002164:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002168:	6019      	str	r1, [r3, #0]
  return result;
 800216a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800216e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	fab3 f383 	clz	r3, r3
 8002178:	b2db      	uxtb	r3, r3
 800217a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800217e:	b2db      	uxtb	r3, r3
 8002180:	f003 031f 	and.w	r3, r3, #31
 8002184:	2101      	movs	r1, #1
 8002186:	fa01 f303 	lsl.w	r3, r1, r3
 800218a:	4013      	ands	r3, r2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d197      	bne.n	80020c0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002190:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002194:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 81a1 	beq.w	80024e8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021a6:	2300      	movs	r3, #0
 80021a8:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ac:	4b26      	ldr	r3, [pc, #152]	@ (8002248 <HAL_RCC_OscConfig+0x934>)
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d116      	bne.n	80021e6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021b8:	4b23      	ldr	r3, [pc, #140]	@ (8002248 <HAL_RCC_OscConfig+0x934>)
 80021ba:	69db      	ldr	r3, [r3, #28]
 80021bc:	4a22      	ldr	r2, [pc, #136]	@ (8002248 <HAL_RCC_OscConfig+0x934>)
 80021be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021c2:	61d3      	str	r3, [r2, #28]
 80021c4:	4b20      	ldr	r3, [pc, #128]	@ (8002248 <HAL_RCC_OscConfig+0x934>)
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80021cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021d0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021da:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80021de:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80021e0:	2301      	movs	r3, #1
 80021e2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002250 <HAL_RCC_OscConfig+0x93c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d11a      	bne.n	8002228 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021f2:	4b17      	ldr	r3, [pc, #92]	@ (8002250 <HAL_RCC_OscConfig+0x93c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a16      	ldr	r2, [pc, #88]	@ (8002250 <HAL_RCC_OscConfig+0x93c>)
 80021f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021fc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021fe:	f7ff f925 	bl	800144c <HAL_GetTick>
 8002202:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002206:	e009      	b.n	800221c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002208:	f7ff f920 	bl	800144c <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b64      	cmp	r3, #100	@ 0x64
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e3b1      	b.n	8002980 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221c:	4b0c      	ldr	r3, [pc, #48]	@ (8002250 <HAL_RCC_OscConfig+0x93c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0ef      	beq.n	8002208 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002228:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800222c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d10d      	bne.n	8002254 <HAL_RCC_OscConfig+0x940>
 8002238:	4b03      	ldr	r3, [pc, #12]	@ (8002248 <HAL_RCC_OscConfig+0x934>)
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	4a02      	ldr	r2, [pc, #8]	@ (8002248 <HAL_RCC_OscConfig+0x934>)
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	6213      	str	r3, [r2, #32]
 8002244:	e03c      	b.n	80022c0 <HAL_RCC_OscConfig+0x9ac>
 8002246:	bf00      	nop
 8002248:	40021000 	.word	0x40021000
 800224c:	10908120 	.word	0x10908120
 8002250:	40007000 	.word	0x40007000
 8002254:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002258:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10c      	bne.n	800227e <HAL_RCC_OscConfig+0x96a>
 8002264:	4bc1      	ldr	r3, [pc, #772]	@ (800256c <HAL_RCC_OscConfig+0xc58>)
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	4ac0      	ldr	r2, [pc, #768]	@ (800256c <HAL_RCC_OscConfig+0xc58>)
 800226a:	f023 0301 	bic.w	r3, r3, #1
 800226e:	6213      	str	r3, [r2, #32]
 8002270:	4bbe      	ldr	r3, [pc, #760]	@ (800256c <HAL_RCC_OscConfig+0xc58>)
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	4abd      	ldr	r2, [pc, #756]	@ (800256c <HAL_RCC_OscConfig+0xc58>)
 8002276:	f023 0304 	bic.w	r3, r3, #4
 800227a:	6213      	str	r3, [r2, #32]
 800227c:	e020      	b.n	80022c0 <HAL_RCC_OscConfig+0x9ac>
 800227e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002282:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	2b05      	cmp	r3, #5
 800228c:	d10c      	bne.n	80022a8 <HAL_RCC_OscConfig+0x994>
 800228e:	4bb7      	ldr	r3, [pc, #732]	@ (800256c <HAL_RCC_OscConfig+0xc58>)
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	4ab6      	ldr	r2, [pc, #728]	@ (800256c <HAL_RCC_OscConfig+0xc58>)
 8002294:	f043 0304 	orr.w	r3, r3, #4
 8002298:	6213      	str	r3, [r2, #32]
 800229a:	4bb4      	ldr	r3, [pc, #720]	@ (800256c <HAL_RCC_OscConfig+0xc58>)
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	4ab3      	ldr	r2, [pc, #716]	@ (800256c <HAL_RCC_OscConfig+0xc58>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	6213      	str	r3, [r2, #32]
 80022a6:	e00b      	b.n	80022c0 <HAL_RCC_OscConfig+0x9ac>
 80022a8:	4bb0      	ldr	r3, [pc, #704]	@ (800256c <HAL_RCC_OscConfig+0xc58>)
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	4aaf      	ldr	r2, [pc, #700]	@ (800256c <HAL_RCC_OscConfig+0xc58>)
 80022ae:	f023 0301 	bic.w	r3, r3, #1
 80022b2:	6213      	str	r3, [r2, #32]
 80022b4:	4bad      	ldr	r3, [pc, #692]	@ (800256c <HAL_RCC_OscConfig+0xc58>)
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	4aac      	ldr	r2, [pc, #688]	@ (800256c <HAL_RCC_OscConfig+0xc58>)
 80022ba:	f023 0304 	bic.w	r3, r3, #4
 80022be:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f000 8081 	beq.w	80023d4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d2:	f7ff f8bb 	bl	800144c <HAL_GetTick>
 80022d6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022da:	e00b      	b.n	80022f4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022dc:	f7ff f8b6 	bl	800144c <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e345      	b.n	8002980 <HAL_RCC_OscConfig+0x106c>
 80022f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80022fc:	2202      	movs	r2, #2
 80022fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002300:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002304:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	fa93 f2a3 	rbit	r2, r3
 800230e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002312:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800231c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002320:	2202      	movs	r2, #2
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002328:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	fa93 f2a3 	rbit	r2, r3
 8002332:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002336:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800233a:	601a      	str	r2, [r3, #0]
  return result;
 800233c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002340:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002344:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002346:	fab3 f383 	clz	r3, r3
 800234a:	b2db      	uxtb	r3, r3
 800234c:	095b      	lsrs	r3, r3, #5
 800234e:	b2db      	uxtb	r3, r3
 8002350:	f043 0302 	orr.w	r3, r3, #2
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d102      	bne.n	8002360 <HAL_RCC_OscConfig+0xa4c>
 800235a:	4b84      	ldr	r3, [pc, #528]	@ (800256c <HAL_RCC_OscConfig+0xc58>)
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	e013      	b.n	8002388 <HAL_RCC_OscConfig+0xa74>
 8002360:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002364:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002368:	2202      	movs	r2, #2
 800236a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002370:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	fa93 f2a3 	rbit	r2, r3
 800237a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800237e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	4b79      	ldr	r3, [pc, #484]	@ (800256c <HAL_RCC_OscConfig+0xc58>)
 8002386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002388:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800238c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002390:	2102      	movs	r1, #2
 8002392:	6011      	str	r1, [r2, #0]
 8002394:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002398:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800239c:	6812      	ldr	r2, [r2, #0]
 800239e:	fa92 f1a2 	rbit	r1, r2
 80023a2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023a6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80023aa:	6011      	str	r1, [r2, #0]
  return result;
 80023ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023b0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80023b4:	6812      	ldr	r2, [r2, #0]
 80023b6:	fab2 f282 	clz	r2, r2
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	f002 021f 	and.w	r2, r2, #31
 80023c6:	2101      	movs	r1, #1
 80023c8:	fa01 f202 	lsl.w	r2, r1, r2
 80023cc:	4013      	ands	r3, r2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d084      	beq.n	80022dc <HAL_RCC_OscConfig+0x9c8>
 80023d2:	e07f      	b.n	80024d4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d4:	f7ff f83a 	bl	800144c <HAL_GetTick>
 80023d8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023dc:	e00b      	b.n	80023f6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023de:	f7ff f835 	bl	800144c <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e2c4      	b.n	8002980 <HAL_RCC_OscConfig+0x106c>
 80023f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023fa:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80023fe:	2202      	movs	r2, #2
 8002400:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002402:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002406:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	fa93 f2a3 	rbit	r2, r3
 8002410:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002414:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800241e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002422:	2202      	movs	r2, #2
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800242a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	fa93 f2a3 	rbit	r2, r3
 8002434:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002438:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800243c:	601a      	str	r2, [r3, #0]
  return result;
 800243e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002442:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002446:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002448:	fab3 f383 	clz	r3, r3
 800244c:	b2db      	uxtb	r3, r3
 800244e:	095b      	lsrs	r3, r3, #5
 8002450:	b2db      	uxtb	r3, r3
 8002452:	f043 0302 	orr.w	r3, r3, #2
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d102      	bne.n	8002462 <HAL_RCC_OscConfig+0xb4e>
 800245c:	4b43      	ldr	r3, [pc, #268]	@ (800256c <HAL_RCC_OscConfig+0xc58>)
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	e013      	b.n	800248a <HAL_RCC_OscConfig+0xb76>
 8002462:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002466:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800246a:	2202      	movs	r2, #2
 800246c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002472:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	fa93 f2a3 	rbit	r2, r3
 800247c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002480:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	4b39      	ldr	r3, [pc, #228]	@ (800256c <HAL_RCC_OscConfig+0xc58>)
 8002488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800248e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002492:	2102      	movs	r1, #2
 8002494:	6011      	str	r1, [r2, #0]
 8002496:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800249a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800249e:	6812      	ldr	r2, [r2, #0]
 80024a0:	fa92 f1a2 	rbit	r1, r2
 80024a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024a8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80024ac:	6011      	str	r1, [r2, #0]
  return result;
 80024ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024b2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80024b6:	6812      	ldr	r2, [r2, #0]
 80024b8:	fab2 f282 	clz	r2, r2
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	f002 021f 	and.w	r2, r2, #31
 80024c8:	2101      	movs	r1, #1
 80024ca:	fa01 f202 	lsl.w	r2, r1, r2
 80024ce:	4013      	ands	r3, r2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d184      	bne.n	80023de <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024d4:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d105      	bne.n	80024e8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024dc:	4b23      	ldr	r3, [pc, #140]	@ (800256c <HAL_RCC_OscConfig+0xc58>)
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	4a22      	ldr	r2, [pc, #136]	@ (800256c <HAL_RCC_OscConfig+0xc58>)
 80024e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024e6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	69db      	ldr	r3, [r3, #28]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f000 8242 	beq.w	800297e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024fa:	4b1c      	ldr	r3, [pc, #112]	@ (800256c <HAL_RCC_OscConfig+0xc58>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f003 030c 	and.w	r3, r3, #12
 8002502:	2b08      	cmp	r3, #8
 8002504:	f000 8213 	beq.w	800292e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002508:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800250c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	2b02      	cmp	r3, #2
 8002516:	f040 8162 	bne.w	80027de <HAL_RCC_OscConfig+0xeca>
 800251a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800251e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002522:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002526:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002528:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800252c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	fa93 f2a3 	rbit	r2, r3
 8002536:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800253a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800253e:	601a      	str	r2, [r3, #0]
  return result;
 8002540:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002544:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002548:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800254a:	fab3 f383 	clz	r3, r3
 800254e:	b2db      	uxtb	r3, r3
 8002550:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002554:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	461a      	mov	r2, r3
 800255c:	2300      	movs	r3, #0
 800255e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002560:	f7fe ff74 	bl	800144c <HAL_GetTick>
 8002564:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002568:	e00c      	b.n	8002584 <HAL_RCC_OscConfig+0xc70>
 800256a:	bf00      	nop
 800256c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002570:	f7fe ff6c 	bl	800144c <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e1fd      	b.n	8002980 <HAL_RCC_OscConfig+0x106c>
 8002584:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002588:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800258c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002590:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002592:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002596:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	fa93 f2a3 	rbit	r2, r3
 80025a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025a4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80025a8:	601a      	str	r2, [r3, #0]
  return result;
 80025aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ae:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80025b2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b4:	fab3 f383 	clz	r3, r3
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	095b      	lsrs	r3, r3, #5
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	f043 0301 	orr.w	r3, r3, #1
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d102      	bne.n	80025ce <HAL_RCC_OscConfig+0xcba>
 80025c8:	4bb0      	ldr	r3, [pc, #704]	@ (800288c <HAL_RCC_OscConfig+0xf78>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	e027      	b.n	800261e <HAL_RCC_OscConfig+0xd0a>
 80025ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80025d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	fa93 f2a3 	rbit	r2, r3
 80025ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ee:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80025fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002606:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	fa93 f2a3 	rbit	r2, r3
 8002610:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002614:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	4b9c      	ldr	r3, [pc, #624]	@ (800288c <HAL_RCC_OscConfig+0xf78>)
 800261c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002622:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002626:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800262a:	6011      	str	r1, [r2, #0]
 800262c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002630:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002634:	6812      	ldr	r2, [r2, #0]
 8002636:	fa92 f1a2 	rbit	r1, r2
 800263a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800263e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002642:	6011      	str	r1, [r2, #0]
  return result;
 8002644:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002648:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800264c:	6812      	ldr	r2, [r2, #0]
 800264e:	fab2 f282 	clz	r2, r2
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	f042 0220 	orr.w	r2, r2, #32
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	f002 021f 	and.w	r2, r2, #31
 800265e:	2101      	movs	r1, #1
 8002660:	fa01 f202 	lsl.w	r2, r1, r2
 8002664:	4013      	ands	r3, r2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d182      	bne.n	8002570 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800266a:	4b88      	ldr	r3, [pc, #544]	@ (800288c <HAL_RCC_OscConfig+0xf78>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002672:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002676:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800267e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002682:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	430b      	orrs	r3, r1
 800268c:	497f      	ldr	r1, [pc, #508]	@ (800288c <HAL_RCC_OscConfig+0xf78>)
 800268e:	4313      	orrs	r3, r2
 8002690:	604b      	str	r3, [r1, #4]
 8002692:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002696:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800269a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800269e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	fa93 f2a3 	rbit	r2, r3
 80026ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80026b6:	601a      	str	r2, [r3, #0]
  return result;
 80026b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026bc:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80026c0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026c2:	fab3 f383 	clz	r3, r3
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80026cc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	461a      	mov	r2, r3
 80026d4:	2301      	movs	r3, #1
 80026d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d8:	f7fe feb8 	bl	800144c <HAL_GetTick>
 80026dc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026e0:	e009      	b.n	80026f6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026e2:	f7fe feb3 	bl	800144c <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e144      	b.n	8002980 <HAL_RCC_OscConfig+0x106c>
 80026f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026fa:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80026fe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002702:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002704:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002708:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	fa93 f2a3 	rbit	r2, r3
 8002712:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002716:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800271a:	601a      	str	r2, [r3, #0]
  return result;
 800271c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002720:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002724:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002726:	fab3 f383 	clz	r3, r3
 800272a:	b2db      	uxtb	r3, r3
 800272c:	095b      	lsrs	r3, r3, #5
 800272e:	b2db      	uxtb	r3, r3
 8002730:	f043 0301 	orr.w	r3, r3, #1
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b01      	cmp	r3, #1
 8002738:	d102      	bne.n	8002740 <HAL_RCC_OscConfig+0xe2c>
 800273a:	4b54      	ldr	r3, [pc, #336]	@ (800288c <HAL_RCC_OscConfig+0xf78>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	e027      	b.n	8002790 <HAL_RCC_OscConfig+0xe7c>
 8002740:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002744:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002748:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800274c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002752:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	fa93 f2a3 	rbit	r2, r3
 800275c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002760:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800276a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800276e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002778:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	fa93 f2a3 	rbit	r2, r3
 8002782:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002786:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	4b3f      	ldr	r3, [pc, #252]	@ (800288c <HAL_RCC_OscConfig+0xf78>)
 800278e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002790:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002794:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002798:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800279c:	6011      	str	r1, [r2, #0]
 800279e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027a2:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80027a6:	6812      	ldr	r2, [r2, #0]
 80027a8:	fa92 f1a2 	rbit	r1, r2
 80027ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027b0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80027b4:	6011      	str	r1, [r2, #0]
  return result;
 80027b6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027ba:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80027be:	6812      	ldr	r2, [r2, #0]
 80027c0:	fab2 f282 	clz	r2, r2
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	f042 0220 	orr.w	r2, r2, #32
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	f002 021f 	and.w	r2, r2, #31
 80027d0:	2101      	movs	r1, #1
 80027d2:	fa01 f202 	lsl.w	r2, r1, r2
 80027d6:	4013      	ands	r3, r2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d082      	beq.n	80026e2 <HAL_RCC_OscConfig+0xdce>
 80027dc:	e0cf      	b.n	800297e <HAL_RCC_OscConfig+0x106a>
 80027de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80027e6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80027ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	fa93 f2a3 	rbit	r2, r3
 80027fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027fe:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002802:	601a      	str	r2, [r3, #0]
  return result;
 8002804:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002808:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800280c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800280e:	fab3 f383 	clz	r3, r3
 8002812:	b2db      	uxtb	r3, r3
 8002814:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002818:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	461a      	mov	r2, r3
 8002820:	2300      	movs	r3, #0
 8002822:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002824:	f7fe fe12 	bl	800144c <HAL_GetTick>
 8002828:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800282c:	e009      	b.n	8002842 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800282e:	f7fe fe0d 	bl	800144c <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e09e      	b.n	8002980 <HAL_RCC_OscConfig+0x106c>
 8002842:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002846:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800284a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800284e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002850:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002854:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	fa93 f2a3 	rbit	r2, r3
 800285e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002862:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002866:	601a      	str	r2, [r3, #0]
  return result;
 8002868:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800286c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002870:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002872:	fab3 f383 	clz	r3, r3
 8002876:	b2db      	uxtb	r3, r3
 8002878:	095b      	lsrs	r3, r3, #5
 800287a:	b2db      	uxtb	r3, r3
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b01      	cmp	r3, #1
 8002884:	d104      	bne.n	8002890 <HAL_RCC_OscConfig+0xf7c>
 8002886:	4b01      	ldr	r3, [pc, #4]	@ (800288c <HAL_RCC_OscConfig+0xf78>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	e029      	b.n	80028e0 <HAL_RCC_OscConfig+0xfcc>
 800288c:	40021000 	.word	0x40021000
 8002890:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002894:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002898:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800289c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	fa93 f2a3 	rbit	r2, r3
 80028ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ba:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80028be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	fa93 f2a3 	rbit	r2, r3
 80028d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	4b2b      	ldr	r3, [pc, #172]	@ (800298c <HAL_RCC_OscConfig+0x1078>)
 80028de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028e4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80028e8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80028ec:	6011      	str	r1, [r2, #0]
 80028ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028f2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80028f6:	6812      	ldr	r2, [r2, #0]
 80028f8:	fa92 f1a2 	rbit	r1, r2
 80028fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002900:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002904:	6011      	str	r1, [r2, #0]
  return result;
 8002906:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800290a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800290e:	6812      	ldr	r2, [r2, #0]
 8002910:	fab2 f282 	clz	r2, r2
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	f042 0220 	orr.w	r2, r2, #32
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	f002 021f 	and.w	r2, r2, #31
 8002920:	2101      	movs	r1, #1
 8002922:	fa01 f202 	lsl.w	r2, r1, r2
 8002926:	4013      	ands	r3, r2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d180      	bne.n	800282e <HAL_RCC_OscConfig+0xf1a>
 800292c:	e027      	b.n	800297e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800292e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002932:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d101      	bne.n	8002942 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e01e      	b.n	8002980 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002942:	4b12      	ldr	r3, [pc, #72]	@ (800298c <HAL_RCC_OscConfig+0x1078>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800294a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800294e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002952:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002956:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	429a      	cmp	r2, r3
 8002960:	d10b      	bne.n	800297a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002962:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002966:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800296a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800296e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002976:	429a      	cmp	r2, r3
 8002978:	d001      	beq.n	800297e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e000      	b.n	8002980 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40021000 	.word	0x40021000

08002990 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b09e      	sub	sp, #120	@ 0x78
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800299a:	2300      	movs	r3, #0
 800299c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e162      	b.n	8002c6e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029a8:	4b90      	ldr	r3, [pc, #576]	@ (8002bec <HAL_RCC_ClockConfig+0x25c>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d910      	bls.n	80029d8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b6:	4b8d      	ldr	r3, [pc, #564]	@ (8002bec <HAL_RCC_ClockConfig+0x25c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f023 0207 	bic.w	r2, r3, #7
 80029be:	498b      	ldr	r1, [pc, #556]	@ (8002bec <HAL_RCC_ClockConfig+0x25c>)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c6:	4b89      	ldr	r3, [pc, #548]	@ (8002bec <HAL_RCC_ClockConfig+0x25c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d001      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e14a      	b.n	8002c6e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d008      	beq.n	80029f6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029e4:	4b82      	ldr	r3, [pc, #520]	@ (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	497f      	ldr	r1, [pc, #508]	@ (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 80dc 	beq.w	8002bbc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d13c      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xf6>
 8002a0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a10:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a14:	fa93 f3a3 	rbit	r3, r3
 8002a18:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002a1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1c:	fab3 f383 	clz	r3, r3
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	095b      	lsrs	r3, r3, #5
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	f043 0301 	orr.w	r3, r3, #1
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d102      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xa6>
 8002a30:	4b6f      	ldr	r3, [pc, #444]	@ (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	e00f      	b.n	8002a56 <HAL_RCC_ClockConfig+0xc6>
 8002a36:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a3a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a3e:	fa93 f3a3 	rbit	r3, r3
 8002a42:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a44:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a48:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a4c:	fa93 f3a3 	rbit	r3, r3
 8002a50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a52:	4b67      	ldr	r3, [pc, #412]	@ (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 8002a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a56:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a5a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002a5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002a5e:	fa92 f2a2 	rbit	r2, r2
 8002a62:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002a64:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002a66:	fab2 f282 	clz	r2, r2
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	f042 0220 	orr.w	r2, r2, #32
 8002a70:	b2d2      	uxtb	r2, r2
 8002a72:	f002 021f 	and.w	r2, r2, #31
 8002a76:	2101      	movs	r1, #1
 8002a78:	fa01 f202 	lsl.w	r2, r1, r2
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d17b      	bne.n	8002b7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e0f3      	b.n	8002c6e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d13c      	bne.n	8002b08 <HAL_RCC_ClockConfig+0x178>
 8002a8e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a92:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a96:	fa93 f3a3 	rbit	r3, r3
 8002a9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002a9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a9e:	fab3 f383 	clz	r3, r3
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	095b      	lsrs	r3, r3, #5
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d102      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0x128>
 8002ab2:	4b4f      	ldr	r3, [pc, #316]	@ (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	e00f      	b.n	8002ad8 <HAL_RCC_ClockConfig+0x148>
 8002ab8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002abc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ac0:	fa93 f3a3 	rbit	r3, r3
 8002ac4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ac6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002aca:	643b      	str	r3, [r7, #64]	@ 0x40
 8002acc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ace:	fa93 f3a3 	rbit	r3, r3
 8002ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ad4:	4b46      	ldr	r3, [pc, #280]	@ (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002adc:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002ade:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002ae0:	fa92 f2a2 	rbit	r2, r2
 8002ae4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002ae6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ae8:	fab2 f282 	clz	r2, r2
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	f042 0220 	orr.w	r2, r2, #32
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	f002 021f 	and.w	r2, r2, #31
 8002af8:	2101      	movs	r1, #1
 8002afa:	fa01 f202 	lsl.w	r2, r1, r2
 8002afe:	4013      	ands	r3, r2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d13a      	bne.n	8002b7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e0b2      	b.n	8002c6e <HAL_RCC_ClockConfig+0x2de>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b0e:	fa93 f3a3 	rbit	r3, r3
 8002b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b16:	fab3 f383 	clz	r3, r3
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	095b      	lsrs	r3, r3, #5
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	f043 0301 	orr.w	r3, r3, #1
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d102      	bne.n	8002b30 <HAL_RCC_ClockConfig+0x1a0>
 8002b2a:	4b31      	ldr	r3, [pc, #196]	@ (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	e00d      	b.n	8002b4c <HAL_RCC_ClockConfig+0x1bc>
 8002b30:	2302      	movs	r3, #2
 8002b32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b36:	fa93 f3a3 	rbit	r3, r3
 8002b3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	623b      	str	r3, [r7, #32]
 8002b40:	6a3b      	ldr	r3, [r7, #32]
 8002b42:	fa93 f3a3 	rbit	r3, r3
 8002b46:	61fb      	str	r3, [r7, #28]
 8002b48:	4b29      	ldr	r3, [pc, #164]	@ (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	61ba      	str	r2, [r7, #24]
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	fa92 f2a2 	rbit	r2, r2
 8002b56:	617a      	str	r2, [r7, #20]
  return result;
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	fab2 f282 	clz	r2, r2
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	f042 0220 	orr.w	r2, r2, #32
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	f002 021f 	and.w	r2, r2, #31
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b70:	4013      	ands	r3, r2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e079      	b.n	8002c6e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b7a:	4b1d      	ldr	r3, [pc, #116]	@ (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f023 0203 	bic.w	r2, r3, #3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	491a      	ldr	r1, [pc, #104]	@ (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b8c:	f7fe fc5e 	bl	800144c <HAL_GetTick>
 8002b90:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b92:	e00a      	b.n	8002baa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b94:	f7fe fc5a 	bl	800144c <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e061      	b.n	8002c6e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002baa:	4b11      	ldr	r3, [pc, #68]	@ (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f003 020c 	and.w	r2, r3, #12
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d1eb      	bne.n	8002b94 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002bec <HAL_RCC_ClockConfig+0x25c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0307 	and.w	r3, r3, #7
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d214      	bcs.n	8002bf4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bca:	4b08      	ldr	r3, [pc, #32]	@ (8002bec <HAL_RCC_ClockConfig+0x25c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f023 0207 	bic.w	r2, r3, #7
 8002bd2:	4906      	ldr	r1, [pc, #24]	@ (8002bec <HAL_RCC_ClockConfig+0x25c>)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bda:	4b04      	ldr	r3, [pc, #16]	@ (8002bec <HAL_RCC_ClockConfig+0x25c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d005      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e040      	b.n	8002c6e <HAL_RCC_ClockConfig+0x2de>
 8002bec:	40022000 	.word	0x40022000
 8002bf0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d008      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c00:	4b1d      	ldr	r3, [pc, #116]	@ (8002c78 <HAL_RCC_ClockConfig+0x2e8>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	491a      	ldr	r1, [pc, #104]	@ (8002c78 <HAL_RCC_ClockConfig+0x2e8>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d009      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c1e:	4b16      	ldr	r3, [pc, #88]	@ (8002c78 <HAL_RCC_ClockConfig+0x2e8>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4912      	ldr	r1, [pc, #72]	@ (8002c78 <HAL_RCC_ClockConfig+0x2e8>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c32:	f000 f829 	bl	8002c88 <HAL_RCC_GetSysClockFreq>
 8002c36:	4601      	mov	r1, r0
 8002c38:	4b0f      	ldr	r3, [pc, #60]	@ (8002c78 <HAL_RCC_ClockConfig+0x2e8>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c40:	22f0      	movs	r2, #240	@ 0xf0
 8002c42:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	fa92 f2a2 	rbit	r2, r2
 8002c4a:	60fa      	str	r2, [r7, #12]
  return result;
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	fab2 f282 	clz	r2, r2
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	40d3      	lsrs	r3, r2
 8002c56:	4a09      	ldr	r2, [pc, #36]	@ (8002c7c <HAL_RCC_ClockConfig+0x2ec>)
 8002c58:	5cd3      	ldrb	r3, [r2, r3]
 8002c5a:	fa21 f303 	lsr.w	r3, r1, r3
 8002c5e:	4a08      	ldr	r2, [pc, #32]	@ (8002c80 <HAL_RCC_ClockConfig+0x2f0>)
 8002c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002c62:	4b08      	ldr	r3, [pc, #32]	@ (8002c84 <HAL_RCC_ClockConfig+0x2f4>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fe fbac 	bl	80013c4 <HAL_InitTick>
  
  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3778      	adds	r7, #120	@ 0x78
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	08003fb4 	.word	0x08003fb4
 8002c80:	20000000 	.word	0x20000000
 8002c84:	20000004 	.word	0x20000004

08002c88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b087      	sub	sp, #28
 8002c8c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	2300      	movs	r3, #0
 8002c94:	60bb      	str	r3, [r7, #8]
 8002c96:	2300      	movs	r3, #0
 8002c98:	617b      	str	r3, [r7, #20]
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002ca2:	4b1e      	ldr	r3, [pc, #120]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x94>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f003 030c 	and.w	r3, r3, #12
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d002      	beq.n	8002cb8 <HAL_RCC_GetSysClockFreq+0x30>
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d003      	beq.n	8002cbe <HAL_RCC_GetSysClockFreq+0x36>
 8002cb6:	e026      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cb8:	4b19      	ldr	r3, [pc, #100]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cba:	613b      	str	r3, [r7, #16]
      break;
 8002cbc:	e026      	b.n	8002d0c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	0c9b      	lsrs	r3, r3, #18
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	4a17      	ldr	r2, [pc, #92]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cc8:	5cd3      	ldrb	r3, [r2, r3]
 8002cca:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002ccc:	4b13      	ldr	r3, [pc, #76]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x94>)
 8002cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd0:	f003 030f 	and.w	r3, r3, #15
 8002cd4:	4a14      	ldr	r2, [pc, #80]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cd6:	5cd3      	ldrb	r3, [r2, r3]
 8002cd8:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d008      	beq.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ce4:	4a0e      	ldr	r2, [pc, #56]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	fb02 f303 	mul.w	r3, r2, r3
 8002cf2:	617b      	str	r3, [r7, #20]
 8002cf4:	e004      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a0c      	ldr	r2, [pc, #48]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002cfa:	fb02 f303 	mul.w	r3, r2, r3
 8002cfe:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	613b      	str	r3, [r7, #16]
      break;
 8002d04:	e002      	b.n	8002d0c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d06:	4b06      	ldr	r3, [pc, #24]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d08:	613b      	str	r3, [r7, #16]
      break;
 8002d0a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d0c:	693b      	ldr	r3, [r7, #16]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	371c      	adds	r7, #28
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	007a1200 	.word	0x007a1200
 8002d24:	08003fcc 	.word	0x08003fcc
 8002d28:	08003fdc 	.word	0x08003fdc
 8002d2c:	003d0900 	.word	0x003d0900

08002d30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d34:	4b03      	ldr	r3, [pc, #12]	@ (8002d44 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d36:	681b      	ldr	r3, [r3, #0]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	20000000 	.word	0x20000000

08002d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002d4e:	f7ff ffef 	bl	8002d30 <HAL_RCC_GetHCLKFreq>
 8002d52:	4601      	mov	r1, r0
 8002d54:	4b0b      	ldr	r3, [pc, #44]	@ (8002d84 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d5c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002d60:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	fa92 f2a2 	rbit	r2, r2
 8002d68:	603a      	str	r2, [r7, #0]
  return result;
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	fab2 f282 	clz	r2, r2
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	40d3      	lsrs	r3, r2
 8002d74:	4a04      	ldr	r2, [pc, #16]	@ (8002d88 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002d76:	5cd3      	ldrb	r3, [r2, r3]
 8002d78:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40021000 	.word	0x40021000
 8002d88:	08003fc4 	.word	0x08003fc4

08002d8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002d92:	f7ff ffcd 	bl	8002d30 <HAL_RCC_GetHCLKFreq>
 8002d96:	4601      	mov	r1, r0
 8002d98:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002da0:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002da4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	fa92 f2a2 	rbit	r2, r2
 8002dac:	603a      	str	r2, [r7, #0]
  return result;
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	fab2 f282 	clz	r2, r2
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	40d3      	lsrs	r3, r2
 8002db8:	4a04      	ldr	r2, [pc, #16]	@ (8002dcc <HAL_RCC_GetPCLK2Freq+0x40>)
 8002dba:	5cd3      	ldrb	r3, [r2, r3]
 8002dbc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	08003fc4 	.word	0x08003fc4

08002dd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e095      	b.n	8002f0e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d108      	bne.n	8002dfc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002df2:	d009      	beq.n	8002e08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	61da      	str	r2, [r3, #28]
 8002dfa:	e005      	b.n	8002e08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d106      	bne.n	8002e28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7fe f9a6 	bl	8001174 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e3e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e48:	d902      	bls.n	8002e50 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	e002      	b.n	8002e56 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002e50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e54:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002e5e:	d007      	beq.n	8002e70 <HAL_SPI_Init+0xa0>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e68:	d002      	beq.n	8002e70 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002e80:	431a      	orrs	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	431a      	orrs	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ea8:	431a      	orrs	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eb2:	ea42 0103 	orr.w	r1, r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eba:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	0c1b      	lsrs	r3, r3, #16
 8002ecc:	f003 0204 	and.w	r2, r3, #4
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed4:	f003 0310 	and.w	r3, r3, #16
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002eec:	ea42 0103 	orr.w	r1, r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b088      	sub	sp, #32
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	60f8      	str	r0, [r7, #12]
 8002f1e:	60b9      	str	r1, [r7, #8]
 8002f20:	603b      	str	r3, [r7, #0]
 8002f22:	4613      	mov	r3, r2
 8002f24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f26:	2300      	movs	r3, #0
 8002f28:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d101      	bne.n	8002f38 <HAL_SPI_Transmit+0x22>
 8002f34:	2302      	movs	r3, #2
 8002f36:	e15f      	b.n	80031f8 <HAL_SPI_Transmit+0x2e2>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f40:	f7fe fa84 	bl	800144c <HAL_GetTick>
 8002f44:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002f46:	88fb      	ldrh	r3, [r7, #6]
 8002f48:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d002      	beq.n	8002f5c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002f56:	2302      	movs	r3, #2
 8002f58:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f5a:	e148      	b.n	80031ee <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d002      	beq.n	8002f68 <HAL_SPI_Transmit+0x52>
 8002f62:	88fb      	ldrh	r3, [r7, #6]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d102      	bne.n	8002f6e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f6c:	e13f      	b.n	80031ee <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2203      	movs	r2, #3
 8002f72:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	68ba      	ldr	r2, [r7, #8]
 8002f80:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	88fa      	ldrh	r2, [r7, #6]
 8002f86:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	88fa      	ldrh	r2, [r7, #6]
 8002f8c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fb8:	d10f      	bne.n	8002fda <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fc8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002fd8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fe4:	2b40      	cmp	r3, #64	@ 0x40
 8002fe6:	d007      	beq.n	8002ff8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ff6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003000:	d94f      	bls.n	80030a2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d002      	beq.n	8003010 <HAL_SPI_Transmit+0xfa>
 800300a:	8afb      	ldrh	r3, [r7, #22]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d142      	bne.n	8003096 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003014:	881a      	ldrh	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003020:	1c9a      	adds	r2, r3, #2
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800302a:	b29b      	uxth	r3, r3
 800302c:	3b01      	subs	r3, #1
 800302e:	b29a      	uxth	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003034:	e02f      	b.n	8003096 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b02      	cmp	r3, #2
 8003042:	d112      	bne.n	800306a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003048:	881a      	ldrh	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003054:	1c9a      	adds	r2, r3, #2
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800305e:	b29b      	uxth	r3, r3
 8003060:	3b01      	subs	r3, #1
 8003062:	b29a      	uxth	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003068:	e015      	b.n	8003096 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800306a:	f7fe f9ef 	bl	800144c <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	429a      	cmp	r2, r3
 8003078:	d803      	bhi.n	8003082 <HAL_SPI_Transmit+0x16c>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003080:	d102      	bne.n	8003088 <HAL_SPI_Transmit+0x172>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d106      	bne.n	8003096 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003094:	e0ab      	b.n	80031ee <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800309a:	b29b      	uxth	r3, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1ca      	bne.n	8003036 <HAL_SPI_Transmit+0x120>
 80030a0:	e080      	b.n	80031a4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d002      	beq.n	80030b0 <HAL_SPI_Transmit+0x19a>
 80030aa:	8afb      	ldrh	r3, [r7, #22]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d174      	bne.n	800319a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d912      	bls.n	80030e0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030be:	881a      	ldrh	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ca:	1c9a      	adds	r2, r3, #2
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	3b02      	subs	r3, #2
 80030d8:	b29a      	uxth	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80030de:	e05c      	b.n	800319a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	330c      	adds	r3, #12
 80030ea:	7812      	ldrb	r2, [r2, #0]
 80030ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f2:	1c5a      	adds	r2, r3, #1
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	3b01      	subs	r3, #1
 8003100:	b29a      	uxth	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003106:	e048      	b.n	800319a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b02      	cmp	r3, #2
 8003114:	d12b      	bne.n	800316e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800311a:	b29b      	uxth	r3, r3
 800311c:	2b01      	cmp	r3, #1
 800311e:	d912      	bls.n	8003146 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003124:	881a      	ldrh	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003130:	1c9a      	adds	r2, r3, #2
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800313a:	b29b      	uxth	r3, r3
 800313c:	3b02      	subs	r3, #2
 800313e:	b29a      	uxth	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003144:	e029      	b.n	800319a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	330c      	adds	r3, #12
 8003150:	7812      	ldrb	r2, [r2, #0]
 8003152:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003158:	1c5a      	adds	r2, r3, #1
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003162:	b29b      	uxth	r3, r3
 8003164:	3b01      	subs	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800316c:	e015      	b.n	800319a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800316e:	f7fe f96d 	bl	800144c <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	429a      	cmp	r2, r3
 800317c:	d803      	bhi.n	8003186 <HAL_SPI_Transmit+0x270>
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003184:	d102      	bne.n	800318c <HAL_SPI_Transmit+0x276>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d106      	bne.n	800319a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003198:	e029      	b.n	80031ee <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800319e:	b29b      	uxth	r3, r3
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1b1      	bne.n	8003108 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	6839      	ldr	r1, [r7, #0]
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f000 f947 	bl	800343c <SPI_EndRxTxTransaction>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d002      	beq.n	80031ba <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2220      	movs	r2, #32
 80031b8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10a      	bne.n	80031d8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031c2:	2300      	movs	r3, #0
 80031c4:	613b      	str	r3, [r7, #16]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	613b      	str	r3, [r7, #16]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d002      	beq.n	80031e6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	77fb      	strb	r3, [r7, #31]
 80031e4:	e003      	b.n	80031ee <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80031f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3720      	adds	r7, #32
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b088      	sub	sp, #32
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	603b      	str	r3, [r7, #0]
 800320c:	4613      	mov	r3, r2
 800320e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003210:	f7fe f91c 	bl	800144c <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003218:	1a9b      	subs	r3, r3, r2
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	4413      	add	r3, r2
 800321e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003220:	f7fe f914 	bl	800144c <HAL_GetTick>
 8003224:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003226:	4b39      	ldr	r3, [pc, #228]	@ (800330c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	015b      	lsls	r3, r3, #5
 800322c:	0d1b      	lsrs	r3, r3, #20
 800322e:	69fa      	ldr	r2, [r7, #28]
 8003230:	fb02 f303 	mul.w	r3, r2, r3
 8003234:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003236:	e054      	b.n	80032e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323e:	d050      	beq.n	80032e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003240:	f7fe f904 	bl	800144c <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	69fa      	ldr	r2, [r7, #28]
 800324c:	429a      	cmp	r2, r3
 800324e:	d902      	bls.n	8003256 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d13d      	bne.n	80032d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003264:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800326e:	d111      	bne.n	8003294 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003278:	d004      	beq.n	8003284 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003282:	d107      	bne.n	8003294 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003292:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003298:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800329c:	d10f      	bne.n	80032be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80032bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e017      	b.n	8003302 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80032d8:	2300      	movs	r3, #0
 80032da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	3b01      	subs	r3, #1
 80032e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	4013      	ands	r3, r2
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	bf0c      	ite	eq
 80032f2:	2301      	moveq	r3, #1
 80032f4:	2300      	movne	r3, #0
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	461a      	mov	r2, r3
 80032fa:	79fb      	ldrb	r3, [r7, #7]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d19b      	bne.n	8003238 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3720      	adds	r7, #32
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	20000000 	.word	0x20000000

08003310 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b08a      	sub	sp, #40	@ 0x28
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
 800331c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800331e:	2300      	movs	r3, #0
 8003320:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003322:	f7fe f893 	bl	800144c <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800332a:	1a9b      	subs	r3, r3, r2
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	4413      	add	r3, r2
 8003330:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003332:	f7fe f88b 	bl	800144c <HAL_GetTick>
 8003336:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	330c      	adds	r3, #12
 800333e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003340:	4b3d      	ldr	r3, [pc, #244]	@ (8003438 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	4613      	mov	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	00da      	lsls	r2, r3, #3
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	0d1b      	lsrs	r3, r3, #20
 8003350:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003352:	fb02 f303 	mul.w	r3, r2, r3
 8003356:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003358:	e060      	b.n	800341c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003360:	d107      	bne.n	8003372 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d104      	bne.n	8003372 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	b2db      	uxtb	r3, r3
 800336e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003370:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003378:	d050      	beq.n	800341c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800337a:	f7fe f867 	bl	800144c <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003386:	429a      	cmp	r2, r3
 8003388:	d902      	bls.n	8003390 <SPI_WaitFifoStateUntilTimeout+0x80>
 800338a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338c:	2b00      	cmp	r3, #0
 800338e:	d13d      	bne.n	800340c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800339e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033a8:	d111      	bne.n	80033ce <SPI_WaitFifoStateUntilTimeout+0xbe>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033b2:	d004      	beq.n	80033be <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033bc:	d107      	bne.n	80033ce <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033d6:	d10f      	bne.n	80033f8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033f6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e010      	b.n	800342e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003412:	2300      	movs	r3, #0
 8003414:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	3b01      	subs	r3, #1
 800341a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	4013      	ands	r3, r2
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	429a      	cmp	r2, r3
 800342a:	d196      	bne.n	800335a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3728      	adds	r7, #40	@ 0x28
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	20000000 	.word	0x20000000

0800343c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af02      	add	r7, sp, #8
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	2200      	movs	r2, #0
 8003450:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f7ff ff5b 	bl	8003310 <SPI_WaitFifoStateUntilTimeout>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d007      	beq.n	8003470 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003464:	f043 0220 	orr.w	r2, r3, #32
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e027      	b.n	80034c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	2200      	movs	r2, #0
 8003478:	2180      	movs	r1, #128	@ 0x80
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f7ff fec0 	bl	8003200 <SPI_WaitFlagStateUntilTimeout>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d007      	beq.n	8003496 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800348a:	f043 0220 	orr.w	r2, r3, #32
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e014      	b.n	80034c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	2200      	movs	r2, #0
 800349e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f7ff ff34 	bl	8003310 <SPI_WaitFifoStateUntilTimeout>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d007      	beq.n	80034be <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034b2:	f043 0220 	orr.w	r2, r3, #32
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e000      	b.n	80034c0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e049      	b.n	800356e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d106      	bne.n	80034f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7fd fe82 	bl	80011f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2202      	movs	r2, #2
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3304      	adds	r3, #4
 8003504:	4619      	mov	r1, r3
 8003506:	4610      	mov	r0, r2
 8003508:	f000 f88a 	bl	8003620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
	...

08003578 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b01      	cmp	r3, #1
 800358a:	d001      	beq.n	8003590 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e038      	b.n	8003602 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2202      	movs	r2, #2
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a1c      	ldr	r2, [pc, #112]	@ (8003610 <HAL_TIM_Base_Start+0x98>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d00e      	beq.n	80035c0 <HAL_TIM_Base_Start+0x48>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035aa:	d009      	beq.n	80035c0 <HAL_TIM_Base_Start+0x48>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a18      	ldr	r2, [pc, #96]	@ (8003614 <HAL_TIM_Base_Start+0x9c>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d004      	beq.n	80035c0 <HAL_TIM_Base_Start+0x48>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a17      	ldr	r2, [pc, #92]	@ (8003618 <HAL_TIM_Base_Start+0xa0>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d115      	bne.n	80035ec <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	4b15      	ldr	r3, [pc, #84]	@ (800361c <HAL_TIM_Base_Start+0xa4>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2b06      	cmp	r3, #6
 80035d0:	d015      	beq.n	80035fe <HAL_TIM_Base_Start+0x86>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035d8:	d011      	beq.n	80035fe <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f042 0201 	orr.w	r2, r2, #1
 80035e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ea:	e008      	b.n	80035fe <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0201 	orr.w	r2, r2, #1
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	e000      	b.n	8003600 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	40012c00 	.word	0x40012c00
 8003614:	40000400 	.word	0x40000400
 8003618:	40014000 	.word	0x40014000
 800361c:	00010007 	.word	0x00010007

08003620 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a38      	ldr	r2, [pc, #224]	@ (8003714 <TIM_Base_SetConfig+0xf4>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d007      	beq.n	8003648 <TIM_Base_SetConfig+0x28>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800363e:	d003      	beq.n	8003648 <TIM_Base_SetConfig+0x28>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a35      	ldr	r2, [pc, #212]	@ (8003718 <TIM_Base_SetConfig+0xf8>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d108      	bne.n	800365a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800364e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	4313      	orrs	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a2d      	ldr	r2, [pc, #180]	@ (8003714 <TIM_Base_SetConfig+0xf4>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d013      	beq.n	800368a <TIM_Base_SetConfig+0x6a>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003668:	d00f      	beq.n	800368a <TIM_Base_SetConfig+0x6a>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a2a      	ldr	r2, [pc, #168]	@ (8003718 <TIM_Base_SetConfig+0xf8>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d00b      	beq.n	800368a <TIM_Base_SetConfig+0x6a>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a29      	ldr	r2, [pc, #164]	@ (800371c <TIM_Base_SetConfig+0xfc>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d007      	beq.n	800368a <TIM_Base_SetConfig+0x6a>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a28      	ldr	r2, [pc, #160]	@ (8003720 <TIM_Base_SetConfig+0x100>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d003      	beq.n	800368a <TIM_Base_SetConfig+0x6a>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a27      	ldr	r2, [pc, #156]	@ (8003724 <TIM_Base_SetConfig+0x104>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d108      	bne.n	800369c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003690:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	4313      	orrs	r3, r2
 800369a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a14      	ldr	r2, [pc, #80]	@ (8003714 <TIM_Base_SetConfig+0xf4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d00b      	beq.n	80036e0 <TIM_Base_SetConfig+0xc0>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a14      	ldr	r2, [pc, #80]	@ (800371c <TIM_Base_SetConfig+0xfc>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d007      	beq.n	80036e0 <TIM_Base_SetConfig+0xc0>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a13      	ldr	r2, [pc, #76]	@ (8003720 <TIM_Base_SetConfig+0x100>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d003      	beq.n	80036e0 <TIM_Base_SetConfig+0xc0>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a12      	ldr	r2, [pc, #72]	@ (8003724 <TIM_Base_SetConfig+0x104>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d103      	bne.n	80036e8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	691a      	ldr	r2, [r3, #16]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d105      	bne.n	8003706 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	f023 0201 	bic.w	r2, r3, #1
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	611a      	str	r2, [r3, #16]
  }
}
 8003706:	bf00      	nop
 8003708:	3714      	adds	r7, #20
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	40012c00 	.word	0x40012c00
 8003718:	40000400 	.word	0x40000400
 800371c:	40014000 	.word	0x40014000
 8003720:	40014400 	.word	0x40014400
 8003724:	40014800 	.word	0x40014800

08003728 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003738:	2b01      	cmp	r3, #1
 800373a:	d101      	bne.n	8003740 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800373c:	2302      	movs	r3, #2
 800373e:	e054      	b.n	80037ea <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2202      	movs	r2, #2
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a24      	ldr	r2, [pc, #144]	@ (80037f8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d108      	bne.n	800377c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003770:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	4313      	orrs	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003782:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	4313      	orrs	r3, r2
 800378c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a17      	ldr	r2, [pc, #92]	@ (80037f8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d00e      	beq.n	80037be <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037a8:	d009      	beq.n	80037be <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a13      	ldr	r2, [pc, #76]	@ (80037fc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d004      	beq.n	80037be <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a11      	ldr	r2, [pc, #68]	@ (8003800 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d10c      	bne.n	80037d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3714      	adds	r7, #20
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	40012c00 	.word	0x40012c00
 80037fc:	40000400 	.word	0x40000400
 8003800:	40014000 	.word	0x40014000

08003804 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e040      	b.n	8003898 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800381a:	2b00      	cmp	r3, #0
 800381c:	d106      	bne.n	800382c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7fd fd06 	bl	8001238 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2224      	movs	r2, #36	@ 0x24
 8003830:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0201 	bic.w	r2, r2, #1
 8003840:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003846:	2b00      	cmp	r3, #0
 8003848:	d002      	beq.n	8003850 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f95e 	bl	8003b0c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f825 	bl	80038a0 <UART_SetConfig>
 8003856:	4603      	mov	r3, r0
 8003858:	2b01      	cmp	r3, #1
 800385a:	d101      	bne.n	8003860 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e01b      	b.n	8003898 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800386e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689a      	ldr	r2, [r3, #8]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800387e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0201 	orr.w	r2, r2, #1
 800388e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 f9dd 	bl	8003c50 <UART_CheckIdleState>
 8003896:	4603      	mov	r3, r0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3708      	adds	r7, #8
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b088      	sub	sp, #32
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038a8:	2300      	movs	r3, #0
 80038aa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	431a      	orrs	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	4b8a      	ldr	r3, [pc, #552]	@ (8003af4 <UART_SetConfig+0x254>)
 80038cc:	4013      	ands	r3, r2
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6812      	ldr	r2, [r2, #0]
 80038d2:	6979      	ldr	r1, [r7, #20]
 80038d4:	430b      	orrs	r3, r1
 80038d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68da      	ldr	r2, [r3, #12]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	430a      	orrs	r2, r1
 8003910:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a78      	ldr	r2, [pc, #480]	@ (8003af8 <UART_SetConfig+0x258>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d120      	bne.n	800395e <UART_SetConfig+0xbe>
 800391c:	4b77      	ldr	r3, [pc, #476]	@ (8003afc <UART_SetConfig+0x25c>)
 800391e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003920:	f003 0303 	and.w	r3, r3, #3
 8003924:	2b03      	cmp	r3, #3
 8003926:	d817      	bhi.n	8003958 <UART_SetConfig+0xb8>
 8003928:	a201      	add	r2, pc, #4	@ (adr r2, 8003930 <UART_SetConfig+0x90>)
 800392a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392e:	bf00      	nop
 8003930:	08003941 	.word	0x08003941
 8003934:	0800394d 	.word	0x0800394d
 8003938:	08003953 	.word	0x08003953
 800393c:	08003947 	.word	0x08003947
 8003940:	2300      	movs	r3, #0
 8003942:	77fb      	strb	r3, [r7, #31]
 8003944:	e01d      	b.n	8003982 <UART_SetConfig+0xe2>
 8003946:	2302      	movs	r3, #2
 8003948:	77fb      	strb	r3, [r7, #31]
 800394a:	e01a      	b.n	8003982 <UART_SetConfig+0xe2>
 800394c:	2304      	movs	r3, #4
 800394e:	77fb      	strb	r3, [r7, #31]
 8003950:	e017      	b.n	8003982 <UART_SetConfig+0xe2>
 8003952:	2308      	movs	r3, #8
 8003954:	77fb      	strb	r3, [r7, #31]
 8003956:	e014      	b.n	8003982 <UART_SetConfig+0xe2>
 8003958:	2310      	movs	r3, #16
 800395a:	77fb      	strb	r3, [r7, #31]
 800395c:	e011      	b.n	8003982 <UART_SetConfig+0xe2>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a67      	ldr	r2, [pc, #412]	@ (8003b00 <UART_SetConfig+0x260>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d102      	bne.n	800396e <UART_SetConfig+0xce>
 8003968:	2300      	movs	r3, #0
 800396a:	77fb      	strb	r3, [r7, #31]
 800396c:	e009      	b.n	8003982 <UART_SetConfig+0xe2>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a64      	ldr	r2, [pc, #400]	@ (8003b04 <UART_SetConfig+0x264>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d102      	bne.n	800397e <UART_SetConfig+0xde>
 8003978:	2300      	movs	r3, #0
 800397a:	77fb      	strb	r3, [r7, #31]
 800397c:	e001      	b.n	8003982 <UART_SetConfig+0xe2>
 800397e:	2310      	movs	r3, #16
 8003980:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800398a:	d15a      	bne.n	8003a42 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800398c:	7ffb      	ldrb	r3, [r7, #31]
 800398e:	2b08      	cmp	r3, #8
 8003990:	d827      	bhi.n	80039e2 <UART_SetConfig+0x142>
 8003992:	a201      	add	r2, pc, #4	@ (adr r2, 8003998 <UART_SetConfig+0xf8>)
 8003994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003998:	080039bd 	.word	0x080039bd
 800399c:	080039c5 	.word	0x080039c5
 80039a0:	080039cd 	.word	0x080039cd
 80039a4:	080039e3 	.word	0x080039e3
 80039a8:	080039d3 	.word	0x080039d3
 80039ac:	080039e3 	.word	0x080039e3
 80039b0:	080039e3 	.word	0x080039e3
 80039b4:	080039e3 	.word	0x080039e3
 80039b8:	080039db 	.word	0x080039db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039bc:	f7ff f9c4 	bl	8002d48 <HAL_RCC_GetPCLK1Freq>
 80039c0:	61b8      	str	r0, [r7, #24]
        break;
 80039c2:	e013      	b.n	80039ec <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039c4:	f7ff f9e2 	bl	8002d8c <HAL_RCC_GetPCLK2Freq>
 80039c8:	61b8      	str	r0, [r7, #24]
        break;
 80039ca:	e00f      	b.n	80039ec <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039cc:	4b4e      	ldr	r3, [pc, #312]	@ (8003b08 <UART_SetConfig+0x268>)
 80039ce:	61bb      	str	r3, [r7, #24]
        break;
 80039d0:	e00c      	b.n	80039ec <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039d2:	f7ff f959 	bl	8002c88 <HAL_RCC_GetSysClockFreq>
 80039d6:	61b8      	str	r0, [r7, #24]
        break;
 80039d8:	e008      	b.n	80039ec <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039de:	61bb      	str	r3, [r7, #24]
        break;
 80039e0:	e004      	b.n	80039ec <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	77bb      	strb	r3, [r7, #30]
        break;
 80039ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d074      	beq.n	8003adc <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	005a      	lsls	r2, r3, #1
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	085b      	lsrs	r3, r3, #1
 80039fc:	441a      	add	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a06:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	2b0f      	cmp	r3, #15
 8003a0c:	d916      	bls.n	8003a3c <UART_SetConfig+0x19c>
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a14:	d212      	bcs.n	8003a3c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	f023 030f 	bic.w	r3, r3, #15
 8003a1e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	085b      	lsrs	r3, r3, #1
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	89fb      	ldrh	r3, [r7, #14]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	89fa      	ldrh	r2, [r7, #14]
 8003a38:	60da      	str	r2, [r3, #12]
 8003a3a:	e04f      	b.n	8003adc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	77bb      	strb	r3, [r7, #30]
 8003a40:	e04c      	b.n	8003adc <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a42:	7ffb      	ldrb	r3, [r7, #31]
 8003a44:	2b08      	cmp	r3, #8
 8003a46:	d828      	bhi.n	8003a9a <UART_SetConfig+0x1fa>
 8003a48:	a201      	add	r2, pc, #4	@ (adr r2, 8003a50 <UART_SetConfig+0x1b0>)
 8003a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4e:	bf00      	nop
 8003a50:	08003a75 	.word	0x08003a75
 8003a54:	08003a7d 	.word	0x08003a7d
 8003a58:	08003a85 	.word	0x08003a85
 8003a5c:	08003a9b 	.word	0x08003a9b
 8003a60:	08003a8b 	.word	0x08003a8b
 8003a64:	08003a9b 	.word	0x08003a9b
 8003a68:	08003a9b 	.word	0x08003a9b
 8003a6c:	08003a9b 	.word	0x08003a9b
 8003a70:	08003a93 	.word	0x08003a93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a74:	f7ff f968 	bl	8002d48 <HAL_RCC_GetPCLK1Freq>
 8003a78:	61b8      	str	r0, [r7, #24]
        break;
 8003a7a:	e013      	b.n	8003aa4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a7c:	f7ff f986 	bl	8002d8c <HAL_RCC_GetPCLK2Freq>
 8003a80:	61b8      	str	r0, [r7, #24]
        break;
 8003a82:	e00f      	b.n	8003aa4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a84:	4b20      	ldr	r3, [pc, #128]	@ (8003b08 <UART_SetConfig+0x268>)
 8003a86:	61bb      	str	r3, [r7, #24]
        break;
 8003a88:	e00c      	b.n	8003aa4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a8a:	f7ff f8fd 	bl	8002c88 <HAL_RCC_GetSysClockFreq>
 8003a8e:	61b8      	str	r0, [r7, #24]
        break;
 8003a90:	e008      	b.n	8003aa4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a96:	61bb      	str	r3, [r7, #24]
        break;
 8003a98:	e004      	b.n	8003aa4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	77bb      	strb	r3, [r7, #30]
        break;
 8003aa2:	bf00      	nop
    }

    if (pclk != 0U)
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d018      	beq.n	8003adc <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	085a      	lsrs	r2, r3, #1
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	441a      	add	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003abc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	2b0f      	cmp	r3, #15
 8003ac2:	d909      	bls.n	8003ad8 <UART_SetConfig+0x238>
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aca:	d205      	bcs.n	8003ad8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	60da      	str	r2, [r3, #12]
 8003ad6:	e001      	b.n	8003adc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003ae8:	7fbb      	ldrb	r3, [r7, #30]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3720      	adds	r7, #32
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	efff69f3 	.word	0xefff69f3
 8003af8:	40013800 	.word	0x40013800
 8003afc:	40021000 	.word	0x40021000
 8003b00:	40004400 	.word	0x40004400
 8003b04:	40004800 	.word	0x40004800
 8003b08:	007a1200 	.word	0x007a1200

08003b0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b18:	f003 0308 	and.w	r3, r3, #8
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00a      	beq.n	8003b36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00a      	beq.n	8003b58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00a      	beq.n	8003b7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7e:	f003 0304 	and.w	r3, r3, #4
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00a      	beq.n	8003b9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba0:	f003 0310 	and.w	r3, r3, #16
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00a      	beq.n	8003bbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc2:	f003 0320 	and.w	r3, r3, #32
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00a      	beq.n	8003be0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d01a      	beq.n	8003c22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c0a:	d10a      	bne.n	8003c22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00a      	beq.n	8003c44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	605a      	str	r2, [r3, #4]
  }
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b098      	sub	sp, #96	@ 0x60
 8003c54:	af02      	add	r7, sp, #8
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c60:	f7fd fbf4 	bl	800144c <HAL_GetTick>
 8003c64:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0308 	and.w	r3, r3, #8
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	d12e      	bne.n	8003cd2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c74:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f88c 	bl	8003da0 <UART_WaitOnFlagUntilTimeout>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d021      	beq.n	8003cd2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c96:	e853 3f00 	ldrex	r3, [r3]
 8003c9a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ca2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cac:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003cb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003cb4:	e841 2300 	strex	r3, r2, [r1]
 8003cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003cba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1e6      	bne.n	8003c8e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e062      	b.n	8003d98 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	2b04      	cmp	r3, #4
 8003cde:	d149      	bne.n	8003d74 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ce0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f856 	bl	8003da0 <UART_WaitOnFlagUntilTimeout>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d03c      	beq.n	8003d74 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d02:	e853 3f00 	ldrex	r3, [r3]
 8003d06:	623b      	str	r3, [r7, #32]
   return(result);
 8003d08:	6a3b      	ldr	r3, [r7, #32]
 8003d0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	461a      	mov	r2, r3
 8003d16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d18:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d20:	e841 2300 	strex	r3, r2, [r1]
 8003d24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1e6      	bne.n	8003cfa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	3308      	adds	r3, #8
 8003d32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	e853 3f00 	ldrex	r3, [r3]
 8003d3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f023 0301 	bic.w	r3, r3, #1
 8003d42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3308      	adds	r3, #8
 8003d4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d4c:	61fa      	str	r2, [r7, #28]
 8003d4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d50:	69b9      	ldr	r1, [r7, #24]
 8003d52:	69fa      	ldr	r2, [r7, #28]
 8003d54:	e841 2300 	strex	r3, r2, [r1]
 8003d58:	617b      	str	r3, [r7, #20]
   return(result);
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1e5      	bne.n	8003d2c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e011      	b.n	8003d98 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2220      	movs	r2, #32
 8003d78:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3758      	adds	r7, #88	@ 0x58
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	603b      	str	r3, [r7, #0]
 8003dac:	4613      	mov	r3, r2
 8003dae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003db0:	e04f      	b.n	8003e52 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db8:	d04b      	beq.n	8003e52 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dba:	f7fd fb47 	bl	800144c <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d302      	bcc.n	8003dd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d101      	bne.n	8003dd4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e04e      	b.n	8003e72 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0304 	and.w	r3, r3, #4
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d037      	beq.n	8003e52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	2b80      	cmp	r3, #128	@ 0x80
 8003de6:	d034      	beq.n	8003e52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	2b40      	cmp	r3, #64	@ 0x40
 8003dec:	d031      	beq.n	8003e52 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	f003 0308 	and.w	r3, r3, #8
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	d110      	bne.n	8003e1e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2208      	movs	r2, #8
 8003e02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f000 f838 	bl	8003e7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2208      	movs	r2, #8
 8003e0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e029      	b.n	8003e72 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	69db      	ldr	r3, [r3, #28]
 8003e24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e2c:	d111      	bne.n	8003e52 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 f81e 	bl	8003e7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2220      	movs	r2, #32
 8003e42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e00f      	b.n	8003e72 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	69da      	ldr	r2, [r3, #28]
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	bf0c      	ite	eq
 8003e62:	2301      	moveq	r3, #1
 8003e64:	2300      	movne	r3, #0
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	461a      	mov	r2, r3
 8003e6a:	79fb      	ldrb	r3, [r7, #7]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d0a0      	beq.n	8003db2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b095      	sub	sp, #84	@ 0x54
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e8a:	e853 3f00 	ldrex	r3, [r3]
 8003e8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ea0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ea2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ea6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ea8:	e841 2300 	strex	r3, r2, [r1]
 8003eac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1e6      	bne.n	8003e82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	3308      	adds	r3, #8
 8003eba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebc:	6a3b      	ldr	r3, [r7, #32]
 8003ebe:	e853 3f00 	ldrex	r3, [r3]
 8003ec2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	f023 0301 	bic.w	r3, r3, #1
 8003eca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	3308      	adds	r3, #8
 8003ed2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ed4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003eda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003edc:	e841 2300 	strex	r3, r2, [r1]
 8003ee0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1e5      	bne.n	8003eb4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d118      	bne.n	8003f22 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	e853 3f00 	ldrex	r3, [r3]
 8003efc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	f023 0310 	bic.w	r3, r3, #16
 8003f04:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f0e:	61bb      	str	r3, [r7, #24]
 8003f10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f12:	6979      	ldr	r1, [r7, #20]
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	e841 2300 	strex	r3, r2, [r1]
 8003f1a:	613b      	str	r3, [r7, #16]
   return(result);
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1e6      	bne.n	8003ef0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2220      	movs	r2, #32
 8003f26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003f36:	bf00      	nop
 8003f38:	3754      	adds	r7, #84	@ 0x54
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <memset>:
 8003f42:	4402      	add	r2, r0
 8003f44:	4603      	mov	r3, r0
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d100      	bne.n	8003f4c <memset+0xa>
 8003f4a:	4770      	bx	lr
 8003f4c:	f803 1b01 	strb.w	r1, [r3], #1
 8003f50:	e7f9      	b.n	8003f46 <memset+0x4>
	...

08003f54 <__libc_init_array>:
 8003f54:	b570      	push	{r4, r5, r6, lr}
 8003f56:	4d0d      	ldr	r5, [pc, #52]	@ (8003f8c <__libc_init_array+0x38>)
 8003f58:	4c0d      	ldr	r4, [pc, #52]	@ (8003f90 <__libc_init_array+0x3c>)
 8003f5a:	1b64      	subs	r4, r4, r5
 8003f5c:	10a4      	asrs	r4, r4, #2
 8003f5e:	2600      	movs	r6, #0
 8003f60:	42a6      	cmp	r6, r4
 8003f62:	d109      	bne.n	8003f78 <__libc_init_array+0x24>
 8003f64:	4d0b      	ldr	r5, [pc, #44]	@ (8003f94 <__libc_init_array+0x40>)
 8003f66:	4c0c      	ldr	r4, [pc, #48]	@ (8003f98 <__libc_init_array+0x44>)
 8003f68:	f000 f818 	bl	8003f9c <_init>
 8003f6c:	1b64      	subs	r4, r4, r5
 8003f6e:	10a4      	asrs	r4, r4, #2
 8003f70:	2600      	movs	r6, #0
 8003f72:	42a6      	cmp	r6, r4
 8003f74:	d105      	bne.n	8003f82 <__libc_init_array+0x2e>
 8003f76:	bd70      	pop	{r4, r5, r6, pc}
 8003f78:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f7c:	4798      	blx	r3
 8003f7e:	3601      	adds	r6, #1
 8003f80:	e7ee      	b.n	8003f60 <__libc_init_array+0xc>
 8003f82:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f86:	4798      	blx	r3
 8003f88:	3601      	adds	r6, #1
 8003f8a:	e7f2      	b.n	8003f72 <__libc_init_array+0x1e>
 8003f8c:	08003fec 	.word	0x08003fec
 8003f90:	08003fec 	.word	0x08003fec
 8003f94:	08003fec 	.word	0x08003fec
 8003f98:	08003ff0 	.word	0x08003ff0

08003f9c <_init>:
 8003f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f9e:	bf00      	nop
 8003fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fa2:	bc08      	pop	{r3}
 8003fa4:	469e      	mov	lr, r3
 8003fa6:	4770      	bx	lr

08003fa8 <_fini>:
 8003fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003faa:	bf00      	nop
 8003fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fae:	bc08      	pop	{r3}
 8003fb0:	469e      	mov	lr, r3
 8003fb2:	4770      	bx	lr

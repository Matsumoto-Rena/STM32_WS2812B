
F303K8_WS2812B.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034ec  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003674  08003674  00004674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036ac  080036ac  00005028  2**0
                  CONTENTS
  4 .ARM          00000000  080036ac  080036ac  00005028  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036ac  080036ac  00005028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036ac  080036ac  000046ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080036b0  080036b0  000046b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  080036b4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005028  2**0
                  CONTENTS
 10 .bss          00000248  20000028  20000028  00005028  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000270  20000270  00005028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005028  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e4a4  00000000  00000000  00005058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001abe  00000000  00000000  000134fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d88  00000000  00000000  00014fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ab0  00000000  00000000  00015d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001abdd  00000000  00000000  000167f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010474  00000000  00000000  000313d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a2d7b  00000000  00000000  00041849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e45c4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000039e4  00000000  00000000  000e4608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  000e7fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800365c 	.word	0x0800365c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	0800365c 	.word	0x0800365c

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fc20 	bl	8000a10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f830 	bl	8000234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f912 	bl	80003fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001d8:	f000 f8e0 	bl	800039c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80001dc:	f000 f86a 	bl	80002b4 <MX_SPI1_Init>
  MX_TIM7_Init();
 80001e0:	f000 f8a6 	bl	8000330 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim7);
 80001e4:	4810      	ldr	r0, [pc, #64]	@ (8000228 <main+0x60>)
 80001e6:	f002 fd27 	bl	8002c38 <HAL_TIM_Base_Start>
  ws2812b_rainbow();
 80001ea:	f000 f941 	bl	8000470 <ws2812b_rainbow>
  HAL_SPI_Transmit(&hspi1, rainbowData, 24*LED_NUMBER, 1000);
 80001ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001f2:	22f0      	movs	r2, #240	@ 0xf0
 80001f4:	490d      	ldr	r1, [pc, #52]	@ (800022c <main+0x64>)
 80001f6:	480e      	ldr	r0, [pc, #56]	@ (8000230 <main+0x68>)
 80001f8:	f002 f9ed 	bl	80025d6 <HAL_SPI_Transmit>
  wait_290us();
 80001fc:	f000 f922 	bl	8000444 <wait_290us>
  HAL_Delay(1000);
 8000200:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000204:	f000 fc6a 	bl	8000adc <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	rainbow_flow();
 8000208:	f000 fa7a 	bl	8000700 <rainbow_flow>
	//ws2812b_rainbow();
	HAL_SPI_Transmit(&hspi1, rainbowData, 24*LED_NUMBER, 1000);
 800020c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000210:	22f0      	movs	r2, #240	@ 0xf0
 8000212:	4906      	ldr	r1, [pc, #24]	@ (800022c <main+0x64>)
 8000214:	4806      	ldr	r0, [pc, #24]	@ (8000230 <main+0x68>)
 8000216:	f002 f9de 	bl	80025d6 <HAL_SPI_Transmit>
	wait_290us();
 800021a:	f000 f913 	bl	8000444 <wait_290us>
	HAL_Delay(80);
 800021e:	2050      	movs	r0, #80	@ 0x50
 8000220:	f000 fc5c 	bl	8000adc <HAL_Delay>
	rainbow_flow();
 8000224:	bf00      	nop
 8000226:	e7ef      	b.n	8000208 <main+0x40>
 8000228:	200000a8 	.word	0x200000a8
 800022c:	2000017c 	.word	0x2000017c
 8000230:	20000044 	.word	0x20000044

08000234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b090      	sub	sp, #64	@ 0x40
 8000238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023a:	f107 0318 	add.w	r3, r7, #24
 800023e:	2228      	movs	r2, #40	@ 0x28
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f003 f9dd 	bl	8003602 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]
 8000254:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000256:	2302      	movs	r3, #2
 8000258:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025a:	2301      	movs	r3, #1
 800025c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800025e:	2310      	movs	r3, #16
 8000260:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000262:	2302      	movs	r3, #2
 8000264:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000266:	2300      	movs	r3, #0
 8000268:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800026a:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 800026e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000270:	f107 0318 	add.w	r3, r7, #24
 8000274:	4618      	mov	r0, r3
 8000276:	f000 fead 	bl	8000fd4 <HAL_RCC_OscConfig>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000280:	f000 fa8a 	bl	8000798 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000284:	230f      	movs	r3, #15
 8000286:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000288:	2302      	movs	r3, #2
 800028a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	2101      	movs	r1, #1
 800029c:	4618      	mov	r0, r3
 800029e:	f001 fed7 	bl	8002050 <HAL_RCC_ClockConfig>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <SystemClock_Config+0x78>
  {
    Error_Handler();
 80002a8:	f000 fa76 	bl	8000798 <Error_Handler>
  }
}
 80002ac:	bf00      	nop
 80002ae:	3740      	adds	r7, #64	@ 0x40
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}

080002b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000328 <MX_SPI1_Init+0x74>)
 80002ba:	4a1c      	ldr	r2, [pc, #112]	@ (800032c <MX_SPI1_Init+0x78>)
 80002bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002be:	4b1a      	ldr	r3, [pc, #104]	@ (8000328 <MX_SPI1_Init+0x74>)
 80002c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80002c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002c6:	4b18      	ldr	r3, [pc, #96]	@ (8000328 <MX_SPI1_Init+0x74>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002cc:	4b16      	ldr	r3, [pc, #88]	@ (8000328 <MX_SPI1_Init+0x74>)
 80002ce:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80002d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002d4:	4b14      	ldr	r3, [pc, #80]	@ (8000328 <MX_SPI1_Init+0x74>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002da:	4b13      	ldr	r3, [pc, #76]	@ (8000328 <MX_SPI1_Init+0x74>)
 80002dc:	2200      	movs	r2, #0
 80002de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002e0:	4b11      	ldr	r3, [pc, #68]	@ (8000328 <MX_SPI1_Init+0x74>)
 80002e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80002e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80002e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000328 <MX_SPI1_Init+0x74>)
 80002ea:	2208      	movs	r2, #8
 80002ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000328 <MX_SPI1_Init+0x74>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000328 <MX_SPI1_Init+0x74>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000328 <MX_SPI1_Init+0x74>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000300:	4b09      	ldr	r3, [pc, #36]	@ (8000328 <MX_SPI1_Init+0x74>)
 8000302:	2207      	movs	r2, #7
 8000304:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000306:	4b08      	ldr	r3, [pc, #32]	@ (8000328 <MX_SPI1_Init+0x74>)
 8000308:	2200      	movs	r2, #0
 800030a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800030c:	4b06      	ldr	r3, [pc, #24]	@ (8000328 <MX_SPI1_Init+0x74>)
 800030e:	2208      	movs	r2, #8
 8000310:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000312:	4805      	ldr	r0, [pc, #20]	@ (8000328 <MX_SPI1_Init+0x74>)
 8000314:	f002 f8bc 	bl	8002490 <HAL_SPI_Init>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800031e:	f000 fa3b 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	20000044 	.word	0x20000044
 800032c:	40013000 	.word	0x40013000

08000330 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	2200      	movs	r2, #0
 800033a:	601a      	str	r2, [r3, #0]
 800033c:	605a      	str	r2, [r3, #4]
 800033e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000340:	4b14      	ldr	r3, [pc, #80]	@ (8000394 <MX_TIM7_Init+0x64>)
 8000342:	4a15      	ldr	r2, [pc, #84]	@ (8000398 <MX_TIM7_Init+0x68>)
 8000344:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 32-1;
 8000346:	4b13      	ldr	r3, [pc, #76]	@ (8000394 <MX_TIM7_Init+0x64>)
 8000348:	221f      	movs	r2, #31
 800034a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800034c:	4b11      	ldr	r3, [pc, #68]	@ (8000394 <MX_TIM7_Init+0x64>)
 800034e:	2200      	movs	r2, #0
 8000350:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8000352:	4b10      	ldr	r3, [pc, #64]	@ (8000394 <MX_TIM7_Init+0x64>)
 8000354:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000358:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800035a:	4b0e      	ldr	r3, [pc, #56]	@ (8000394 <MX_TIM7_Init+0x64>)
 800035c:	2200      	movs	r2, #0
 800035e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000360:	480c      	ldr	r0, [pc, #48]	@ (8000394 <MX_TIM7_Init+0x64>)
 8000362:	f002 fc11 	bl	8002b88 <HAL_TIM_Base_Init>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800036c:	f000 fa14 	bl	8000798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000370:	2300      	movs	r3, #0
 8000372:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000374:	2300      	movs	r3, #0
 8000376:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	4619      	mov	r1, r3
 800037c:	4805      	ldr	r0, [pc, #20]	@ (8000394 <MX_TIM7_Init+0x64>)
 800037e:	f002 fd33 	bl	8002de8 <HAL_TIMEx_MasterConfigSynchronization>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000388:	f000 fa06 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800038c:	bf00      	nop
 800038e:	3710      	adds	r7, #16
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	200000a8 	.word	0x200000a8
 8000398:	40001400 	.word	0x40001400

0800039c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003a0:	4b14      	ldr	r3, [pc, #80]	@ (80003f4 <MX_USART2_UART_Init+0x58>)
 80003a2:	4a15      	ldr	r2, [pc, #84]	@ (80003f8 <MX_USART2_UART_Init+0x5c>)
 80003a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003a6:	4b13      	ldr	r3, [pc, #76]	@ (80003f4 <MX_USART2_UART_Init+0x58>)
 80003a8:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80003ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003ae:	4b11      	ldr	r3, [pc, #68]	@ (80003f4 <MX_USART2_UART_Init+0x58>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003b4:	4b0f      	ldr	r3, [pc, #60]	@ (80003f4 <MX_USART2_UART_Init+0x58>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003ba:	4b0e      	ldr	r3, [pc, #56]	@ (80003f4 <MX_USART2_UART_Init+0x58>)
 80003bc:	2200      	movs	r2, #0
 80003be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003c0:	4b0c      	ldr	r3, [pc, #48]	@ (80003f4 <MX_USART2_UART_Init+0x58>)
 80003c2:	220c      	movs	r2, #12
 80003c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003c6:	4b0b      	ldr	r3, [pc, #44]	@ (80003f4 <MX_USART2_UART_Init+0x58>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003cc:	4b09      	ldr	r3, [pc, #36]	@ (80003f4 <MX_USART2_UART_Init+0x58>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003d2:	4b08      	ldr	r3, [pc, #32]	@ (80003f4 <MX_USART2_UART_Init+0x58>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003d8:	4b06      	ldr	r3, [pc, #24]	@ (80003f4 <MX_USART2_UART_Init+0x58>)
 80003da:	2200      	movs	r2, #0
 80003dc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003de:	4805      	ldr	r0, [pc, #20]	@ (80003f4 <MX_USART2_UART_Init+0x58>)
 80003e0:	f002 fd70 	bl	8002ec4 <HAL_UART_Init>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003ea:	f000 f9d5 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	200000f4 	.word	0x200000f4
 80003f8:	40004400 	.word	0x40004400

080003fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000402:	4b0f      	ldr	r3, [pc, #60]	@ (8000440 <MX_GPIO_Init+0x44>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	4a0e      	ldr	r2, [pc, #56]	@ (8000440 <MX_GPIO_Init+0x44>)
 8000408:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800040c:	6153      	str	r3, [r2, #20]
 800040e:	4b0c      	ldr	r3, [pc, #48]	@ (8000440 <MX_GPIO_Init+0x44>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000416:	607b      	str	r3, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800041a:	4b09      	ldr	r3, [pc, #36]	@ (8000440 <MX_GPIO_Init+0x44>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	4a08      	ldr	r2, [pc, #32]	@ (8000440 <MX_GPIO_Init+0x44>)
 8000420:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000424:	6153      	str	r3, [r2, #20]
 8000426:	4b06      	ldr	r3, [pc, #24]	@ (8000440 <MX_GPIO_Init+0x44>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800042e:	603b      	str	r3, [r7, #0]
 8000430:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000432:	bf00      	nop
 8000434:	370c      	adds	r7, #12
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	40021000 	.word	0x40021000

08000444 <wait_290us>:

/* USER CODE BEGIN 4 */
void wait_290us(){
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
	htim7.Instance->CNT = 0;
 8000448:	4b08      	ldr	r3, [pc, #32]	@ (800046c <wait_290us+0x28>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	2200      	movs	r2, #0
 800044e:	625a      	str	r2, [r3, #36]	@ 0x24
	while((htim7.Instance->CNT)<290);
 8000450:	bf00      	nop
 8000452:	4b06      	ldr	r3, [pc, #24]	@ (800046c <wait_290us+0x28>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000458:	f5b3 7f91 	cmp.w	r3, #290	@ 0x122
 800045c:	d3f9      	bcc.n	8000452 <wait_290us+0xe>
}
 800045e:	bf00      	nop
 8000460:	bf00      	nop
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	200000a8 	.word	0x200000a8

08000470 <ws2812b_rainbow>:

	HAL_SPI_Transmit(&hspi1, robohan_colorData, 24*LED_NUMBER, 1000);
	wait_290us();
}

void ws2812b_rainbow(){
 8000470:	b480      	push	{r7}
 8000472:	b085      	sub	sp, #20
 8000474:	af00      	add	r7, sp, #0
	for(int i=0; i<LED_NUMBER; i++){
 8000476:	2300      	movs	r3, #0
 8000478:	60fb      	str	r3, [r7, #12]
 800047a:	e124      	b.n	80006c6 <ws2812b_rainbow+0x256>
		for(int j=0; j<24; j++){
 800047c:	2300      	movs	r3, #0
 800047e:	60bb      	str	r3, [r7, #8]
 8000480:	e11a      	b.n	80006b8 <ws2812b_rainbow+0x248>
			int remainder = i%7;
 8000482:	68fa      	ldr	r2, [r7, #12]
 8000484:	4b95      	ldr	r3, [pc, #596]	@ (80006dc <ws2812b_rainbow+0x26c>)
 8000486:	fb83 1302 	smull	r1, r3, r3, r2
 800048a:	4413      	add	r3, r2
 800048c:	1099      	asrs	r1, r3, #2
 800048e:	17d3      	asrs	r3, r2, #31
 8000490:	1ac9      	subs	r1, r1, r3
 8000492:	460b      	mov	r3, r1
 8000494:	00db      	lsls	r3, r3, #3
 8000496:	1a5b      	subs	r3, r3, r1
 8000498:	1ad3      	subs	r3, r2, r3
 800049a:	607b      	str	r3, [r7, #4]

			switch(remainder){
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	2b06      	cmp	r3, #6
 80004a0:	f200 8107 	bhi.w	80006b2 <ws2812b_rainbow+0x242>
 80004a4:	a201      	add	r2, pc, #4	@ (adr r2, 80004ac <ws2812b_rainbow+0x3c>)
 80004a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004aa:	bf00      	nop
 80004ac:	080004c9 	.word	0x080004c9
 80004b0:	0800050f 	.word	0x0800050f
 80004b4:	08000555 	.word	0x08000555
 80004b8:	0800059b 	.word	0x0800059b
 80004bc:	080005e1 	.word	0x080005e1
 80004c0:	08000627 	.word	0x08000627
 80004c4:	0800066d 	.word	0x0800066d

			case 0:
				if (((red>>(23-j))&0x01) == 1) {
 80004c8:	4b85      	ldr	r3, [pc, #532]	@ (80006e0 <ws2812b_rainbow+0x270>)
 80004ca:	681a      	ldr	r2, [r3, #0]
 80004cc:	68bb      	ldr	r3, [r7, #8]
 80004ce:	f1c3 0317 	rsb	r3, r3, #23
 80004d2:	fa22 f303 	lsr.w	r3, r2, r3
 80004d6:	f003 0301 	and.w	r3, r3, #1
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d00b      	beq.n	80004f6 <ws2812b_rainbow+0x86>
					rainbowData[i*24 + j] = 0b11000000;  // store 1
 80004de:	68fa      	ldr	r2, [r7, #12]
 80004e0:	4613      	mov	r3, r2
 80004e2:	005b      	lsls	r3, r3, #1
 80004e4:	4413      	add	r3, r2
 80004e6:	00db      	lsls	r3, r3, #3
 80004e8:	461a      	mov	r2, r3
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	4413      	add	r3, r2
 80004ee:	4a7d      	ldr	r2, [pc, #500]	@ (80006e4 <ws2812b_rainbow+0x274>)
 80004f0:	21c0      	movs	r1, #192	@ 0xc0
 80004f2:	54d1      	strb	r1, [r2, r3]
				}
				else{
					rainbowData[i*24 + j] = 0b10000000;  // store 0
				}
				break;
 80004f4:	e0dd      	b.n	80006b2 <ws2812b_rainbow+0x242>
					rainbowData[i*24 + j] = 0b10000000;  // store 0
 80004f6:	68fa      	ldr	r2, [r7, #12]
 80004f8:	4613      	mov	r3, r2
 80004fa:	005b      	lsls	r3, r3, #1
 80004fc:	4413      	add	r3, r2
 80004fe:	00db      	lsls	r3, r3, #3
 8000500:	461a      	mov	r2, r3
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	4413      	add	r3, r2
 8000506:	4a77      	ldr	r2, [pc, #476]	@ (80006e4 <ws2812b_rainbow+0x274>)
 8000508:	2180      	movs	r1, #128	@ 0x80
 800050a:	54d1      	strb	r1, [r2, r3]
				break;
 800050c:	e0d1      	b.n	80006b2 <ws2812b_rainbow+0x242>

			case 1:
				if (((orange>>(23-j))&0x01) == 1) {
 800050e:	4b76      	ldr	r3, [pc, #472]	@ (80006e8 <ws2812b_rainbow+0x278>)
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	f1c3 0317 	rsb	r3, r3, #23
 8000518:	fa22 f303 	lsr.w	r3, r2, r3
 800051c:	f003 0301 	and.w	r3, r3, #1
 8000520:	2b00      	cmp	r3, #0
 8000522:	d00b      	beq.n	800053c <ws2812b_rainbow+0xcc>
					rainbowData[i*24 + j] = 0b11000000;  // store 1
 8000524:	68fa      	ldr	r2, [r7, #12]
 8000526:	4613      	mov	r3, r2
 8000528:	005b      	lsls	r3, r3, #1
 800052a:	4413      	add	r3, r2
 800052c:	00db      	lsls	r3, r3, #3
 800052e:	461a      	mov	r2, r3
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	4413      	add	r3, r2
 8000534:	4a6b      	ldr	r2, [pc, #428]	@ (80006e4 <ws2812b_rainbow+0x274>)
 8000536:	21c0      	movs	r1, #192	@ 0xc0
 8000538:	54d1      	strb	r1, [r2, r3]
				}
				else{
					rainbowData[i*24 + j] = 0b10000000;  // store 0
				}
				break;
 800053a:	e0ba      	b.n	80006b2 <ws2812b_rainbow+0x242>
					rainbowData[i*24 + j] = 0b10000000;  // store 0
 800053c:	68fa      	ldr	r2, [r7, #12]
 800053e:	4613      	mov	r3, r2
 8000540:	005b      	lsls	r3, r3, #1
 8000542:	4413      	add	r3, r2
 8000544:	00db      	lsls	r3, r3, #3
 8000546:	461a      	mov	r2, r3
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	4413      	add	r3, r2
 800054c:	4a65      	ldr	r2, [pc, #404]	@ (80006e4 <ws2812b_rainbow+0x274>)
 800054e:	2180      	movs	r1, #128	@ 0x80
 8000550:	54d1      	strb	r1, [r2, r3]
				break;
 8000552:	e0ae      	b.n	80006b2 <ws2812b_rainbow+0x242>

			case 2:
				if (((yellow>>(23-j))&0x01) == 1) {
 8000554:	4b65      	ldr	r3, [pc, #404]	@ (80006ec <ws2812b_rainbow+0x27c>)
 8000556:	681a      	ldr	r2, [r3, #0]
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	f1c3 0317 	rsb	r3, r3, #23
 800055e:	fa22 f303 	lsr.w	r3, r2, r3
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	2b00      	cmp	r3, #0
 8000568:	d00b      	beq.n	8000582 <ws2812b_rainbow+0x112>
					rainbowData[i*24 + j] = 0b11000000;  // store 1
 800056a:	68fa      	ldr	r2, [r7, #12]
 800056c:	4613      	mov	r3, r2
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	4413      	add	r3, r2
 8000572:	00db      	lsls	r3, r3, #3
 8000574:	461a      	mov	r2, r3
 8000576:	68bb      	ldr	r3, [r7, #8]
 8000578:	4413      	add	r3, r2
 800057a:	4a5a      	ldr	r2, [pc, #360]	@ (80006e4 <ws2812b_rainbow+0x274>)
 800057c:	21c0      	movs	r1, #192	@ 0xc0
 800057e:	54d1      	strb	r1, [r2, r3]
				}
				else{
					rainbowData[i*24 + j] = 0b10000000;  // store 0
				}
				break;
 8000580:	e097      	b.n	80006b2 <ws2812b_rainbow+0x242>
					rainbowData[i*24 + j] = 0b10000000;  // store 0
 8000582:	68fa      	ldr	r2, [r7, #12]
 8000584:	4613      	mov	r3, r2
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	4413      	add	r3, r2
 800058a:	00db      	lsls	r3, r3, #3
 800058c:	461a      	mov	r2, r3
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	4413      	add	r3, r2
 8000592:	4a54      	ldr	r2, [pc, #336]	@ (80006e4 <ws2812b_rainbow+0x274>)
 8000594:	2180      	movs	r1, #128	@ 0x80
 8000596:	54d1      	strb	r1, [r2, r3]
				break;
 8000598:	e08b      	b.n	80006b2 <ws2812b_rainbow+0x242>

			case 3:
				if (((green>>(23-j))&0x01) == 1) {
 800059a:	4b55      	ldr	r3, [pc, #340]	@ (80006f0 <ws2812b_rainbow+0x280>)
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	f1c3 0317 	rsb	r3, r3, #23
 80005a4:	fa22 f303 	lsr.w	r3, r2, r3
 80005a8:	f003 0301 	and.w	r3, r3, #1
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d00b      	beq.n	80005c8 <ws2812b_rainbow+0x158>
					rainbowData[i*24 + j] = 0b11000000;  // store 1
 80005b0:	68fa      	ldr	r2, [r7, #12]
 80005b2:	4613      	mov	r3, r2
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	4413      	add	r3, r2
 80005b8:	00db      	lsls	r3, r3, #3
 80005ba:	461a      	mov	r2, r3
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	4413      	add	r3, r2
 80005c0:	4a48      	ldr	r2, [pc, #288]	@ (80006e4 <ws2812b_rainbow+0x274>)
 80005c2:	21c0      	movs	r1, #192	@ 0xc0
 80005c4:	54d1      	strb	r1, [r2, r3]
				}
				else{
					rainbowData[i*24 + j] = 0b10000000;  // store 0
				}
				break;
 80005c6:	e074      	b.n	80006b2 <ws2812b_rainbow+0x242>
					rainbowData[i*24 + j] = 0b10000000;  // store 0
 80005c8:	68fa      	ldr	r2, [r7, #12]
 80005ca:	4613      	mov	r3, r2
 80005cc:	005b      	lsls	r3, r3, #1
 80005ce:	4413      	add	r3, r2
 80005d0:	00db      	lsls	r3, r3, #3
 80005d2:	461a      	mov	r2, r3
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	4413      	add	r3, r2
 80005d8:	4a42      	ldr	r2, [pc, #264]	@ (80006e4 <ws2812b_rainbow+0x274>)
 80005da:	2180      	movs	r1, #128	@ 0x80
 80005dc:	54d1      	strb	r1, [r2, r3]
				break;
 80005de:	e068      	b.n	80006b2 <ws2812b_rainbow+0x242>

			case 4:
				if (((light_blue>>(23-j))&0x01) == 1) {
 80005e0:	4b44      	ldr	r3, [pc, #272]	@ (80006f4 <ws2812b_rainbow+0x284>)
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	f1c3 0317 	rsb	r3, r3, #23
 80005ea:	fa22 f303 	lsr.w	r3, r2, r3
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d00b      	beq.n	800060e <ws2812b_rainbow+0x19e>
					rainbowData[i*24 + j] = 0b11000000;  // store 1
 80005f6:	68fa      	ldr	r2, [r7, #12]
 80005f8:	4613      	mov	r3, r2
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	4413      	add	r3, r2
 80005fe:	00db      	lsls	r3, r3, #3
 8000600:	461a      	mov	r2, r3
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	4413      	add	r3, r2
 8000606:	4a37      	ldr	r2, [pc, #220]	@ (80006e4 <ws2812b_rainbow+0x274>)
 8000608:	21c0      	movs	r1, #192	@ 0xc0
 800060a:	54d1      	strb	r1, [r2, r3]
				}
				else{
					rainbowData[i*24 + j] = 0b10000000;  // store 0
				}
				break;
 800060c:	e051      	b.n	80006b2 <ws2812b_rainbow+0x242>
					rainbowData[i*24 + j] = 0b10000000;  // store 0
 800060e:	68fa      	ldr	r2, [r7, #12]
 8000610:	4613      	mov	r3, r2
 8000612:	005b      	lsls	r3, r3, #1
 8000614:	4413      	add	r3, r2
 8000616:	00db      	lsls	r3, r3, #3
 8000618:	461a      	mov	r2, r3
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	4413      	add	r3, r2
 800061e:	4a31      	ldr	r2, [pc, #196]	@ (80006e4 <ws2812b_rainbow+0x274>)
 8000620:	2180      	movs	r1, #128	@ 0x80
 8000622:	54d1      	strb	r1, [r2, r3]
				break;
 8000624:	e045      	b.n	80006b2 <ws2812b_rainbow+0x242>

			case 5:
				if (((blue>>(23-j))&0x01) == 1) {
 8000626:	4b34      	ldr	r3, [pc, #208]	@ (80006f8 <ws2812b_rainbow+0x288>)
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	f1c3 0317 	rsb	r3, r3, #23
 8000630:	fa22 f303 	lsr.w	r3, r2, r3
 8000634:	f003 0301 	and.w	r3, r3, #1
 8000638:	2b00      	cmp	r3, #0
 800063a:	d00b      	beq.n	8000654 <ws2812b_rainbow+0x1e4>
					rainbowData[i*24 + j] = 0b11000000;  // store 1
 800063c:	68fa      	ldr	r2, [r7, #12]
 800063e:	4613      	mov	r3, r2
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	4413      	add	r3, r2
 8000644:	00db      	lsls	r3, r3, #3
 8000646:	461a      	mov	r2, r3
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	4413      	add	r3, r2
 800064c:	4a25      	ldr	r2, [pc, #148]	@ (80006e4 <ws2812b_rainbow+0x274>)
 800064e:	21c0      	movs	r1, #192	@ 0xc0
 8000650:	54d1      	strb	r1, [r2, r3]
				}
				else{
					rainbowData[i*24 + j] = 0b10000000;  // store 0
				}
				break;
 8000652:	e02e      	b.n	80006b2 <ws2812b_rainbow+0x242>
					rainbowData[i*24 + j] = 0b10000000;  // store 0
 8000654:	68fa      	ldr	r2, [r7, #12]
 8000656:	4613      	mov	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	4413      	add	r3, r2
 800065c:	00db      	lsls	r3, r3, #3
 800065e:	461a      	mov	r2, r3
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	4413      	add	r3, r2
 8000664:	4a1f      	ldr	r2, [pc, #124]	@ (80006e4 <ws2812b_rainbow+0x274>)
 8000666:	2180      	movs	r1, #128	@ 0x80
 8000668:	54d1      	strb	r1, [r2, r3]
				break;
 800066a:	e022      	b.n	80006b2 <ws2812b_rainbow+0x242>

			case 6:
				if (((purple>>(23-j))&0x01) == 1) {
 800066c:	4b23      	ldr	r3, [pc, #140]	@ (80006fc <ws2812b_rainbow+0x28c>)
 800066e:	681a      	ldr	r2, [r3, #0]
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	f1c3 0317 	rsb	r3, r3, #23
 8000676:	fa22 f303 	lsr.w	r3, r2, r3
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	2b00      	cmp	r3, #0
 8000680:	d00b      	beq.n	800069a <ws2812b_rainbow+0x22a>
					rainbowData[i*24 + j] = 0b11000000;  // store 1
 8000682:	68fa      	ldr	r2, [r7, #12]
 8000684:	4613      	mov	r3, r2
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	4413      	add	r3, r2
 800068a:	00db      	lsls	r3, r3, #3
 800068c:	461a      	mov	r2, r3
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	4413      	add	r3, r2
 8000692:	4a14      	ldr	r2, [pc, #80]	@ (80006e4 <ws2812b_rainbow+0x274>)
 8000694:	21c0      	movs	r1, #192	@ 0xc0
 8000696:	54d1      	strb	r1, [r2, r3]
				}
				else{
					rainbowData[i*24 + j] = 0b10000000;  // store 0
				}
				break;
 8000698:	e00a      	b.n	80006b0 <ws2812b_rainbow+0x240>
					rainbowData[i*24 + j] = 0b10000000;  // store 0
 800069a:	68fa      	ldr	r2, [r7, #12]
 800069c:	4613      	mov	r3, r2
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	4413      	add	r3, r2
 80006a2:	00db      	lsls	r3, r3, #3
 80006a4:	461a      	mov	r2, r3
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	4413      	add	r3, r2
 80006aa:	4a0e      	ldr	r2, [pc, #56]	@ (80006e4 <ws2812b_rainbow+0x274>)
 80006ac:	2180      	movs	r1, #128	@ 0x80
 80006ae:	54d1      	strb	r1, [r2, r3]
				break;
 80006b0:	bf00      	nop
		for(int j=0; j<24; j++){
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	3301      	adds	r3, #1
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	2b17      	cmp	r3, #23
 80006bc:	f77f aee1 	ble.w	8000482 <ws2812b_rainbow+0x12>
	for(int i=0; i<LED_NUMBER; i++){
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	3301      	adds	r3, #1
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	2b09      	cmp	r3, #9
 80006ca:	f77f aed7 	ble.w	800047c <ws2812b_rainbow+0xc>
			}
		}
	}

}
 80006ce:	bf00      	nop
 80006d0:	bf00      	nop
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	92492493 	.word	0x92492493
 80006e0:	20000000 	.word	0x20000000
 80006e4:	2000017c 	.word	0x2000017c
 80006e8:	20000004 	.word	0x20000004
 80006ec:	20000008 	.word	0x20000008
 80006f0:	2000000c 	.word	0x2000000c
 80006f4:	20000010 	.word	0x20000010
 80006f8:	20000014 	.word	0x20000014
 80006fc:	20000018 	.word	0x20000018

08000700 <rainbow_flow>:

void rainbow_flow(){
 8000700:	b480      	push	{r7}
 8000702:	b08b      	sub	sp, #44	@ 0x2c
 8000704:	af00      	add	r7, sp, #0
	uint8_t hold[24] = {0};
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	f107 0308 	add.w	r3, r7, #8
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]

	for(int i=0; i<24; i++){
 800071a:	2300      	movs	r3, #0
 800071c:	627b      	str	r3, [r7, #36]	@ 0x24
 800071e:	e00b      	b.n	8000738 <rainbow_flow+0x38>
		hold[i] = rainbowData[i];
 8000720:	4a1c      	ldr	r2, [pc, #112]	@ (8000794 <rainbow_flow+0x94>)
 8000722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000724:	4413      	add	r3, r2
 8000726:	7819      	ldrb	r1, [r3, #0]
 8000728:	1d3a      	adds	r2, r7, #4
 800072a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800072c:	4413      	add	r3, r2
 800072e:	460a      	mov	r2, r1
 8000730:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<24; i++){
 8000732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000734:	3301      	adds	r3, #1
 8000736:	627b      	str	r3, [r7, #36]	@ 0x24
 8000738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800073a:	2b17      	cmp	r3, #23
 800073c:	ddf0      	ble.n	8000720 <rainbow_flow+0x20>
	}

	for(int i=0; i<24*(LED_NUMBER-1); i++){
 800073e:	2300      	movs	r3, #0
 8000740:	623b      	str	r3, [r7, #32]
 8000742:	e00b      	b.n	800075c <rainbow_flow+0x5c>
		rainbowData[i] = rainbowData[i+24];
 8000744:	6a3b      	ldr	r3, [r7, #32]
 8000746:	3318      	adds	r3, #24
 8000748:	4a12      	ldr	r2, [pc, #72]	@ (8000794 <rainbow_flow+0x94>)
 800074a:	5cd1      	ldrb	r1, [r2, r3]
 800074c:	4a11      	ldr	r2, [pc, #68]	@ (8000794 <rainbow_flow+0x94>)
 800074e:	6a3b      	ldr	r3, [r7, #32]
 8000750:	4413      	add	r3, r2
 8000752:	460a      	mov	r2, r1
 8000754:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<24*(LED_NUMBER-1); i++){
 8000756:	6a3b      	ldr	r3, [r7, #32]
 8000758:	3301      	adds	r3, #1
 800075a:	623b      	str	r3, [r7, #32]
 800075c:	6a3b      	ldr	r3, [r7, #32]
 800075e:	2bd7      	cmp	r3, #215	@ 0xd7
 8000760:	ddf0      	ble.n	8000744 <rainbow_flow+0x44>
	}

	for(int i=0; i<24; i++){
 8000762:	2300      	movs	r3, #0
 8000764:	61fb      	str	r3, [r7, #28]
 8000766:	e00a      	b.n	800077e <rainbow_flow+0x7e>
		rainbowData[24*(LED_NUMBER-1)+i] = hold[i];
 8000768:	69fb      	ldr	r3, [r7, #28]
 800076a:	33d8      	adds	r3, #216	@ 0xd8
 800076c:	1d39      	adds	r1, r7, #4
 800076e:	69fa      	ldr	r2, [r7, #28]
 8000770:	440a      	add	r2, r1
 8000772:	7811      	ldrb	r1, [r2, #0]
 8000774:	4a07      	ldr	r2, [pc, #28]	@ (8000794 <rainbow_flow+0x94>)
 8000776:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<24; i++){
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	3301      	adds	r3, #1
 800077c:	61fb      	str	r3, [r7, #28]
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	2b17      	cmp	r3, #23
 8000782:	ddf1      	ble.n	8000768 <rainbow_flow+0x68>
	}

}
 8000784:	bf00      	nop
 8000786:	bf00      	nop
 8000788:	372c      	adds	r7, #44	@ 0x2c
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	2000017c 	.word	0x2000017c

08000798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800079c:	b672      	cpsid	i
}
 800079e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <Error_Handler+0x8>

080007a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007aa:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <HAL_MspInit+0x44>)
 80007ac:	699b      	ldr	r3, [r3, #24]
 80007ae:	4a0e      	ldr	r2, [pc, #56]	@ (80007e8 <HAL_MspInit+0x44>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6193      	str	r3, [r2, #24]
 80007b6:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <HAL_MspInit+0x44>)
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c2:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <HAL_MspInit+0x44>)
 80007c4:	69db      	ldr	r3, [r3, #28]
 80007c6:	4a08      	ldr	r2, [pc, #32]	@ (80007e8 <HAL_MspInit+0x44>)
 80007c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007cc:	61d3      	str	r3, [r2, #28]
 80007ce:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <HAL_MspInit+0x44>)
 80007d0:	69db      	ldr	r3, [r3, #28]
 80007d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007da:	bf00      	nop
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	40021000 	.word	0x40021000

080007ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08a      	sub	sp, #40	@ 0x28
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a17      	ldr	r2, [pc, #92]	@ (8000868 <HAL_SPI_MspInit+0x7c>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d128      	bne.n	8000860 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800080e:	4b17      	ldr	r3, [pc, #92]	@ (800086c <HAL_SPI_MspInit+0x80>)
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	4a16      	ldr	r2, [pc, #88]	@ (800086c <HAL_SPI_MspInit+0x80>)
 8000814:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000818:	6193      	str	r3, [r2, #24]
 800081a:	4b14      	ldr	r3, [pc, #80]	@ (800086c <HAL_SPI_MspInit+0x80>)
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	4b11      	ldr	r3, [pc, #68]	@ (800086c <HAL_SPI_MspInit+0x80>)
 8000828:	695b      	ldr	r3, [r3, #20]
 800082a:	4a10      	ldr	r2, [pc, #64]	@ (800086c <HAL_SPI_MspInit+0x80>)
 800082c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000830:	6153      	str	r3, [r2, #20]
 8000832:	4b0e      	ldr	r3, [pc, #56]	@ (800086c <HAL_SPI_MspInit+0x80>)
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800083e:	23e0      	movs	r3, #224	@ 0xe0
 8000840:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000842:	2302      	movs	r3, #2
 8000844:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800084a:	2303      	movs	r3, #3
 800084c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800084e:	2305      	movs	r3, #5
 8000850:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	4619      	mov	r1, r3
 8000858:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800085c:	f000 fa48 	bl	8000cf0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000860:	bf00      	nop
 8000862:	3728      	adds	r7, #40	@ 0x28
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40013000 	.word	0x40013000
 800086c:	40021000 	.word	0x40021000

08000870 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a0a      	ldr	r2, [pc, #40]	@ (80008a8 <HAL_TIM_Base_MspInit+0x38>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d10b      	bne.n	800089a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000882:	4b0a      	ldr	r3, [pc, #40]	@ (80008ac <HAL_TIM_Base_MspInit+0x3c>)
 8000884:	69db      	ldr	r3, [r3, #28]
 8000886:	4a09      	ldr	r2, [pc, #36]	@ (80008ac <HAL_TIM_Base_MspInit+0x3c>)
 8000888:	f043 0320 	orr.w	r3, r3, #32
 800088c:	61d3      	str	r3, [r2, #28]
 800088e:	4b07      	ldr	r3, [pc, #28]	@ (80008ac <HAL_TIM_Base_MspInit+0x3c>)
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	f003 0320 	and.w	r3, r3, #32
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM7_MspInit 1 */

  }

}
 800089a:	bf00      	nop
 800089c:	3714      	adds	r7, #20
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	40001400 	.word	0x40001400
 80008ac:	40021000 	.word	0x40021000

080008b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	@ 0x28
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a18      	ldr	r2, [pc, #96]	@ (8000930 <HAL_UART_MspInit+0x80>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d129      	bne.n	8000926 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008d2:	4b18      	ldr	r3, [pc, #96]	@ (8000934 <HAL_UART_MspInit+0x84>)
 80008d4:	69db      	ldr	r3, [r3, #28]
 80008d6:	4a17      	ldr	r2, [pc, #92]	@ (8000934 <HAL_UART_MspInit+0x84>)
 80008d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008dc:	61d3      	str	r3, [r2, #28]
 80008de:	4b15      	ldr	r3, [pc, #84]	@ (8000934 <HAL_UART_MspInit+0x84>)
 80008e0:	69db      	ldr	r3, [r3, #28]
 80008e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	4b12      	ldr	r3, [pc, #72]	@ (8000934 <HAL_UART_MspInit+0x84>)
 80008ec:	695b      	ldr	r3, [r3, #20]
 80008ee:	4a11      	ldr	r2, [pc, #68]	@ (8000934 <HAL_UART_MspInit+0x84>)
 80008f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008f4:	6153      	str	r3, [r2, #20]
 80008f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000934 <HAL_UART_MspInit+0x84>)
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000902:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000908:	2302      	movs	r3, #2
 800090a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000910:	2303      	movs	r3, #3
 8000912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000914:	2307      	movs	r3, #7
 8000916:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4619      	mov	r1, r3
 800091e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000922:	f000 f9e5 	bl	8000cf0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000926:	bf00      	nop
 8000928:	3728      	adds	r7, #40	@ 0x28
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40004400 	.word	0x40004400
 8000934:	40021000 	.word	0x40021000

08000938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <NMI_Handler+0x4>

08000940 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <HardFault_Handler+0x4>

08000948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <MemManage_Handler+0x4>

08000950 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <BusFault_Handler+0x4>

08000958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <UsageFault_Handler+0x4>

08000960 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800098e:	f000 f885 	bl	8000a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800099c:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <SystemInit+0x20>)
 800099e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009a2:	4a05      	ldr	r2, [pc, #20]	@ (80009b8 <SystemInit+0x20>)
 80009a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009f4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80009c0:	f7ff ffea 	bl	8000998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c4:	480c      	ldr	r0, [pc, #48]	@ (80009f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80009c6:	490d      	ldr	r1, [pc, #52]	@ (80009fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80009c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a00 <LoopForever+0xe>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009cc:	e002      	b.n	80009d4 <LoopCopyDataInit>

080009ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009d2:	3304      	adds	r3, #4

080009d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d8:	d3f9      	bcc.n	80009ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009da:	4a0a      	ldr	r2, [pc, #40]	@ (8000a04 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009dc:	4c0a      	ldr	r4, [pc, #40]	@ (8000a08 <LoopForever+0x16>)
  movs r3, #0
 80009de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e0:	e001      	b.n	80009e6 <LoopFillZerobss>

080009e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e4:	3204      	adds	r2, #4

080009e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e8:	d3fb      	bcc.n	80009e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ea:	f002 fe13 	bl	8003614 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009ee:	f7ff fbeb 	bl	80001c8 <main>

080009f2 <LoopForever>:

LoopForever:
    b LoopForever
 80009f2:	e7fe      	b.n	80009f2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009f4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80009f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009fc:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000a00:	080036b4 	.word	0x080036b4
  ldr r2, =_sbss
 8000a04:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000a08:	20000270 	.word	0x20000270

08000a0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a0c:	e7fe      	b.n	8000a0c <ADC1_2_IRQHandler>
	...

08000a10 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a14:	4b08      	ldr	r3, [pc, #32]	@ (8000a38 <HAL_Init+0x28>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a07      	ldr	r2, [pc, #28]	@ (8000a38 <HAL_Init+0x28>)
 8000a1a:	f043 0310 	orr.w	r3, r3, #16
 8000a1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a20:	2003      	movs	r0, #3
 8000a22:	f000 f931 	bl	8000c88 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a26:	2000      	movs	r0, #0
 8000a28:	f000 f808 	bl	8000a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a2c:	f7ff feba 	bl	80007a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40022000 	.word	0x40022000

08000a3c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a44:	4b12      	ldr	r3, [pc, #72]	@ (8000a90 <HAL_InitTick+0x54>)
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	4b12      	ldr	r3, [pc, #72]	@ (8000a94 <HAL_InitTick+0x58>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 f93b 	bl	8000cd6 <HAL_SYSTICK_Config>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	e00e      	b.n	8000a88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2b0f      	cmp	r3, #15
 8000a6e:	d80a      	bhi.n	8000a86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a70:	2200      	movs	r2, #0
 8000a72:	6879      	ldr	r1, [r7, #4]
 8000a74:	f04f 30ff 	mov.w	r0, #4294967295
 8000a78:	f000 f911 	bl	8000c9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a7c:	4a06      	ldr	r2, [pc, #24]	@ (8000a98 <HAL_InitTick+0x5c>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a82:	2300      	movs	r3, #0
 8000a84:	e000      	b.n	8000a88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	2000001c 	.word	0x2000001c
 8000a94:	20000024 	.word	0x20000024
 8000a98:	20000020 	.word	0x20000020

08000a9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <HAL_IncTick+0x20>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4b06      	ldr	r3, [pc, #24]	@ (8000ac0 <HAL_IncTick+0x24>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4413      	add	r3, r2
 8000aac:	4a04      	ldr	r2, [pc, #16]	@ (8000ac0 <HAL_IncTick+0x24>)
 8000aae:	6013      	str	r3, [r2, #0]
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	20000024 	.word	0x20000024
 8000ac0:	2000026c 	.word	0x2000026c

08000ac4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ac8:	4b03      	ldr	r3, [pc, #12]	@ (8000ad8 <HAL_GetTick+0x14>)
 8000aca:	681b      	ldr	r3, [r3, #0]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	2000026c 	.word	0x2000026c

08000adc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ae4:	f7ff ffee 	bl	8000ac4 <HAL_GetTick>
 8000ae8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000af4:	d005      	beq.n	8000b02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000af6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b20 <HAL_Delay+0x44>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	461a      	mov	r2, r3
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	4413      	add	r3, r2
 8000b00:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b02:	bf00      	nop
 8000b04:	f7ff ffde 	bl	8000ac4 <HAL_GetTick>
 8000b08:	4602      	mov	r2, r0
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d8f7      	bhi.n	8000b04 <HAL_Delay+0x28>
  {
  }
}
 8000b14:	bf00      	nop
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000024 	.word	0x20000024

08000b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b34:	4b0c      	ldr	r3, [pc, #48]	@ (8000b68 <__NVIC_SetPriorityGrouping+0x44>)
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b3a:	68ba      	ldr	r2, [r7, #8]
 8000b3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b40:	4013      	ands	r3, r2
 8000b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b56:	4a04      	ldr	r2, [pc, #16]	@ (8000b68 <__NVIC_SetPriorityGrouping+0x44>)
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	60d3      	str	r3, [r2, #12]
}
 8000b5c:	bf00      	nop
 8000b5e:	3714      	adds	r7, #20
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b70:	4b04      	ldr	r3, [pc, #16]	@ (8000b84 <__NVIC_GetPriorityGrouping+0x18>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	0a1b      	lsrs	r3, r3, #8
 8000b76:	f003 0307 	and.w	r3, r3, #7
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	6039      	str	r1, [r7, #0]
 8000b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	db0a      	blt.n	8000bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	490c      	ldr	r1, [pc, #48]	@ (8000bd4 <__NVIC_SetPriority+0x4c>)
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	0112      	lsls	r2, r2, #4
 8000ba8:	b2d2      	uxtb	r2, r2
 8000baa:	440b      	add	r3, r1
 8000bac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb0:	e00a      	b.n	8000bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	4908      	ldr	r1, [pc, #32]	@ (8000bd8 <__NVIC_SetPriority+0x50>)
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	f003 030f 	and.w	r3, r3, #15
 8000bbe:	3b04      	subs	r3, #4
 8000bc0:	0112      	lsls	r2, r2, #4
 8000bc2:	b2d2      	uxtb	r2, r2
 8000bc4:	440b      	add	r3, r1
 8000bc6:	761a      	strb	r2, [r3, #24]
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	e000e100 	.word	0xe000e100
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b089      	sub	sp, #36	@ 0x24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	f003 0307 	and.w	r3, r3, #7
 8000bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	f1c3 0307 	rsb	r3, r3, #7
 8000bf6:	2b04      	cmp	r3, #4
 8000bf8:	bf28      	it	cs
 8000bfa:	2304      	movcs	r3, #4
 8000bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3304      	adds	r3, #4
 8000c02:	2b06      	cmp	r3, #6
 8000c04:	d902      	bls.n	8000c0c <NVIC_EncodePriority+0x30>
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	3b03      	subs	r3, #3
 8000c0a:	e000      	b.n	8000c0e <NVIC_EncodePriority+0x32>
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c10:	f04f 32ff 	mov.w	r2, #4294967295
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	43da      	mvns	r2, r3
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	401a      	ands	r2, r3
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c24:	f04f 31ff 	mov.w	r1, #4294967295
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2e:	43d9      	mvns	r1, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c34:	4313      	orrs	r3, r2
         );
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3724      	adds	r7, #36	@ 0x24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
	...

08000c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c54:	d301      	bcc.n	8000c5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c56:	2301      	movs	r3, #1
 8000c58:	e00f      	b.n	8000c7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c84 <SysTick_Config+0x40>)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c62:	210f      	movs	r1, #15
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295
 8000c68:	f7ff ff8e 	bl	8000b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c6c:	4b05      	ldr	r3, [pc, #20]	@ (8000c84 <SysTick_Config+0x40>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c72:	4b04      	ldr	r3, [pc, #16]	@ (8000c84 <SysTick_Config+0x40>)
 8000c74:	2207      	movs	r2, #7
 8000c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	e000e010 	.word	0xe000e010

08000c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f7ff ff47 	bl	8000b24 <__NVIC_SetPriorityGrouping>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b086      	sub	sp, #24
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	60b9      	str	r1, [r7, #8]
 8000ca8:	607a      	str	r2, [r7, #4]
 8000caa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb0:	f7ff ff5c 	bl	8000b6c <__NVIC_GetPriorityGrouping>
 8000cb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	68b9      	ldr	r1, [r7, #8]
 8000cba:	6978      	ldr	r0, [r7, #20]
 8000cbc:	f7ff ff8e 	bl	8000bdc <NVIC_EncodePriority>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff5d 	bl	8000b88 <__NVIC_SetPriority>
}
 8000cce:	bf00      	nop
 8000cd0:	3718      	adds	r7, #24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff ffb0 	bl	8000c44 <SysTick_Config>
 8000ce4:	4603      	mov	r3, r0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
	...

08000cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b087      	sub	sp, #28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cfe:	e14e      	b.n	8000f9e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	2101      	movs	r1, #1
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f000 8140 	beq.w	8000f98 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f003 0303 	and.w	r3, r3, #3
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d005      	beq.n	8000d30 <HAL_GPIO_Init+0x40>
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f003 0303 	and.w	r3, r3, #3
 8000d2c:	2b02      	cmp	r3, #2
 8000d2e:	d130      	bne.n	8000d92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	2203      	movs	r2, #3
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	4013      	ands	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	68da      	ldr	r2, [r3, #12]
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d66:	2201      	movs	r2, #1
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	4013      	ands	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	091b      	lsrs	r3, r3, #4
 8000d7c:	f003 0201 	and.w	r2, r3, #1
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f003 0303 	and.w	r3, r3, #3
 8000d9a:	2b03      	cmp	r3, #3
 8000d9c:	d017      	beq.n	8000dce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	2203      	movs	r2, #3
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	43db      	mvns	r3, r3
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	4013      	ands	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	689a      	ldr	r2, [r3, #8]
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f003 0303 	and.w	r3, r3, #3
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d123      	bne.n	8000e22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	08da      	lsrs	r2, r3, #3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	3208      	adds	r2, #8
 8000de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000de6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	220f      	movs	r2, #15
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	43db      	mvns	r3, r3
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	691a      	ldr	r2, [r3, #16]
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	f003 0307 	and.w	r3, r3, #7
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	08da      	lsrs	r2, r3, #3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3208      	adds	r2, #8
 8000e1c:	6939      	ldr	r1, [r7, #16]
 8000e1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43db      	mvns	r3, r3
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	4013      	ands	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f003 0203 	and.w	r2, r3, #3
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f000 809a 	beq.w	8000f98 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e64:	4b55      	ldr	r3, [pc, #340]	@ (8000fbc <HAL_GPIO_Init+0x2cc>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	4a54      	ldr	r2, [pc, #336]	@ (8000fbc <HAL_GPIO_Init+0x2cc>)
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	6193      	str	r3, [r2, #24]
 8000e70:	4b52      	ldr	r3, [pc, #328]	@ (8000fbc <HAL_GPIO_Init+0x2cc>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e7c:	4a50      	ldr	r2, [pc, #320]	@ (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	089b      	lsrs	r3, r3, #2
 8000e82:	3302      	adds	r3, #2
 8000e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	f003 0303 	and.w	r3, r3, #3
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	220f      	movs	r2, #15
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000ea6:	d013      	beq.n	8000ed0 <HAL_GPIO_Init+0x1e0>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4a46      	ldr	r2, [pc, #280]	@ (8000fc4 <HAL_GPIO_Init+0x2d4>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d00d      	beq.n	8000ecc <HAL_GPIO_Init+0x1dc>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a45      	ldr	r2, [pc, #276]	@ (8000fc8 <HAL_GPIO_Init+0x2d8>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d007      	beq.n	8000ec8 <HAL_GPIO_Init+0x1d8>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4a44      	ldr	r2, [pc, #272]	@ (8000fcc <HAL_GPIO_Init+0x2dc>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d101      	bne.n	8000ec4 <HAL_GPIO_Init+0x1d4>
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	e006      	b.n	8000ed2 <HAL_GPIO_Init+0x1e2>
 8000ec4:	2305      	movs	r3, #5
 8000ec6:	e004      	b.n	8000ed2 <HAL_GPIO_Init+0x1e2>
 8000ec8:	2302      	movs	r3, #2
 8000eca:	e002      	b.n	8000ed2 <HAL_GPIO_Init+0x1e2>
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e000      	b.n	8000ed2 <HAL_GPIO_Init+0x1e2>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	697a      	ldr	r2, [r7, #20]
 8000ed4:	f002 0203 	and.w	r2, r2, #3
 8000ed8:	0092      	lsls	r2, r2, #2
 8000eda:	4093      	lsls	r3, r2
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ee2:	4937      	ldr	r1, [pc, #220]	@ (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	089b      	lsrs	r3, r3, #2
 8000ee8:	3302      	adds	r3, #2
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ef0:	4b37      	ldr	r3, [pc, #220]	@ (8000fd0 <HAL_GPIO_Init+0x2e0>)
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d003      	beq.n	8000f14 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f14:	4a2e      	ldr	r2, [pc, #184]	@ (8000fd0 <HAL_GPIO_Init+0x2e0>)
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd0 <HAL_GPIO_Init+0x2e0>)
 8000f1c:	68db      	ldr	r3, [r3, #12]
 8000f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	43db      	mvns	r3, r3
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	4013      	ands	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d003      	beq.n	8000f3e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f3e:	4a24      	ldr	r2, [pc, #144]	@ (8000fd0 <HAL_GPIO_Init+0x2e0>)
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f44:	4b22      	ldr	r3, [pc, #136]	@ (8000fd0 <HAL_GPIO_Init+0x2e0>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d003      	beq.n	8000f68 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f68:	4a19      	ldr	r2, [pc, #100]	@ (8000fd0 <HAL_GPIO_Init+0x2e0>)
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f6e:	4b18      	ldr	r3, [pc, #96]	@ (8000fd0 <HAL_GPIO_Init+0x2e0>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	43db      	mvns	r3, r3
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d003      	beq.n	8000f92 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f92:	4a0f      	ldr	r2, [pc, #60]	@ (8000fd0 <HAL_GPIO_Init+0x2e0>)
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	f47f aea9 	bne.w	8000d00 <HAL_GPIO_Init+0x10>
  }
}
 8000fae:	bf00      	nop
 8000fb0:	bf00      	nop
 8000fb2:	371c      	adds	r7, #28
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40010000 	.word	0x40010000
 8000fc4:	48000400 	.word	0x48000400
 8000fc8:	48000800 	.word	0x48000800
 8000fcc:	48000c00 	.word	0x48000c00
 8000fd0:	40010400 	.word	0x40010400

08000fd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000fe0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000fe4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fe6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000fea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d102      	bne.n	8000ffa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	f001 b823 	b.w	8002040 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ffa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ffe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	2b00      	cmp	r3, #0
 800100c:	f000 817d 	beq.w	800130a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001010:	4bbc      	ldr	r3, [pc, #752]	@ (8001304 <HAL_RCC_OscConfig+0x330>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 030c 	and.w	r3, r3, #12
 8001018:	2b04      	cmp	r3, #4
 800101a:	d00c      	beq.n	8001036 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800101c:	4bb9      	ldr	r3, [pc, #740]	@ (8001304 <HAL_RCC_OscConfig+0x330>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 030c 	and.w	r3, r3, #12
 8001024:	2b08      	cmp	r3, #8
 8001026:	d15c      	bne.n	80010e2 <HAL_RCC_OscConfig+0x10e>
 8001028:	4bb6      	ldr	r3, [pc, #728]	@ (8001304 <HAL_RCC_OscConfig+0x330>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001030:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001034:	d155      	bne.n	80010e2 <HAL_RCC_OscConfig+0x10e>
 8001036:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800103a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800103e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001042:	fa93 f3a3 	rbit	r3, r3
 8001046:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800104a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800104e:	fab3 f383 	clz	r3, r3
 8001052:	b2db      	uxtb	r3, r3
 8001054:	095b      	lsrs	r3, r3, #5
 8001056:	b2db      	uxtb	r3, r3
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b01      	cmp	r3, #1
 8001060:	d102      	bne.n	8001068 <HAL_RCC_OscConfig+0x94>
 8001062:	4ba8      	ldr	r3, [pc, #672]	@ (8001304 <HAL_RCC_OscConfig+0x330>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	e015      	b.n	8001094 <HAL_RCC_OscConfig+0xc0>
 8001068:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800106c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001070:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001074:	fa93 f3a3 	rbit	r3, r3
 8001078:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800107c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001080:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001084:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001088:	fa93 f3a3 	rbit	r3, r3
 800108c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001090:	4b9c      	ldr	r3, [pc, #624]	@ (8001304 <HAL_RCC_OscConfig+0x330>)
 8001092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001094:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001098:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800109c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80010a0:	fa92 f2a2 	rbit	r2, r2
 80010a4:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80010a8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80010ac:	fab2 f282 	clz	r2, r2
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	f042 0220 	orr.w	r2, r2, #32
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	f002 021f 	and.w	r2, r2, #31
 80010bc:	2101      	movs	r1, #1
 80010be:	fa01 f202 	lsl.w	r2, r1, r2
 80010c2:	4013      	ands	r3, r2
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f000 811f 	beq.w	8001308 <HAL_RCC_OscConfig+0x334>
 80010ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f040 8116 	bne.w	8001308 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	f000 bfaf 	b.w	8002040 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010f2:	d106      	bne.n	8001102 <HAL_RCC_OscConfig+0x12e>
 80010f4:	4b83      	ldr	r3, [pc, #524]	@ (8001304 <HAL_RCC_OscConfig+0x330>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a82      	ldr	r2, [pc, #520]	@ (8001304 <HAL_RCC_OscConfig+0x330>)
 80010fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010fe:	6013      	str	r3, [r2, #0]
 8001100:	e036      	b.n	8001170 <HAL_RCC_OscConfig+0x19c>
 8001102:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001106:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d10c      	bne.n	800112c <HAL_RCC_OscConfig+0x158>
 8001112:	4b7c      	ldr	r3, [pc, #496]	@ (8001304 <HAL_RCC_OscConfig+0x330>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a7b      	ldr	r2, [pc, #492]	@ (8001304 <HAL_RCC_OscConfig+0x330>)
 8001118:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800111c:	6013      	str	r3, [r2, #0]
 800111e:	4b79      	ldr	r3, [pc, #484]	@ (8001304 <HAL_RCC_OscConfig+0x330>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a78      	ldr	r2, [pc, #480]	@ (8001304 <HAL_RCC_OscConfig+0x330>)
 8001124:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	e021      	b.n	8001170 <HAL_RCC_OscConfig+0x19c>
 800112c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001130:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800113c:	d10c      	bne.n	8001158 <HAL_RCC_OscConfig+0x184>
 800113e:	4b71      	ldr	r3, [pc, #452]	@ (8001304 <HAL_RCC_OscConfig+0x330>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a70      	ldr	r2, [pc, #448]	@ (8001304 <HAL_RCC_OscConfig+0x330>)
 8001144:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	4b6e      	ldr	r3, [pc, #440]	@ (8001304 <HAL_RCC_OscConfig+0x330>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a6d      	ldr	r2, [pc, #436]	@ (8001304 <HAL_RCC_OscConfig+0x330>)
 8001150:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	e00b      	b.n	8001170 <HAL_RCC_OscConfig+0x19c>
 8001158:	4b6a      	ldr	r3, [pc, #424]	@ (8001304 <HAL_RCC_OscConfig+0x330>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a69      	ldr	r2, [pc, #420]	@ (8001304 <HAL_RCC_OscConfig+0x330>)
 800115e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001162:	6013      	str	r3, [r2, #0]
 8001164:	4b67      	ldr	r3, [pc, #412]	@ (8001304 <HAL_RCC_OscConfig+0x330>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a66      	ldr	r2, [pc, #408]	@ (8001304 <HAL_RCC_OscConfig+0x330>)
 800116a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800116e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001170:	4b64      	ldr	r3, [pc, #400]	@ (8001304 <HAL_RCC_OscConfig+0x330>)
 8001172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001174:	f023 020f 	bic.w	r2, r3, #15
 8001178:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800117c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	495f      	ldr	r1, [pc, #380]	@ (8001304 <HAL_RCC_OscConfig+0x330>)
 8001186:	4313      	orrs	r3, r2
 8001188:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800118a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800118e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d059      	beq.n	800124e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800119a:	f7ff fc93 	bl	8000ac4 <HAL_GetTick>
 800119e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a2:	e00a      	b.n	80011ba <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011a4:	f7ff fc8e 	bl	8000ac4 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b64      	cmp	r3, #100	@ 0x64
 80011b2:	d902      	bls.n	80011ba <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	f000 bf43 	b.w	8002040 <HAL_RCC_OscConfig+0x106c>
 80011ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80011be:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80011c6:	fa93 f3a3 	rbit	r3, r3
 80011ca:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80011ce:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d2:	fab3 f383 	clz	r3, r3
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	095b      	lsrs	r3, r3, #5
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d102      	bne.n	80011ec <HAL_RCC_OscConfig+0x218>
 80011e6:	4b47      	ldr	r3, [pc, #284]	@ (8001304 <HAL_RCC_OscConfig+0x330>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	e015      	b.n	8001218 <HAL_RCC_OscConfig+0x244>
 80011ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80011f0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80011f8:	fa93 f3a3 	rbit	r3, r3
 80011fc:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001200:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001204:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001208:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800120c:	fa93 f3a3 	rbit	r3, r3
 8001210:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001214:	4b3b      	ldr	r3, [pc, #236]	@ (8001304 <HAL_RCC_OscConfig+0x330>)
 8001216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001218:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800121c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001220:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001224:	fa92 f2a2 	rbit	r2, r2
 8001228:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 800122c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001230:	fab2 f282 	clz	r2, r2
 8001234:	b2d2      	uxtb	r2, r2
 8001236:	f042 0220 	orr.w	r2, r2, #32
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	f002 021f 	and.w	r2, r2, #31
 8001240:	2101      	movs	r1, #1
 8001242:	fa01 f202 	lsl.w	r2, r1, r2
 8001246:	4013      	ands	r3, r2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d0ab      	beq.n	80011a4 <HAL_RCC_OscConfig+0x1d0>
 800124c:	e05d      	b.n	800130a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124e:	f7ff fc39 	bl	8000ac4 <HAL_GetTick>
 8001252:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001256:	e00a      	b.n	800126e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001258:	f7ff fc34 	bl	8000ac4 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	2b64      	cmp	r3, #100	@ 0x64
 8001266:	d902      	bls.n	800126e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	f000 bee9 	b.w	8002040 <HAL_RCC_OscConfig+0x106c>
 800126e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001272:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001276:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800127a:	fa93 f3a3 	rbit	r3, r3
 800127e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001282:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001286:	fab3 f383 	clz	r3, r3
 800128a:	b2db      	uxtb	r3, r3
 800128c:	095b      	lsrs	r3, r3, #5
 800128e:	b2db      	uxtb	r3, r3
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b01      	cmp	r3, #1
 8001298:	d102      	bne.n	80012a0 <HAL_RCC_OscConfig+0x2cc>
 800129a:	4b1a      	ldr	r3, [pc, #104]	@ (8001304 <HAL_RCC_OscConfig+0x330>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	e015      	b.n	80012cc <HAL_RCC_OscConfig+0x2f8>
 80012a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80012a4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80012ac:	fa93 f3a3 	rbit	r3, r3
 80012b0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80012b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80012b8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80012bc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80012c0:	fa93 f3a3 	rbit	r3, r3
 80012c4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80012c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001304 <HAL_RCC_OscConfig+0x330>)
 80012ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012cc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80012d0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80012d4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80012d8:	fa92 f2a2 	rbit	r2, r2
 80012dc:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80012e0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80012e4:	fab2 f282 	clz	r2, r2
 80012e8:	b2d2      	uxtb	r2, r2
 80012ea:	f042 0220 	orr.w	r2, r2, #32
 80012ee:	b2d2      	uxtb	r2, r2
 80012f0:	f002 021f 	and.w	r2, r2, #31
 80012f4:	2101      	movs	r1, #1
 80012f6:	fa01 f202 	lsl.w	r2, r1, r2
 80012fa:	4013      	ands	r3, r2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1ab      	bne.n	8001258 <HAL_RCC_OscConfig+0x284>
 8001300:	e003      	b.n	800130a <HAL_RCC_OscConfig+0x336>
 8001302:	bf00      	nop
 8001304:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800130a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800130e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	f000 817d 	beq.w	800161a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001320:	4ba6      	ldr	r3, [pc, #664]	@ (80015bc <HAL_RCC_OscConfig+0x5e8>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 030c 	and.w	r3, r3, #12
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00b      	beq.n	8001344 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800132c:	4ba3      	ldr	r3, [pc, #652]	@ (80015bc <HAL_RCC_OscConfig+0x5e8>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 030c 	and.w	r3, r3, #12
 8001334:	2b08      	cmp	r3, #8
 8001336:	d172      	bne.n	800141e <HAL_RCC_OscConfig+0x44a>
 8001338:	4ba0      	ldr	r3, [pc, #640]	@ (80015bc <HAL_RCC_OscConfig+0x5e8>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d16c      	bne.n	800141e <HAL_RCC_OscConfig+0x44a>
 8001344:	2302      	movs	r3, #2
 8001346:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800134a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800134e:	fa93 f3a3 	rbit	r3, r3
 8001352:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001356:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800135a:	fab3 f383 	clz	r3, r3
 800135e:	b2db      	uxtb	r3, r3
 8001360:	095b      	lsrs	r3, r3, #5
 8001362:	b2db      	uxtb	r3, r3
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2b01      	cmp	r3, #1
 800136c:	d102      	bne.n	8001374 <HAL_RCC_OscConfig+0x3a0>
 800136e:	4b93      	ldr	r3, [pc, #588]	@ (80015bc <HAL_RCC_OscConfig+0x5e8>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	e013      	b.n	800139c <HAL_RCC_OscConfig+0x3c8>
 8001374:	2302      	movs	r3, #2
 8001376:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800137e:	fa93 f3a3 	rbit	r3, r3
 8001382:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001386:	2302      	movs	r3, #2
 8001388:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800138c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001390:	fa93 f3a3 	rbit	r3, r3
 8001394:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001398:	4b88      	ldr	r3, [pc, #544]	@ (80015bc <HAL_RCC_OscConfig+0x5e8>)
 800139a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800139c:	2202      	movs	r2, #2
 800139e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80013a2:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80013a6:	fa92 f2a2 	rbit	r2, r2
 80013aa:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80013ae:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80013b2:	fab2 f282 	clz	r2, r2
 80013b6:	b2d2      	uxtb	r2, r2
 80013b8:	f042 0220 	orr.w	r2, r2, #32
 80013bc:	b2d2      	uxtb	r2, r2
 80013be:	f002 021f 	and.w	r2, r2, #31
 80013c2:	2101      	movs	r1, #1
 80013c4:	fa01 f202 	lsl.w	r2, r1, r2
 80013c8:	4013      	ands	r3, r2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d00a      	beq.n	80013e4 <HAL_RCC_OscConfig+0x410>
 80013ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d002      	beq.n	80013e4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	f000 be2e 	b.w	8002040 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e4:	4b75      	ldr	r3, [pc, #468]	@ (80015bc <HAL_RCC_OscConfig+0x5e8>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	21f8      	movs	r1, #248	@ 0xf8
 80013fa:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fe:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001402:	fa91 f1a1 	rbit	r1, r1
 8001406:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800140a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800140e:	fab1 f181 	clz	r1, r1
 8001412:	b2c9      	uxtb	r1, r1
 8001414:	408b      	lsls	r3, r1
 8001416:	4969      	ldr	r1, [pc, #420]	@ (80015bc <HAL_RCC_OscConfig+0x5e8>)
 8001418:	4313      	orrs	r3, r2
 800141a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800141c:	e0fd      	b.n	800161a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800141e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001422:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	2b00      	cmp	r3, #0
 800142c:	f000 8088 	beq.w	8001540 <HAL_RCC_OscConfig+0x56c>
 8001430:	2301      	movs	r3, #1
 8001432:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001436:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800143a:	fa93 f3a3 	rbit	r3, r3
 800143e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001442:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001446:	fab3 f383 	clz	r3, r3
 800144a:	b2db      	uxtb	r3, r3
 800144c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001450:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	461a      	mov	r2, r3
 8001458:	2301      	movs	r3, #1
 800145a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145c:	f7ff fb32 	bl	8000ac4 <HAL_GetTick>
 8001460:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001464:	e00a      	b.n	800147c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001466:	f7ff fb2d 	bl	8000ac4 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d902      	bls.n	800147c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	f000 bde2 	b.w	8002040 <HAL_RCC_OscConfig+0x106c>
 800147c:	2302      	movs	r3, #2
 800147e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001482:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001486:	fa93 f3a3 	rbit	r3, r3
 800148a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800148e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001492:	fab3 f383 	clz	r3, r3
 8001496:	b2db      	uxtb	r3, r3
 8001498:	095b      	lsrs	r3, r3, #5
 800149a:	b2db      	uxtb	r3, r3
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d102      	bne.n	80014ac <HAL_RCC_OscConfig+0x4d8>
 80014a6:	4b45      	ldr	r3, [pc, #276]	@ (80015bc <HAL_RCC_OscConfig+0x5e8>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	e013      	b.n	80014d4 <HAL_RCC_OscConfig+0x500>
 80014ac:	2302      	movs	r3, #2
 80014ae:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80014b6:	fa93 f3a3 	rbit	r3, r3
 80014ba:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80014be:	2302      	movs	r3, #2
 80014c0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80014c4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80014c8:	fa93 f3a3 	rbit	r3, r3
 80014cc:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80014d0:	4b3a      	ldr	r3, [pc, #232]	@ (80015bc <HAL_RCC_OscConfig+0x5e8>)
 80014d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d4:	2202      	movs	r2, #2
 80014d6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80014da:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80014de:	fa92 f2a2 	rbit	r2, r2
 80014e2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80014e6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80014ea:	fab2 f282 	clz	r2, r2
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	f042 0220 	orr.w	r2, r2, #32
 80014f4:	b2d2      	uxtb	r2, r2
 80014f6:	f002 021f 	and.w	r2, r2, #31
 80014fa:	2101      	movs	r1, #1
 80014fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001500:	4013      	ands	r3, r2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0af      	beq.n	8001466 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001506:	4b2d      	ldr	r3, [pc, #180]	@ (80015bc <HAL_RCC_OscConfig+0x5e8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800150e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001512:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	21f8      	movs	r1, #248	@ 0xf8
 800151c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001520:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001524:	fa91 f1a1 	rbit	r1, r1
 8001528:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800152c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001530:	fab1 f181 	clz	r1, r1
 8001534:	b2c9      	uxtb	r1, r1
 8001536:	408b      	lsls	r3, r1
 8001538:	4920      	ldr	r1, [pc, #128]	@ (80015bc <HAL_RCC_OscConfig+0x5e8>)
 800153a:	4313      	orrs	r3, r2
 800153c:	600b      	str	r3, [r1, #0]
 800153e:	e06c      	b.n	800161a <HAL_RCC_OscConfig+0x646>
 8001540:	2301      	movs	r3, #1
 8001542:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001546:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800154a:	fa93 f3a3 	rbit	r3, r3
 800154e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001552:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001556:	fab3 f383 	clz	r3, r3
 800155a:	b2db      	uxtb	r3, r3
 800155c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001560:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	461a      	mov	r2, r3
 8001568:	2300      	movs	r3, #0
 800156a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156c:	f7ff faaa 	bl	8000ac4 <HAL_GetTick>
 8001570:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001574:	e00a      	b.n	800158c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001576:	f7ff faa5 	bl	8000ac4 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d902      	bls.n	800158c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	f000 bd5a 	b.w	8002040 <HAL_RCC_OscConfig+0x106c>
 800158c:	2302      	movs	r3, #2
 800158e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001592:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001596:	fa93 f3a3 	rbit	r3, r3
 800159a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800159e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a2:	fab3 f383 	clz	r3, r3
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	095b      	lsrs	r3, r3, #5
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d104      	bne.n	80015c0 <HAL_RCC_OscConfig+0x5ec>
 80015b6:	4b01      	ldr	r3, [pc, #4]	@ (80015bc <HAL_RCC_OscConfig+0x5e8>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	e015      	b.n	80015e8 <HAL_RCC_OscConfig+0x614>
 80015bc:	40021000 	.word	0x40021000
 80015c0:	2302      	movs	r3, #2
 80015c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80015ca:	fa93 f3a3 	rbit	r3, r3
 80015ce:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80015d2:	2302      	movs	r3, #2
 80015d4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80015d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015dc:	fa93 f3a3 	rbit	r3, r3
 80015e0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80015e4:	4bc8      	ldr	r3, [pc, #800]	@ (8001908 <HAL_RCC_OscConfig+0x934>)
 80015e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e8:	2202      	movs	r2, #2
 80015ea:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80015ee:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80015f2:	fa92 f2a2 	rbit	r2, r2
 80015f6:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80015fa:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80015fe:	fab2 f282 	clz	r2, r2
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	f042 0220 	orr.w	r2, r2, #32
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	f002 021f 	and.w	r2, r2, #31
 800160e:	2101      	movs	r1, #1
 8001610:	fa01 f202 	lsl.w	r2, r1, r2
 8001614:	4013      	ands	r3, r2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1ad      	bne.n	8001576 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800161a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800161e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0308 	and.w	r3, r3, #8
 800162a:	2b00      	cmp	r3, #0
 800162c:	f000 8110 	beq.w	8001850 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001630:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001634:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d079      	beq.n	8001734 <HAL_RCC_OscConfig+0x760>
 8001640:	2301      	movs	r3, #1
 8001642:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001646:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800164a:	fa93 f3a3 	rbit	r3, r3
 800164e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001652:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001656:	fab3 f383 	clz	r3, r3
 800165a:	b2db      	uxtb	r3, r3
 800165c:	461a      	mov	r2, r3
 800165e:	4bab      	ldr	r3, [pc, #684]	@ (800190c <HAL_RCC_OscConfig+0x938>)
 8001660:	4413      	add	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	461a      	mov	r2, r3
 8001666:	2301      	movs	r3, #1
 8001668:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166a:	f7ff fa2b 	bl	8000ac4 <HAL_GetTick>
 800166e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001672:	e00a      	b.n	800168a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001674:	f7ff fa26 	bl	8000ac4 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d902      	bls.n	800168a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	f000 bcdb 	b.w	8002040 <HAL_RCC_OscConfig+0x106c>
 800168a:	2302      	movs	r3, #2
 800168c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001690:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001694:	fa93 f3a3 	rbit	r3, r3
 8001698:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800169c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016a0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80016a4:	2202      	movs	r2, #2
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016ac:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	fa93 f2a3 	rbit	r2, r3
 80016b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80016c8:	2202      	movs	r2, #2
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	fa93 f2a3 	rbit	r2, r3
 80016da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016de:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80016e2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016e4:	4b88      	ldr	r3, [pc, #544]	@ (8001908 <HAL_RCC_OscConfig+0x934>)
 80016e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016ec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80016f0:	2102      	movs	r1, #2
 80016f2:	6019      	str	r1, [r3, #0]
 80016f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016f8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	fa93 f1a3 	rbit	r1, r3
 8001702:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001706:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800170a:	6019      	str	r1, [r3, #0]
  return result;
 800170c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001710:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	fab3 f383 	clz	r3, r3
 800171a:	b2db      	uxtb	r3, r3
 800171c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001720:	b2db      	uxtb	r3, r3
 8001722:	f003 031f 	and.w	r3, r3, #31
 8001726:	2101      	movs	r1, #1
 8001728:	fa01 f303 	lsl.w	r3, r1, r3
 800172c:	4013      	ands	r3, r2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0a0      	beq.n	8001674 <HAL_RCC_OscConfig+0x6a0>
 8001732:	e08d      	b.n	8001850 <HAL_RCC_OscConfig+0x87c>
 8001734:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001738:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800173c:	2201      	movs	r2, #1
 800173e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001740:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001744:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	fa93 f2a3 	rbit	r2, r3
 800174e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001752:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001756:	601a      	str	r2, [r3, #0]
  return result;
 8001758:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800175c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001760:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001762:	fab3 f383 	clz	r3, r3
 8001766:	b2db      	uxtb	r3, r3
 8001768:	461a      	mov	r2, r3
 800176a:	4b68      	ldr	r3, [pc, #416]	@ (800190c <HAL_RCC_OscConfig+0x938>)
 800176c:	4413      	add	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	461a      	mov	r2, r3
 8001772:	2300      	movs	r3, #0
 8001774:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001776:	f7ff f9a5 	bl	8000ac4 <HAL_GetTick>
 800177a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800177e:	e00a      	b.n	8001796 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001780:	f7ff f9a0 	bl	8000ac4 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d902      	bls.n	8001796 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	f000 bc55 	b.w	8002040 <HAL_RCC_OscConfig+0x106c>
 8001796:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800179a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800179e:	2202      	movs	r2, #2
 80017a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017a6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	fa93 f2a3 	rbit	r2, r3
 80017b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017b4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017be:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80017c2:	2202      	movs	r2, #2
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ca:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	fa93 f2a3 	rbit	r2, r3
 80017d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017e2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80017e6:	2202      	movs	r2, #2
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ee:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	fa93 f2a3 	rbit	r2, r3
 80017f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017fc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001800:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001802:	4b41      	ldr	r3, [pc, #260]	@ (8001908 <HAL_RCC_OscConfig+0x934>)
 8001804:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001806:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800180a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800180e:	2102      	movs	r1, #2
 8001810:	6019      	str	r1, [r3, #0]
 8001812:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001816:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	fa93 f1a3 	rbit	r1, r3
 8001820:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001824:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001828:	6019      	str	r1, [r3, #0]
  return result;
 800182a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800182e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	fab3 f383 	clz	r3, r3
 8001838:	b2db      	uxtb	r3, r3
 800183a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800183e:	b2db      	uxtb	r3, r3
 8001840:	f003 031f 	and.w	r3, r3, #31
 8001844:	2101      	movs	r1, #1
 8001846:	fa01 f303 	lsl.w	r3, r1, r3
 800184a:	4013      	ands	r3, r2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d197      	bne.n	8001780 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001850:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001854:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	2b00      	cmp	r3, #0
 8001862:	f000 81a1 	beq.w	8001ba8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001866:	2300      	movs	r3, #0
 8001868:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800186c:	4b26      	ldr	r3, [pc, #152]	@ (8001908 <HAL_RCC_OscConfig+0x934>)
 800186e:	69db      	ldr	r3, [r3, #28]
 8001870:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d116      	bne.n	80018a6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001878:	4b23      	ldr	r3, [pc, #140]	@ (8001908 <HAL_RCC_OscConfig+0x934>)
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	4a22      	ldr	r2, [pc, #136]	@ (8001908 <HAL_RCC_OscConfig+0x934>)
 800187e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001882:	61d3      	str	r3, [r2, #28]
 8001884:	4b20      	ldr	r3, [pc, #128]	@ (8001908 <HAL_RCC_OscConfig+0x934>)
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800188c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001890:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800189a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800189e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80018a0:	2301      	movs	r3, #1
 80018a2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001910 <HAL_RCC_OscConfig+0x93c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d11a      	bne.n	80018e8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018b2:	4b17      	ldr	r3, [pc, #92]	@ (8001910 <HAL_RCC_OscConfig+0x93c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a16      	ldr	r2, [pc, #88]	@ (8001910 <HAL_RCC_OscConfig+0x93c>)
 80018b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018bc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018be:	f7ff f901 	bl	8000ac4 <HAL_GetTick>
 80018c2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c6:	e009      	b.n	80018dc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c8:	f7ff f8fc 	bl	8000ac4 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b64      	cmp	r3, #100	@ 0x64
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e3b1      	b.n	8002040 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001910 <HAL_RCC_OscConfig+0x93c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0ef      	beq.n	80018c8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d10d      	bne.n	8001914 <HAL_RCC_OscConfig+0x940>
 80018f8:	4b03      	ldr	r3, [pc, #12]	@ (8001908 <HAL_RCC_OscConfig+0x934>)
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	4a02      	ldr	r2, [pc, #8]	@ (8001908 <HAL_RCC_OscConfig+0x934>)
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	6213      	str	r3, [r2, #32]
 8001904:	e03c      	b.n	8001980 <HAL_RCC_OscConfig+0x9ac>
 8001906:	bf00      	nop
 8001908:	40021000 	.word	0x40021000
 800190c:	10908120 	.word	0x10908120
 8001910:	40007000 	.word	0x40007000
 8001914:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001918:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d10c      	bne.n	800193e <HAL_RCC_OscConfig+0x96a>
 8001924:	4bc1      	ldr	r3, [pc, #772]	@ (8001c2c <HAL_RCC_OscConfig+0xc58>)
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	4ac0      	ldr	r2, [pc, #768]	@ (8001c2c <HAL_RCC_OscConfig+0xc58>)
 800192a:	f023 0301 	bic.w	r3, r3, #1
 800192e:	6213      	str	r3, [r2, #32]
 8001930:	4bbe      	ldr	r3, [pc, #760]	@ (8001c2c <HAL_RCC_OscConfig+0xc58>)
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	4abd      	ldr	r2, [pc, #756]	@ (8001c2c <HAL_RCC_OscConfig+0xc58>)
 8001936:	f023 0304 	bic.w	r3, r3, #4
 800193a:	6213      	str	r3, [r2, #32]
 800193c:	e020      	b.n	8001980 <HAL_RCC_OscConfig+0x9ac>
 800193e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001942:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	2b05      	cmp	r3, #5
 800194c:	d10c      	bne.n	8001968 <HAL_RCC_OscConfig+0x994>
 800194e:	4bb7      	ldr	r3, [pc, #732]	@ (8001c2c <HAL_RCC_OscConfig+0xc58>)
 8001950:	6a1b      	ldr	r3, [r3, #32]
 8001952:	4ab6      	ldr	r2, [pc, #728]	@ (8001c2c <HAL_RCC_OscConfig+0xc58>)
 8001954:	f043 0304 	orr.w	r3, r3, #4
 8001958:	6213      	str	r3, [r2, #32]
 800195a:	4bb4      	ldr	r3, [pc, #720]	@ (8001c2c <HAL_RCC_OscConfig+0xc58>)
 800195c:	6a1b      	ldr	r3, [r3, #32]
 800195e:	4ab3      	ldr	r2, [pc, #716]	@ (8001c2c <HAL_RCC_OscConfig+0xc58>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	6213      	str	r3, [r2, #32]
 8001966:	e00b      	b.n	8001980 <HAL_RCC_OscConfig+0x9ac>
 8001968:	4bb0      	ldr	r3, [pc, #704]	@ (8001c2c <HAL_RCC_OscConfig+0xc58>)
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	4aaf      	ldr	r2, [pc, #700]	@ (8001c2c <HAL_RCC_OscConfig+0xc58>)
 800196e:	f023 0301 	bic.w	r3, r3, #1
 8001972:	6213      	str	r3, [r2, #32]
 8001974:	4bad      	ldr	r3, [pc, #692]	@ (8001c2c <HAL_RCC_OscConfig+0xc58>)
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	4aac      	ldr	r2, [pc, #688]	@ (8001c2c <HAL_RCC_OscConfig+0xc58>)
 800197a:	f023 0304 	bic.w	r3, r3, #4
 800197e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001980:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001984:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 8081 	beq.w	8001a94 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001992:	f7ff f897 	bl	8000ac4 <HAL_GetTick>
 8001996:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800199a:	e00b      	b.n	80019b4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800199c:	f7ff f892 	bl	8000ac4 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e345      	b.n	8002040 <HAL_RCC_OscConfig+0x106c>
 80019b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019b8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80019bc:	2202      	movs	r2, #2
 80019be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019c4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	fa93 f2a3 	rbit	r2, r3
 80019ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019d2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019dc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80019e0:	2202      	movs	r2, #2
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019e8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	fa93 f2a3 	rbit	r2, r3
 80019f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019f6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80019fa:	601a      	str	r2, [r3, #0]
  return result;
 80019fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a00:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001a04:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a06:	fab3 f383 	clz	r3, r3
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	095b      	lsrs	r3, r3, #5
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	f043 0302 	orr.w	r3, r3, #2
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d102      	bne.n	8001a20 <HAL_RCC_OscConfig+0xa4c>
 8001a1a:	4b84      	ldr	r3, [pc, #528]	@ (8001c2c <HAL_RCC_OscConfig+0xc58>)
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	e013      	b.n	8001a48 <HAL_RCC_OscConfig+0xa74>
 8001a20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a24:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001a28:	2202      	movs	r2, #2
 8001a2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a30:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	fa93 f2a3 	rbit	r2, r3
 8001a3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a3e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	4b79      	ldr	r3, [pc, #484]	@ (8001c2c <HAL_RCC_OscConfig+0xc58>)
 8001a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a48:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a4c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001a50:	2102      	movs	r1, #2
 8001a52:	6011      	str	r1, [r2, #0]
 8001a54:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a58:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001a5c:	6812      	ldr	r2, [r2, #0]
 8001a5e:	fa92 f1a2 	rbit	r1, r2
 8001a62:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a66:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001a6a:	6011      	str	r1, [r2, #0]
  return result;
 8001a6c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a70:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001a74:	6812      	ldr	r2, [r2, #0]
 8001a76:	fab2 f282 	clz	r2, r2
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	f002 021f 	and.w	r2, r2, #31
 8001a86:	2101      	movs	r1, #1
 8001a88:	fa01 f202 	lsl.w	r2, r1, r2
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d084      	beq.n	800199c <HAL_RCC_OscConfig+0x9c8>
 8001a92:	e07f      	b.n	8001b94 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a94:	f7ff f816 	bl	8000ac4 <HAL_GetTick>
 8001a98:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a9c:	e00b      	b.n	8001ab6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a9e:	f7ff f811 	bl	8000ac4 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e2c4      	b.n	8002040 <HAL_RCC_OscConfig+0x106c>
 8001ab6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aba:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001abe:	2202      	movs	r2, #2
 8001ac0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ac6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	fa93 f2a3 	rbit	r2, r3
 8001ad0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ad4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ade:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aea:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	fa93 f2a3 	rbit	r2, r3
 8001af4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001af8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001afc:	601a      	str	r2, [r3, #0]
  return result;
 8001afe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b02:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001b06:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b08:	fab3 f383 	clz	r3, r3
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	095b      	lsrs	r3, r3, #5
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	f043 0302 	orr.w	r3, r3, #2
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d102      	bne.n	8001b22 <HAL_RCC_OscConfig+0xb4e>
 8001b1c:	4b43      	ldr	r3, [pc, #268]	@ (8001c2c <HAL_RCC_OscConfig+0xc58>)
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	e013      	b.n	8001b4a <HAL_RCC_OscConfig+0xb76>
 8001b22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b26:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b32:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	fa93 f2a3 	rbit	r2, r3
 8001b3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b40:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	4b39      	ldr	r3, [pc, #228]	@ (8001c2c <HAL_RCC_OscConfig+0xc58>)
 8001b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b4e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001b52:	2102      	movs	r1, #2
 8001b54:	6011      	str	r1, [r2, #0]
 8001b56:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b5a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001b5e:	6812      	ldr	r2, [r2, #0]
 8001b60:	fa92 f1a2 	rbit	r1, r2
 8001b64:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b68:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001b6c:	6011      	str	r1, [r2, #0]
  return result;
 8001b6e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b72:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001b76:	6812      	ldr	r2, [r2, #0]
 8001b78:	fab2 f282 	clz	r2, r2
 8001b7c:	b2d2      	uxtb	r2, r2
 8001b7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	f002 021f 	and.w	r2, r2, #31
 8001b88:	2101      	movs	r1, #1
 8001b8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b8e:	4013      	ands	r3, r2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d184      	bne.n	8001a9e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b94:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d105      	bne.n	8001ba8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b9c:	4b23      	ldr	r3, [pc, #140]	@ (8001c2c <HAL_RCC_OscConfig+0xc58>)
 8001b9e:	69db      	ldr	r3, [r3, #28]
 8001ba0:	4a22      	ldr	r2, [pc, #136]	@ (8001c2c <HAL_RCC_OscConfig+0xc58>)
 8001ba2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ba6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ba8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	69db      	ldr	r3, [r3, #28]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 8242 	beq.w	800203e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bba:	4b1c      	ldr	r3, [pc, #112]	@ (8001c2c <HAL_RCC_OscConfig+0xc58>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 030c 	and.w	r3, r3, #12
 8001bc2:	2b08      	cmp	r3, #8
 8001bc4:	f000 8213 	beq.w	8001fee <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bcc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	f040 8162 	bne.w	8001e9e <HAL_RCC_OscConfig+0xeca>
 8001bda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bde:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001be2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001be6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bec:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	fa93 f2a3 	rbit	r2, r3
 8001bf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bfa:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001bfe:	601a      	str	r2, [r3, #0]
  return result;
 8001c00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c04:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001c08:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c0a:	fab3 f383 	clz	r3, r3
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c14:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c20:	f7fe ff50 	bl	8000ac4 <HAL_GetTick>
 8001c24:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c28:	e00c      	b.n	8001c44 <HAL_RCC_OscConfig+0xc70>
 8001c2a:	bf00      	nop
 8001c2c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c30:	f7fe ff48 	bl	8000ac4 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e1fd      	b.n	8002040 <HAL_RCC_OscConfig+0x106c>
 8001c44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c48:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001c4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c56:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	fa93 f2a3 	rbit	r2, r3
 8001c60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c64:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001c68:	601a      	str	r2, [r3, #0]
  return result;
 8001c6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c6e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001c72:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c74:	fab3 f383 	clz	r3, r3
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	095b      	lsrs	r3, r3, #5
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d102      	bne.n	8001c8e <HAL_RCC_OscConfig+0xcba>
 8001c88:	4bb0      	ldr	r3, [pc, #704]	@ (8001f4c <HAL_RCC_OscConfig+0xf78>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	e027      	b.n	8001cde <HAL_RCC_OscConfig+0xd0a>
 8001c8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c92:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001c96:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ca0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	fa93 f2a3 	rbit	r2, r3
 8001caa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cae:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cb8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001cbc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cc6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	fa93 f2a3 	rbit	r2, r3
 8001cd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cd4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	4b9c      	ldr	r3, [pc, #624]	@ (8001f4c <HAL_RCC_OscConfig+0xf78>)
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cde:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ce2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001ce6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001cea:	6011      	str	r1, [r2, #0]
 8001cec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001cf0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001cf4:	6812      	ldr	r2, [r2, #0]
 8001cf6:	fa92 f1a2 	rbit	r1, r2
 8001cfa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001cfe:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001d02:	6011      	str	r1, [r2, #0]
  return result;
 8001d04:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d08:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001d0c:	6812      	ldr	r2, [r2, #0]
 8001d0e:	fab2 f282 	clz	r2, r2
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	f042 0220 	orr.w	r2, r2, #32
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	f002 021f 	and.w	r2, r2, #31
 8001d1e:	2101      	movs	r1, #1
 8001d20:	fa01 f202 	lsl.w	r2, r1, r2
 8001d24:	4013      	ands	r3, r2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d182      	bne.n	8001c30 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d2a:	4b88      	ldr	r3, [pc, #544]	@ (8001f4c <HAL_RCC_OscConfig+0xf78>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001d32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001d3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d42:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	430b      	orrs	r3, r1
 8001d4c:	497f      	ldr	r1, [pc, #508]	@ (8001f4c <HAL_RCC_OscConfig+0xf78>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	604b      	str	r3, [r1, #4]
 8001d52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d56:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001d5a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001d5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d64:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	fa93 f2a3 	rbit	r2, r3
 8001d6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d72:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001d76:	601a      	str	r2, [r3, #0]
  return result;
 8001d78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d7c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001d80:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d82:	fab3 f383 	clz	r3, r3
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d8c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	461a      	mov	r2, r3
 8001d94:	2301      	movs	r3, #1
 8001d96:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d98:	f7fe fe94 	bl	8000ac4 <HAL_GetTick>
 8001d9c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001da0:	e009      	b.n	8001db6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da2:	f7fe fe8f 	bl	8000ac4 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e144      	b.n	8002040 <HAL_RCC_OscConfig+0x106c>
 8001db6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dba:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001dbe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001dc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dc8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	fa93 f2a3 	rbit	r2, r3
 8001dd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dd6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001dda:	601a      	str	r2, [r3, #0]
  return result;
 8001ddc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001de0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001de4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001de6:	fab3 f383 	clz	r3, r3
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	095b      	lsrs	r3, r3, #5
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d102      	bne.n	8001e00 <HAL_RCC_OscConfig+0xe2c>
 8001dfa:	4b54      	ldr	r3, [pc, #336]	@ (8001f4c <HAL_RCC_OscConfig+0xf78>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	e027      	b.n	8001e50 <HAL_RCC_OscConfig+0xe7c>
 8001e00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e04:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001e08:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e12:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	fa93 f2a3 	rbit	r2, r3
 8001e1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e20:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e2a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001e2e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e38:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	fa93 f2a3 	rbit	r2, r3
 8001e42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e46:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	4b3f      	ldr	r3, [pc, #252]	@ (8001f4c <HAL_RCC_OscConfig+0xf78>)
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e50:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e54:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001e58:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001e5c:	6011      	str	r1, [r2, #0]
 8001e5e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e62:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001e66:	6812      	ldr	r2, [r2, #0]
 8001e68:	fa92 f1a2 	rbit	r1, r2
 8001e6c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e70:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001e74:	6011      	str	r1, [r2, #0]
  return result;
 8001e76:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e7a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001e7e:	6812      	ldr	r2, [r2, #0]
 8001e80:	fab2 f282 	clz	r2, r2
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	f042 0220 	orr.w	r2, r2, #32
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	f002 021f 	and.w	r2, r2, #31
 8001e90:	2101      	movs	r1, #1
 8001e92:	fa01 f202 	lsl.w	r2, r1, r2
 8001e96:	4013      	ands	r3, r2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d082      	beq.n	8001da2 <HAL_RCC_OscConfig+0xdce>
 8001e9c:	e0cf      	b.n	800203e <HAL_RCC_OscConfig+0x106a>
 8001e9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ea2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001ea6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001eaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eb0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	fa93 f2a3 	rbit	r2, r3
 8001eba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ebe:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001ec2:	601a      	str	r2, [r3, #0]
  return result;
 8001ec4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ec8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001ecc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ece:	fab3 f383 	clz	r3, r3
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ed8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	461a      	mov	r2, r3
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee4:	f7fe fdee 	bl	8000ac4 <HAL_GetTick>
 8001ee8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eec:	e009      	b.n	8001f02 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eee:	f7fe fde9 	bl	8000ac4 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e09e      	b.n	8002040 <HAL_RCC_OscConfig+0x106c>
 8001f02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f06:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001f0a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f14:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	fa93 f2a3 	rbit	r2, r3
 8001f1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f22:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001f26:	601a      	str	r2, [r3, #0]
  return result;
 8001f28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f2c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001f30:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f32:	fab3 f383 	clz	r3, r3
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	095b      	lsrs	r3, r3, #5
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d104      	bne.n	8001f50 <HAL_RCC_OscConfig+0xf7c>
 8001f46:	4b01      	ldr	r3, [pc, #4]	@ (8001f4c <HAL_RCC_OscConfig+0xf78>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	e029      	b.n	8001fa0 <HAL_RCC_OscConfig+0xfcc>
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f54:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001f58:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f62:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	fa93 f2a3 	rbit	r2, r3
 8001f6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f70:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f7a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001f7e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f88:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	fa93 f2a3 	rbit	r2, r3
 8001f92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f96:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	4b2b      	ldr	r3, [pc, #172]	@ (800204c <HAL_RCC_OscConfig+0x1078>)
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fa4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001fa8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001fac:	6011      	str	r1, [r2, #0]
 8001fae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fb2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001fb6:	6812      	ldr	r2, [r2, #0]
 8001fb8:	fa92 f1a2 	rbit	r1, r2
 8001fbc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fc0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001fc4:	6011      	str	r1, [r2, #0]
  return result;
 8001fc6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fca:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001fce:	6812      	ldr	r2, [r2, #0]
 8001fd0:	fab2 f282 	clz	r2, r2
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	f042 0220 	orr.w	r2, r2, #32
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	f002 021f 	and.w	r2, r2, #31
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d180      	bne.n	8001eee <HAL_RCC_OscConfig+0xf1a>
 8001fec:	e027      	b.n	800203e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ff2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d101      	bne.n	8002002 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e01e      	b.n	8002040 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002002:	4b12      	ldr	r3, [pc, #72]	@ (800204c <HAL_RCC_OscConfig+0x1078>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800200a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800200e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002012:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002016:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	429a      	cmp	r2, r3
 8002020:	d10b      	bne.n	800203a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002022:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002026:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800202a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800202e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002036:	429a      	cmp	r2, r3
 8002038:	d001      	beq.n	800203e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40021000 	.word	0x40021000

08002050 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b09e      	sub	sp, #120	@ 0x78
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800205a:	2300      	movs	r3, #0
 800205c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e162      	b.n	800232e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002068:	4b90      	ldr	r3, [pc, #576]	@ (80022ac <HAL_RCC_ClockConfig+0x25c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	429a      	cmp	r2, r3
 8002074:	d910      	bls.n	8002098 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002076:	4b8d      	ldr	r3, [pc, #564]	@ (80022ac <HAL_RCC_ClockConfig+0x25c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f023 0207 	bic.w	r2, r3, #7
 800207e:	498b      	ldr	r1, [pc, #556]	@ (80022ac <HAL_RCC_ClockConfig+0x25c>)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	4313      	orrs	r3, r2
 8002084:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002086:	4b89      	ldr	r3, [pc, #548]	@ (80022ac <HAL_RCC_ClockConfig+0x25c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	429a      	cmp	r2, r3
 8002092:	d001      	beq.n	8002098 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e14a      	b.n	800232e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d008      	beq.n	80020b6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a4:	4b82      	ldr	r3, [pc, #520]	@ (80022b0 <HAL_RCC_ClockConfig+0x260>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	497f      	ldr	r1, [pc, #508]	@ (80022b0 <HAL_RCC_ClockConfig+0x260>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 80dc 	beq.w	800227c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d13c      	bne.n	8002146 <HAL_RCC_ClockConfig+0xf6>
 80020cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020d0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020d4:	fa93 f3a3 	rbit	r3, r3
 80020d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80020da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020dc:	fab3 f383 	clz	r3, r3
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	095b      	lsrs	r3, r3, #5
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d102      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xa6>
 80020f0:	4b6f      	ldr	r3, [pc, #444]	@ (80022b0 <HAL_RCC_ClockConfig+0x260>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	e00f      	b.n	8002116 <HAL_RCC_ClockConfig+0xc6>
 80020f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020fa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020fe:	fa93 f3a3 	rbit	r3, r3
 8002102:	667b      	str	r3, [r7, #100]	@ 0x64
 8002104:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002108:	663b      	str	r3, [r7, #96]	@ 0x60
 800210a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800210c:	fa93 f3a3 	rbit	r3, r3
 8002110:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002112:	4b67      	ldr	r3, [pc, #412]	@ (80022b0 <HAL_RCC_ClockConfig+0x260>)
 8002114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002116:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800211a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800211c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800211e:	fa92 f2a2 	rbit	r2, r2
 8002122:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002124:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002126:	fab2 f282 	clz	r2, r2
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	f042 0220 	orr.w	r2, r2, #32
 8002130:	b2d2      	uxtb	r2, r2
 8002132:	f002 021f 	and.w	r2, r2, #31
 8002136:	2101      	movs	r1, #1
 8002138:	fa01 f202 	lsl.w	r2, r1, r2
 800213c:	4013      	ands	r3, r2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d17b      	bne.n	800223a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e0f3      	b.n	800232e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b02      	cmp	r3, #2
 800214c:	d13c      	bne.n	80021c8 <HAL_RCC_ClockConfig+0x178>
 800214e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002152:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002154:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002156:	fa93 f3a3 	rbit	r3, r3
 800215a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800215c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800215e:	fab3 f383 	clz	r3, r3
 8002162:	b2db      	uxtb	r3, r3
 8002164:	095b      	lsrs	r3, r3, #5
 8002166:	b2db      	uxtb	r3, r3
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b01      	cmp	r3, #1
 8002170:	d102      	bne.n	8002178 <HAL_RCC_ClockConfig+0x128>
 8002172:	4b4f      	ldr	r3, [pc, #316]	@ (80022b0 <HAL_RCC_ClockConfig+0x260>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	e00f      	b.n	8002198 <HAL_RCC_ClockConfig+0x148>
 8002178:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800217c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002180:	fa93 f3a3 	rbit	r3, r3
 8002184:	647b      	str	r3, [r7, #68]	@ 0x44
 8002186:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800218a:	643b      	str	r3, [r7, #64]	@ 0x40
 800218c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800218e:	fa93 f3a3 	rbit	r3, r3
 8002192:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002194:	4b46      	ldr	r3, [pc, #280]	@ (80022b0 <HAL_RCC_ClockConfig+0x260>)
 8002196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002198:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800219c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800219e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80021a0:	fa92 f2a2 	rbit	r2, r2
 80021a4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80021a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80021a8:	fab2 f282 	clz	r2, r2
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	f042 0220 	orr.w	r2, r2, #32
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	f002 021f 	and.w	r2, r2, #31
 80021b8:	2101      	movs	r1, #1
 80021ba:	fa01 f202 	lsl.w	r2, r1, r2
 80021be:	4013      	ands	r3, r2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d13a      	bne.n	800223a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e0b2      	b.n	800232e <HAL_RCC_ClockConfig+0x2de>
 80021c8:	2302      	movs	r3, #2
 80021ca:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021ce:	fa93 f3a3 	rbit	r3, r3
 80021d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80021d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d6:	fab3 f383 	clz	r3, r3
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	095b      	lsrs	r3, r3, #5
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d102      	bne.n	80021f0 <HAL_RCC_ClockConfig+0x1a0>
 80021ea:	4b31      	ldr	r3, [pc, #196]	@ (80022b0 <HAL_RCC_ClockConfig+0x260>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	e00d      	b.n	800220c <HAL_RCC_ClockConfig+0x1bc>
 80021f0:	2302      	movs	r3, #2
 80021f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021f6:	fa93 f3a3 	rbit	r3, r3
 80021fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80021fc:	2302      	movs	r3, #2
 80021fe:	623b      	str	r3, [r7, #32]
 8002200:	6a3b      	ldr	r3, [r7, #32]
 8002202:	fa93 f3a3 	rbit	r3, r3
 8002206:	61fb      	str	r3, [r7, #28]
 8002208:	4b29      	ldr	r3, [pc, #164]	@ (80022b0 <HAL_RCC_ClockConfig+0x260>)
 800220a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220c:	2202      	movs	r2, #2
 800220e:	61ba      	str	r2, [r7, #24]
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	fa92 f2a2 	rbit	r2, r2
 8002216:	617a      	str	r2, [r7, #20]
  return result;
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	fab2 f282 	clz	r2, r2
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	f042 0220 	orr.w	r2, r2, #32
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	f002 021f 	and.w	r2, r2, #31
 800222a:	2101      	movs	r1, #1
 800222c:	fa01 f202 	lsl.w	r2, r1, r2
 8002230:	4013      	ands	r3, r2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e079      	b.n	800232e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800223a:	4b1d      	ldr	r3, [pc, #116]	@ (80022b0 <HAL_RCC_ClockConfig+0x260>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f023 0203 	bic.w	r2, r3, #3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	491a      	ldr	r1, [pc, #104]	@ (80022b0 <HAL_RCC_ClockConfig+0x260>)
 8002248:	4313      	orrs	r3, r2
 800224a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800224c:	f7fe fc3a 	bl	8000ac4 <HAL_GetTick>
 8002250:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002252:	e00a      	b.n	800226a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002254:	f7fe fc36 	bl	8000ac4 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002262:	4293      	cmp	r3, r2
 8002264:	d901      	bls.n	800226a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e061      	b.n	800232e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226a:	4b11      	ldr	r3, [pc, #68]	@ (80022b0 <HAL_RCC_ClockConfig+0x260>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f003 020c 	and.w	r2, r3, #12
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	429a      	cmp	r2, r3
 800227a:	d1eb      	bne.n	8002254 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800227c:	4b0b      	ldr	r3, [pc, #44]	@ (80022ac <HAL_RCC_ClockConfig+0x25c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	429a      	cmp	r2, r3
 8002288:	d214      	bcs.n	80022b4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228a:	4b08      	ldr	r3, [pc, #32]	@ (80022ac <HAL_RCC_ClockConfig+0x25c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f023 0207 	bic.w	r2, r3, #7
 8002292:	4906      	ldr	r1, [pc, #24]	@ (80022ac <HAL_RCC_ClockConfig+0x25c>)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	4313      	orrs	r3, r2
 8002298:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800229a:	4b04      	ldr	r3, [pc, #16]	@ (80022ac <HAL_RCC_ClockConfig+0x25c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d005      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e040      	b.n	800232e <HAL_RCC_ClockConfig+0x2de>
 80022ac:	40022000 	.word	0x40022000
 80022b0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d008      	beq.n	80022d2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002338 <HAL_RCC_ClockConfig+0x2e8>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	491a      	ldr	r1, [pc, #104]	@ (8002338 <HAL_RCC_ClockConfig+0x2e8>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d009      	beq.n	80022f2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022de:	4b16      	ldr	r3, [pc, #88]	@ (8002338 <HAL_RCC_ClockConfig+0x2e8>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4912      	ldr	r1, [pc, #72]	@ (8002338 <HAL_RCC_ClockConfig+0x2e8>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80022f2:	f000 f829 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 80022f6:	4601      	mov	r1, r0
 80022f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002338 <HAL_RCC_ClockConfig+0x2e8>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002300:	22f0      	movs	r2, #240	@ 0xf0
 8002302:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	fa92 f2a2 	rbit	r2, r2
 800230a:	60fa      	str	r2, [r7, #12]
  return result;
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	fab2 f282 	clz	r2, r2
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	40d3      	lsrs	r3, r2
 8002316:	4a09      	ldr	r2, [pc, #36]	@ (800233c <HAL_RCC_ClockConfig+0x2ec>)
 8002318:	5cd3      	ldrb	r3, [r2, r3]
 800231a:	fa21 f303 	lsr.w	r3, r1, r3
 800231e:	4a08      	ldr	r2, [pc, #32]	@ (8002340 <HAL_RCC_ClockConfig+0x2f0>)
 8002320:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002322:	4b08      	ldr	r3, [pc, #32]	@ (8002344 <HAL_RCC_ClockConfig+0x2f4>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f7fe fb88 	bl	8000a3c <HAL_InitTick>
  
  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3778      	adds	r7, #120	@ 0x78
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40021000 	.word	0x40021000
 800233c:	08003674 	.word	0x08003674
 8002340:	2000001c 	.word	0x2000001c
 8002344:	20000020 	.word	0x20000020

08002348 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002348:	b480      	push	{r7}
 800234a:	b087      	sub	sp, #28
 800234c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]
 800235a:	2300      	movs	r3, #0
 800235c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800235e:	2300      	movs	r3, #0
 8002360:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002362:	4b1e      	ldr	r3, [pc, #120]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x94>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f003 030c 	and.w	r3, r3, #12
 800236e:	2b04      	cmp	r3, #4
 8002370:	d002      	beq.n	8002378 <HAL_RCC_GetSysClockFreq+0x30>
 8002372:	2b08      	cmp	r3, #8
 8002374:	d003      	beq.n	800237e <HAL_RCC_GetSysClockFreq+0x36>
 8002376:	e026      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002378:	4b19      	ldr	r3, [pc, #100]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800237a:	613b      	str	r3, [r7, #16]
      break;
 800237c:	e026      	b.n	80023cc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	0c9b      	lsrs	r3, r3, #18
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	4a17      	ldr	r2, [pc, #92]	@ (80023e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002388:	5cd3      	ldrb	r3, [r2, r3]
 800238a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800238c:	4b13      	ldr	r3, [pc, #76]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x94>)
 800238e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002390:	f003 030f 	and.w	r3, r3, #15
 8002394:	4a14      	ldr	r2, [pc, #80]	@ (80023e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002396:	5cd3      	ldrb	r3, [r2, r3]
 8002398:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d008      	beq.n	80023b6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023a4:	4a0e      	ldr	r2, [pc, #56]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	fb02 f303 	mul.w	r3, r2, r3
 80023b2:	617b      	str	r3, [r7, #20]
 80023b4:	e004      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a0c      	ldr	r2, [pc, #48]	@ (80023ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80023ba:	fb02 f303 	mul.w	r3, r2, r3
 80023be:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	613b      	str	r3, [r7, #16]
      break;
 80023c4:	e002      	b.n	80023cc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023c6:	4b06      	ldr	r3, [pc, #24]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80023c8:	613b      	str	r3, [r7, #16]
      break;
 80023ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023cc:	693b      	ldr	r3, [r7, #16]
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	371c      	adds	r7, #28
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	40021000 	.word	0x40021000
 80023e0:	007a1200 	.word	0x007a1200
 80023e4:	0800368c 	.word	0x0800368c
 80023e8:	0800369c 	.word	0x0800369c
 80023ec:	003d0900 	.word	0x003d0900

080023f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023f4:	4b03      	ldr	r3, [pc, #12]	@ (8002404 <HAL_RCC_GetHCLKFreq+0x14>)
 80023f6:	681b      	ldr	r3, [r3, #0]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	2000001c 	.word	0x2000001c

08002408 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800240e:	f7ff ffef 	bl	80023f0 <HAL_RCC_GetHCLKFreq>
 8002412:	4601      	mov	r1, r0
 8002414:	4b0b      	ldr	r3, [pc, #44]	@ (8002444 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800241c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002420:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	fa92 f2a2 	rbit	r2, r2
 8002428:	603a      	str	r2, [r7, #0]
  return result;
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	fab2 f282 	clz	r2, r2
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	40d3      	lsrs	r3, r2
 8002434:	4a04      	ldr	r2, [pc, #16]	@ (8002448 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002436:	5cd3      	ldrb	r3, [r2, r3]
 8002438:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800243c:	4618      	mov	r0, r3
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40021000 	.word	0x40021000
 8002448:	08003684 	.word	0x08003684

0800244c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002452:	f7ff ffcd 	bl	80023f0 <HAL_RCC_GetHCLKFreq>
 8002456:	4601      	mov	r1, r0
 8002458:	4b0b      	ldr	r3, [pc, #44]	@ (8002488 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002460:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002464:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	fa92 f2a2 	rbit	r2, r2
 800246c:	603a      	str	r2, [r7, #0]
  return result;
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	fab2 f282 	clz	r2, r2
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	40d3      	lsrs	r3, r2
 8002478:	4a04      	ldr	r2, [pc, #16]	@ (800248c <HAL_RCC_GetPCLK2Freq+0x40>)
 800247a:	5cd3      	ldrb	r3, [r2, r3]
 800247c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002480:	4618      	mov	r0, r3
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40021000 	.word	0x40021000
 800248c:	08003684 	.word	0x08003684

08002490 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e095      	b.n	80025ce <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d108      	bne.n	80024bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80024b2:	d009      	beq.n	80024c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	61da      	str	r2, [r3, #28]
 80024ba:	e005      	b.n	80024c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d106      	bne.n	80024e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7fe f982 	bl	80007ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2202      	movs	r2, #2
 80024ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002508:	d902      	bls.n	8002510 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800250a:	2300      	movs	r3, #0
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	e002      	b.n	8002516 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002510:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002514:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800251e:	d007      	beq.n	8002530 <HAL_SPI_Init+0xa0>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002528:	d002      	beq.n	8002530 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002540:	431a      	orrs	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	431a      	orrs	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002568:	431a      	orrs	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002572:	ea42 0103 	orr.w	r1, r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800257a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	430a      	orrs	r2, r1
 8002584:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	0c1b      	lsrs	r3, r3, #16
 800258c:	f003 0204 	and.w	r2, r3, #4
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002594:	f003 0310 	and.w	r3, r3, #16
 8002598:	431a      	orrs	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800259e:	f003 0308 	and.w	r3, r3, #8
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80025ac:	ea42 0103 	orr.w	r1, r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b088      	sub	sp, #32
 80025da:	af00      	add	r7, sp, #0
 80025dc:	60f8      	str	r0, [r7, #12]
 80025de:	60b9      	str	r1, [r7, #8]
 80025e0:	603b      	str	r3, [r7, #0]
 80025e2:	4613      	mov	r3, r2
 80025e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025e6:	2300      	movs	r3, #0
 80025e8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d101      	bne.n	80025f8 <HAL_SPI_Transmit+0x22>
 80025f4:	2302      	movs	r3, #2
 80025f6:	e15f      	b.n	80028b8 <HAL_SPI_Transmit+0x2e2>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002600:	f7fe fa60 	bl	8000ac4 <HAL_GetTick>
 8002604:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002606:	88fb      	ldrh	r3, [r7, #6]
 8002608:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b01      	cmp	r3, #1
 8002614:	d002      	beq.n	800261c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002616:	2302      	movs	r3, #2
 8002618:	77fb      	strb	r3, [r7, #31]
    goto error;
 800261a:	e148      	b.n	80028ae <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d002      	beq.n	8002628 <HAL_SPI_Transmit+0x52>
 8002622:	88fb      	ldrh	r3, [r7, #6]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d102      	bne.n	800262e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800262c:	e13f      	b.n	80028ae <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2203      	movs	r2, #3
 8002632:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	88fa      	ldrh	r2, [r7, #6]
 8002646:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	88fa      	ldrh	r2, [r7, #6]
 800264c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002678:	d10f      	bne.n	800269a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002688:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002698:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026a4:	2b40      	cmp	r3, #64	@ 0x40
 80026a6:	d007      	beq.n	80026b8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80026c0:	d94f      	bls.n	8002762 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d002      	beq.n	80026d0 <HAL_SPI_Transmit+0xfa>
 80026ca:	8afb      	ldrh	r3, [r7, #22]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d142      	bne.n	8002756 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d4:	881a      	ldrh	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026e0:	1c9a      	adds	r2, r3, #2
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	3b01      	subs	r3, #1
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80026f4:	e02f      	b.n	8002756 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b02      	cmp	r3, #2
 8002702:	d112      	bne.n	800272a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002708:	881a      	ldrh	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002714:	1c9a      	adds	r2, r3, #2
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800271e:	b29b      	uxth	r3, r3
 8002720:	3b01      	subs	r3, #1
 8002722:	b29a      	uxth	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002728:	e015      	b.n	8002756 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800272a:	f7fe f9cb 	bl	8000ac4 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d803      	bhi.n	8002742 <HAL_SPI_Transmit+0x16c>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002740:	d102      	bne.n	8002748 <HAL_SPI_Transmit+0x172>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d106      	bne.n	8002756 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002754:	e0ab      	b.n	80028ae <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800275a:	b29b      	uxth	r3, r3
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1ca      	bne.n	80026f6 <HAL_SPI_Transmit+0x120>
 8002760:	e080      	b.n	8002864 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d002      	beq.n	8002770 <HAL_SPI_Transmit+0x19a>
 800276a:	8afb      	ldrh	r3, [r7, #22]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d174      	bne.n	800285a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002774:	b29b      	uxth	r3, r3
 8002776:	2b01      	cmp	r3, #1
 8002778:	d912      	bls.n	80027a0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800277e:	881a      	ldrh	r2, [r3, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800278a:	1c9a      	adds	r2, r3, #2
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002794:	b29b      	uxth	r3, r3
 8002796:	3b02      	subs	r3, #2
 8002798:	b29a      	uxth	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800279e:	e05c      	b.n	800285a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	330c      	adds	r3, #12
 80027aa:	7812      	ldrb	r2, [r2, #0]
 80027ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027bc:	b29b      	uxth	r3, r3
 80027be:	3b01      	subs	r3, #1
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80027c6:	e048      	b.n	800285a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d12b      	bne.n	800282e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027da:	b29b      	uxth	r3, r3
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d912      	bls.n	8002806 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027e4:	881a      	ldrh	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027f0:	1c9a      	adds	r2, r3, #2
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	3b02      	subs	r3, #2
 80027fe:	b29a      	uxth	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002804:	e029      	b.n	800285a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	330c      	adds	r3, #12
 8002810:	7812      	ldrb	r2, [r2, #0]
 8002812:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002818:	1c5a      	adds	r2, r3, #1
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002822:	b29b      	uxth	r3, r3
 8002824:	3b01      	subs	r3, #1
 8002826:	b29a      	uxth	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800282c:	e015      	b.n	800285a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800282e:	f7fe f949 	bl	8000ac4 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d803      	bhi.n	8002846 <HAL_SPI_Transmit+0x270>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002844:	d102      	bne.n	800284c <HAL_SPI_Transmit+0x276>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d106      	bne.n	800285a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002858:	e029      	b.n	80028ae <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800285e:	b29b      	uxth	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1b1      	bne.n	80027c8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	6839      	ldr	r1, [r7, #0]
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f000 f947 	bl	8002afc <SPI_EndRxTxTransaction>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d002      	beq.n	800287a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2220      	movs	r2, #32
 8002878:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10a      	bne.n	8002898 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002882:	2300      	movs	r3, #0
 8002884:	613b      	str	r3, [r7, #16]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	613b      	str	r3, [r7, #16]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	613b      	str	r3, [r7, #16]
 8002896:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800289c:	2b00      	cmp	r3, #0
 800289e:	d002      	beq.n	80028a6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	77fb      	strb	r3, [r7, #31]
 80028a4:	e003      	b.n	80028ae <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80028b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3720      	adds	r7, #32
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b088      	sub	sp, #32
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	603b      	str	r3, [r7, #0]
 80028cc:	4613      	mov	r3, r2
 80028ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80028d0:	f7fe f8f8 	bl	8000ac4 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028d8:	1a9b      	subs	r3, r3, r2
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	4413      	add	r3, r2
 80028de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80028e0:	f7fe f8f0 	bl	8000ac4 <HAL_GetTick>
 80028e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80028e6:	4b39      	ldr	r3, [pc, #228]	@ (80029cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	015b      	lsls	r3, r3, #5
 80028ec:	0d1b      	lsrs	r3, r3, #20
 80028ee:	69fa      	ldr	r2, [r7, #28]
 80028f0:	fb02 f303 	mul.w	r3, r2, r3
 80028f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028f6:	e054      	b.n	80029a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028fe:	d050      	beq.n	80029a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002900:	f7fe f8e0 	bl	8000ac4 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	69fa      	ldr	r2, [r7, #28]
 800290c:	429a      	cmp	r2, r3
 800290e:	d902      	bls.n	8002916 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d13d      	bne.n	8002992 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002924:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800292e:	d111      	bne.n	8002954 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002938:	d004      	beq.n	8002944 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002942:	d107      	bne.n	8002954 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002952:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002958:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800295c:	d10f      	bne.n	800297e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800297c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e017      	b.n	80029c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002998:	2300      	movs	r3, #0
 800299a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	3b01      	subs	r3, #1
 80029a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	4013      	ands	r3, r2
 80029ac:	68ba      	ldr	r2, [r7, #8]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	bf0c      	ite	eq
 80029b2:	2301      	moveq	r3, #1
 80029b4:	2300      	movne	r3, #0
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	461a      	mov	r2, r3
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d19b      	bne.n	80028f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3720      	adds	r7, #32
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	2000001c 	.word	0x2000001c

080029d0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08a      	sub	sp, #40	@ 0x28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
 80029dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80029de:	2300      	movs	r3, #0
 80029e0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80029e2:	f7fe f86f 	bl	8000ac4 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ea:	1a9b      	subs	r3, r3, r2
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	4413      	add	r3, r2
 80029f0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80029f2:	f7fe f867 	bl	8000ac4 <HAL_GetTick>
 80029f6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	330c      	adds	r3, #12
 80029fe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002a00:	4b3d      	ldr	r3, [pc, #244]	@ (8002af8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	4613      	mov	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	00da      	lsls	r2, r3, #3
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	0d1b      	lsrs	r3, r3, #20
 8002a10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a12:	fb02 f303 	mul.w	r3, r2, r3
 8002a16:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002a18:	e060      	b.n	8002adc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002a20:	d107      	bne.n	8002a32 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d104      	bne.n	8002a32 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002a30:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a38:	d050      	beq.n	8002adc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a3a:	f7fe f843 	bl	8000ac4 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	6a3b      	ldr	r3, [r7, #32]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d902      	bls.n	8002a50 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d13d      	bne.n	8002acc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002a5e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a68:	d111      	bne.n	8002a8e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a72:	d004      	beq.n	8002a7e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a7c:	d107      	bne.n	8002a8e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a8c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a96:	d10f      	bne.n	8002ab8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ab6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e010      	b.n	8002aee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689a      	ldr	r2, [r3, #8]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d196      	bne.n	8002a1a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3728      	adds	r7, #40	@ 0x28
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	2000001c 	.word	0x2000001c

08002afc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af02      	add	r7, sp, #8
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f7ff ff5b 	bl	80029d0 <SPI_WaitFifoStateUntilTimeout>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d007      	beq.n	8002b30 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b24:	f043 0220 	orr.w	r2, r3, #32
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e027      	b.n	8002b80 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2200      	movs	r2, #0
 8002b38:	2180      	movs	r1, #128	@ 0x80
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f7ff fec0 	bl	80028c0 <SPI_WaitFlagStateUntilTimeout>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d007      	beq.n	8002b56 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b4a:	f043 0220 	orr.w	r2, r3, #32
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e014      	b.n	8002b80 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f7ff ff34 	bl	80029d0 <SPI_WaitFifoStateUntilTimeout>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d007      	beq.n	8002b7e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b72:	f043 0220 	orr.w	r2, r3, #32
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e000      	b.n	8002b80 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e049      	b.n	8002c2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d106      	bne.n	8002bb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7fd fe5e 	bl	8000870 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3304      	adds	r3, #4
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4610      	mov	r0, r2
 8002bc8:	f000 f88a 	bl	8002ce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
	...

08002c38 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d001      	beq.n	8002c50 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e038      	b.n	8002cc2 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2202      	movs	r2, #2
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a1c      	ldr	r2, [pc, #112]	@ (8002cd0 <HAL_TIM_Base_Start+0x98>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d00e      	beq.n	8002c80 <HAL_TIM_Base_Start+0x48>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c6a:	d009      	beq.n	8002c80 <HAL_TIM_Base_Start+0x48>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a18      	ldr	r2, [pc, #96]	@ (8002cd4 <HAL_TIM_Base_Start+0x9c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d004      	beq.n	8002c80 <HAL_TIM_Base_Start+0x48>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a17      	ldr	r2, [pc, #92]	@ (8002cd8 <HAL_TIM_Base_Start+0xa0>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d115      	bne.n	8002cac <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	4b15      	ldr	r3, [pc, #84]	@ (8002cdc <HAL_TIM_Base_Start+0xa4>)
 8002c88:	4013      	ands	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2b06      	cmp	r3, #6
 8002c90:	d015      	beq.n	8002cbe <HAL_TIM_Base_Start+0x86>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c98:	d011      	beq.n	8002cbe <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f042 0201 	orr.w	r2, r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002caa:	e008      	b.n	8002cbe <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 0201 	orr.w	r2, r2, #1
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	e000      	b.n	8002cc0 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cbe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	40012c00 	.word	0x40012c00
 8002cd4:	40000400 	.word	0x40000400
 8002cd8:	40014000 	.word	0x40014000
 8002cdc:	00010007 	.word	0x00010007

08002ce0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a38      	ldr	r2, [pc, #224]	@ (8002dd4 <TIM_Base_SetConfig+0xf4>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d007      	beq.n	8002d08 <TIM_Base_SetConfig+0x28>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cfe:	d003      	beq.n	8002d08 <TIM_Base_SetConfig+0x28>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a35      	ldr	r2, [pc, #212]	@ (8002dd8 <TIM_Base_SetConfig+0xf8>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d108      	bne.n	8002d1a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a2d      	ldr	r2, [pc, #180]	@ (8002dd4 <TIM_Base_SetConfig+0xf4>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d013      	beq.n	8002d4a <TIM_Base_SetConfig+0x6a>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d28:	d00f      	beq.n	8002d4a <TIM_Base_SetConfig+0x6a>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a2a      	ldr	r2, [pc, #168]	@ (8002dd8 <TIM_Base_SetConfig+0xf8>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d00b      	beq.n	8002d4a <TIM_Base_SetConfig+0x6a>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a29      	ldr	r2, [pc, #164]	@ (8002ddc <TIM_Base_SetConfig+0xfc>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d007      	beq.n	8002d4a <TIM_Base_SetConfig+0x6a>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a28      	ldr	r2, [pc, #160]	@ (8002de0 <TIM_Base_SetConfig+0x100>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d003      	beq.n	8002d4a <TIM_Base_SetConfig+0x6a>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a27      	ldr	r2, [pc, #156]	@ (8002de4 <TIM_Base_SetConfig+0x104>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d108      	bne.n	8002d5c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a14      	ldr	r2, [pc, #80]	@ (8002dd4 <TIM_Base_SetConfig+0xf4>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d00b      	beq.n	8002da0 <TIM_Base_SetConfig+0xc0>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a14      	ldr	r2, [pc, #80]	@ (8002ddc <TIM_Base_SetConfig+0xfc>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d007      	beq.n	8002da0 <TIM_Base_SetConfig+0xc0>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a13      	ldr	r2, [pc, #76]	@ (8002de0 <TIM_Base_SetConfig+0x100>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d003      	beq.n	8002da0 <TIM_Base_SetConfig+0xc0>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a12      	ldr	r2, [pc, #72]	@ (8002de4 <TIM_Base_SetConfig+0x104>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d103      	bne.n	8002da8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	691a      	ldr	r2, [r3, #16]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d105      	bne.n	8002dc6 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	f023 0201 	bic.w	r2, r3, #1
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	611a      	str	r2, [r3, #16]
  }
}
 8002dc6:	bf00      	nop
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	40012c00 	.word	0x40012c00
 8002dd8:	40000400 	.word	0x40000400
 8002ddc:	40014000 	.word	0x40014000
 8002de0:	40014400 	.word	0x40014400
 8002de4:	40014800 	.word	0x40014800

08002de8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d101      	bne.n	8002e00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	e054      	b.n	8002eaa <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a24      	ldr	r2, [pc, #144]	@ (8002eb8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d108      	bne.n	8002e3c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002e30:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a17      	ldr	r2, [pc, #92]	@ (8002eb8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d00e      	beq.n	8002e7e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e68:	d009      	beq.n	8002e7e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a13      	ldr	r2, [pc, #76]	@ (8002ebc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d004      	beq.n	8002e7e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a11      	ldr	r2, [pc, #68]	@ (8002ec0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d10c      	bne.n	8002e98 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	40012c00 	.word	0x40012c00
 8002ebc:	40000400 	.word	0x40000400
 8002ec0:	40014000 	.word	0x40014000

08002ec4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e040      	b.n	8002f58 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d106      	bne.n	8002eec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7fd fce2 	bl	80008b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2224      	movs	r2, #36	@ 0x24
 8002ef0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 0201 	bic.w	r2, r2, #1
 8002f00:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d002      	beq.n	8002f10 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f95e 	bl	80031cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 f825 	bl	8002f60 <UART_SetConfig>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d101      	bne.n	8002f20 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e01b      	b.n	8002f58 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f042 0201 	orr.w	r2, r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 f9dd 	bl	8003310 <UART_CheckIdleState>
 8002f56:	4603      	mov	r3, r0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	431a      	orrs	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	4b8a      	ldr	r3, [pc, #552]	@ (80031b4 <UART_SetConfig+0x254>)
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6812      	ldr	r2, [r2, #0]
 8002f92:	6979      	ldr	r1, [r7, #20]
 8002f94:	430b      	orrs	r3, r1
 8002f96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68da      	ldr	r2, [r3, #12]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a78      	ldr	r2, [pc, #480]	@ (80031b8 <UART_SetConfig+0x258>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d120      	bne.n	800301e <UART_SetConfig+0xbe>
 8002fdc:	4b77      	ldr	r3, [pc, #476]	@ (80031bc <UART_SetConfig+0x25c>)
 8002fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe0:	f003 0303 	and.w	r3, r3, #3
 8002fe4:	2b03      	cmp	r3, #3
 8002fe6:	d817      	bhi.n	8003018 <UART_SetConfig+0xb8>
 8002fe8:	a201      	add	r2, pc, #4	@ (adr r2, 8002ff0 <UART_SetConfig+0x90>)
 8002fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fee:	bf00      	nop
 8002ff0:	08003001 	.word	0x08003001
 8002ff4:	0800300d 	.word	0x0800300d
 8002ff8:	08003013 	.word	0x08003013
 8002ffc:	08003007 	.word	0x08003007
 8003000:	2300      	movs	r3, #0
 8003002:	77fb      	strb	r3, [r7, #31]
 8003004:	e01d      	b.n	8003042 <UART_SetConfig+0xe2>
 8003006:	2302      	movs	r3, #2
 8003008:	77fb      	strb	r3, [r7, #31]
 800300a:	e01a      	b.n	8003042 <UART_SetConfig+0xe2>
 800300c:	2304      	movs	r3, #4
 800300e:	77fb      	strb	r3, [r7, #31]
 8003010:	e017      	b.n	8003042 <UART_SetConfig+0xe2>
 8003012:	2308      	movs	r3, #8
 8003014:	77fb      	strb	r3, [r7, #31]
 8003016:	e014      	b.n	8003042 <UART_SetConfig+0xe2>
 8003018:	2310      	movs	r3, #16
 800301a:	77fb      	strb	r3, [r7, #31]
 800301c:	e011      	b.n	8003042 <UART_SetConfig+0xe2>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a67      	ldr	r2, [pc, #412]	@ (80031c0 <UART_SetConfig+0x260>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d102      	bne.n	800302e <UART_SetConfig+0xce>
 8003028:	2300      	movs	r3, #0
 800302a:	77fb      	strb	r3, [r7, #31]
 800302c:	e009      	b.n	8003042 <UART_SetConfig+0xe2>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a64      	ldr	r2, [pc, #400]	@ (80031c4 <UART_SetConfig+0x264>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d102      	bne.n	800303e <UART_SetConfig+0xde>
 8003038:	2300      	movs	r3, #0
 800303a:	77fb      	strb	r3, [r7, #31]
 800303c:	e001      	b.n	8003042 <UART_SetConfig+0xe2>
 800303e:	2310      	movs	r3, #16
 8003040:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800304a:	d15a      	bne.n	8003102 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800304c:	7ffb      	ldrb	r3, [r7, #31]
 800304e:	2b08      	cmp	r3, #8
 8003050:	d827      	bhi.n	80030a2 <UART_SetConfig+0x142>
 8003052:	a201      	add	r2, pc, #4	@ (adr r2, 8003058 <UART_SetConfig+0xf8>)
 8003054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003058:	0800307d 	.word	0x0800307d
 800305c:	08003085 	.word	0x08003085
 8003060:	0800308d 	.word	0x0800308d
 8003064:	080030a3 	.word	0x080030a3
 8003068:	08003093 	.word	0x08003093
 800306c:	080030a3 	.word	0x080030a3
 8003070:	080030a3 	.word	0x080030a3
 8003074:	080030a3 	.word	0x080030a3
 8003078:	0800309b 	.word	0x0800309b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800307c:	f7ff f9c4 	bl	8002408 <HAL_RCC_GetPCLK1Freq>
 8003080:	61b8      	str	r0, [r7, #24]
        break;
 8003082:	e013      	b.n	80030ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003084:	f7ff f9e2 	bl	800244c <HAL_RCC_GetPCLK2Freq>
 8003088:	61b8      	str	r0, [r7, #24]
        break;
 800308a:	e00f      	b.n	80030ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800308c:	4b4e      	ldr	r3, [pc, #312]	@ (80031c8 <UART_SetConfig+0x268>)
 800308e:	61bb      	str	r3, [r7, #24]
        break;
 8003090:	e00c      	b.n	80030ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003092:	f7ff f959 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 8003096:	61b8      	str	r0, [r7, #24]
        break;
 8003098:	e008      	b.n	80030ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800309a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800309e:	61bb      	str	r3, [r7, #24]
        break;
 80030a0:	e004      	b.n	80030ac <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	77bb      	strb	r3, [r7, #30]
        break;
 80030aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d074      	beq.n	800319c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	005a      	lsls	r2, r3, #1
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	085b      	lsrs	r3, r3, #1
 80030bc:	441a      	add	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	2b0f      	cmp	r3, #15
 80030cc:	d916      	bls.n	80030fc <UART_SetConfig+0x19c>
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030d4:	d212      	bcs.n	80030fc <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	b29b      	uxth	r3, r3
 80030da:	f023 030f 	bic.w	r3, r3, #15
 80030de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	085b      	lsrs	r3, r3, #1
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	89fb      	ldrh	r3, [r7, #14]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	89fa      	ldrh	r2, [r7, #14]
 80030f8:	60da      	str	r2, [r3, #12]
 80030fa:	e04f      	b.n	800319c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	77bb      	strb	r3, [r7, #30]
 8003100:	e04c      	b.n	800319c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003102:	7ffb      	ldrb	r3, [r7, #31]
 8003104:	2b08      	cmp	r3, #8
 8003106:	d828      	bhi.n	800315a <UART_SetConfig+0x1fa>
 8003108:	a201      	add	r2, pc, #4	@ (adr r2, 8003110 <UART_SetConfig+0x1b0>)
 800310a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800310e:	bf00      	nop
 8003110:	08003135 	.word	0x08003135
 8003114:	0800313d 	.word	0x0800313d
 8003118:	08003145 	.word	0x08003145
 800311c:	0800315b 	.word	0x0800315b
 8003120:	0800314b 	.word	0x0800314b
 8003124:	0800315b 	.word	0x0800315b
 8003128:	0800315b 	.word	0x0800315b
 800312c:	0800315b 	.word	0x0800315b
 8003130:	08003153 	.word	0x08003153
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003134:	f7ff f968 	bl	8002408 <HAL_RCC_GetPCLK1Freq>
 8003138:	61b8      	str	r0, [r7, #24]
        break;
 800313a:	e013      	b.n	8003164 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800313c:	f7ff f986 	bl	800244c <HAL_RCC_GetPCLK2Freq>
 8003140:	61b8      	str	r0, [r7, #24]
        break;
 8003142:	e00f      	b.n	8003164 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003144:	4b20      	ldr	r3, [pc, #128]	@ (80031c8 <UART_SetConfig+0x268>)
 8003146:	61bb      	str	r3, [r7, #24]
        break;
 8003148:	e00c      	b.n	8003164 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800314a:	f7ff f8fd 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 800314e:	61b8      	str	r0, [r7, #24]
        break;
 8003150:	e008      	b.n	8003164 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003152:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003156:	61bb      	str	r3, [r7, #24]
        break;
 8003158:	e004      	b.n	8003164 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800315a:	2300      	movs	r3, #0
 800315c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	77bb      	strb	r3, [r7, #30]
        break;
 8003162:	bf00      	nop
    }

    if (pclk != 0U)
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d018      	beq.n	800319c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	085a      	lsrs	r2, r3, #1
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	441a      	add	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	fbb2 f3f3 	udiv	r3, r2, r3
 800317c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	2b0f      	cmp	r3, #15
 8003182:	d909      	bls.n	8003198 <UART_SetConfig+0x238>
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800318a:	d205      	bcs.n	8003198 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	b29a      	uxth	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	60da      	str	r2, [r3, #12]
 8003196:	e001      	b.n	800319c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80031a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3720      	adds	r7, #32
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	efff69f3 	.word	0xefff69f3
 80031b8:	40013800 	.word	0x40013800
 80031bc:	40021000 	.word	0x40021000
 80031c0:	40004400 	.word	0x40004400
 80031c4:	40004800 	.word	0x40004800
 80031c8:	007a1200 	.word	0x007a1200

080031cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d8:	f003 0308 	and.w	r3, r3, #8
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00a      	beq.n	80031f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00a      	beq.n	8003218 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00a      	beq.n	800323a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323e:	f003 0304 	and.w	r3, r3, #4
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00a      	beq.n	800325c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	430a      	orrs	r2, r1
 800325a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003260:	f003 0310 	and.w	r3, r3, #16
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00a      	beq.n	800327e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003282:	f003 0320 	and.w	r3, r3, #32
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00a      	beq.n	80032a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d01a      	beq.n	80032e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032ca:	d10a      	bne.n	80032e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00a      	beq.n	8003304 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	430a      	orrs	r2, r1
 8003302:	605a      	str	r2, [r3, #4]
  }
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b098      	sub	sp, #96	@ 0x60
 8003314:	af02      	add	r7, sp, #8
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003320:	f7fd fbd0 	bl	8000ac4 <HAL_GetTick>
 8003324:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0308 	and.w	r3, r3, #8
 8003330:	2b08      	cmp	r3, #8
 8003332:	d12e      	bne.n	8003392 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003334:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800333c:	2200      	movs	r2, #0
 800333e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f88c 	bl	8003460 <UART_WaitOnFlagUntilTimeout>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d021      	beq.n	8003392 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003356:	e853 3f00 	ldrex	r3, [r3]
 800335a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800335c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800335e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003362:	653b      	str	r3, [r7, #80]	@ 0x50
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	461a      	mov	r2, r3
 800336a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800336c:	647b      	str	r3, [r7, #68]	@ 0x44
 800336e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003370:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003372:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003374:	e841 2300 	strex	r3, r2, [r1]
 8003378:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800337a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1e6      	bne.n	800334e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2220      	movs	r2, #32
 8003384:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e062      	b.n	8003458 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b04      	cmp	r3, #4
 800339e:	d149      	bne.n	8003434 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033a8:	2200      	movs	r2, #0
 80033aa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 f856 	bl	8003460 <UART_WaitOnFlagUntilTimeout>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d03c      	beq.n	8003434 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c2:	e853 3f00 	ldrex	r3, [r3]
 80033c6:	623b      	str	r3, [r7, #32]
   return(result);
 80033c8:	6a3b      	ldr	r3, [r7, #32]
 80033ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	461a      	mov	r2, r3
 80033d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80033da:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80033de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033e0:	e841 2300 	strex	r3, r2, [r1]
 80033e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80033e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1e6      	bne.n	80033ba <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	3308      	adds	r3, #8
 80033f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	e853 3f00 	ldrex	r3, [r3]
 80033fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f023 0301 	bic.w	r3, r3, #1
 8003402:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	3308      	adds	r3, #8
 800340a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800340c:	61fa      	str	r2, [r7, #28]
 800340e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003410:	69b9      	ldr	r1, [r7, #24]
 8003412:	69fa      	ldr	r2, [r7, #28]
 8003414:	e841 2300 	strex	r3, r2, [r1]
 8003418:	617b      	str	r3, [r7, #20]
   return(result);
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1e5      	bne.n	80033ec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2220      	movs	r2, #32
 8003424:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e011      	b.n	8003458 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2220      	movs	r2, #32
 8003438:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2220      	movs	r2, #32
 800343e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3758      	adds	r7, #88	@ 0x58
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	603b      	str	r3, [r7, #0]
 800346c:	4613      	mov	r3, r2
 800346e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003470:	e04f      	b.n	8003512 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003478:	d04b      	beq.n	8003512 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800347a:	f7fd fb23 	bl	8000ac4 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	429a      	cmp	r2, r3
 8003488:	d302      	bcc.n	8003490 <UART_WaitOnFlagUntilTimeout+0x30>
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e04e      	b.n	8003532 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0304 	and.w	r3, r3, #4
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d037      	beq.n	8003512 <UART_WaitOnFlagUntilTimeout+0xb2>
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	2b80      	cmp	r3, #128	@ 0x80
 80034a6:	d034      	beq.n	8003512 <UART_WaitOnFlagUntilTimeout+0xb2>
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2b40      	cmp	r3, #64	@ 0x40
 80034ac:	d031      	beq.n	8003512 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	f003 0308 	and.w	r3, r3, #8
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	d110      	bne.n	80034de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2208      	movs	r2, #8
 80034c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 f838 	bl	800353a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2208      	movs	r2, #8
 80034ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e029      	b.n	8003532 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034ec:	d111      	bne.n	8003512 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80034f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f000 f81e 	bl	800353a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2220      	movs	r2, #32
 8003502:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e00f      	b.n	8003532 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	69da      	ldr	r2, [r3, #28]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	4013      	ands	r3, r2
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	429a      	cmp	r2, r3
 8003520:	bf0c      	ite	eq
 8003522:	2301      	moveq	r3, #1
 8003524:	2300      	movne	r3, #0
 8003526:	b2db      	uxtb	r3, r3
 8003528:	461a      	mov	r2, r3
 800352a:	79fb      	ldrb	r3, [r7, #7]
 800352c:	429a      	cmp	r2, r3
 800352e:	d0a0      	beq.n	8003472 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800353a:	b480      	push	{r7}
 800353c:	b095      	sub	sp, #84	@ 0x54
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800354a:	e853 3f00 	ldrex	r3, [r3]
 800354e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003552:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003556:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	461a      	mov	r2, r3
 800355e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003560:	643b      	str	r3, [r7, #64]	@ 0x40
 8003562:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003564:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003566:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003568:	e841 2300 	strex	r3, r2, [r1]
 800356c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800356e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1e6      	bne.n	8003542 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	3308      	adds	r3, #8
 800357a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	e853 3f00 	ldrex	r3, [r3]
 8003582:	61fb      	str	r3, [r7, #28]
   return(result);
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	f023 0301 	bic.w	r3, r3, #1
 800358a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	3308      	adds	r3, #8
 8003592:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003594:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003596:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003598:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800359a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800359c:	e841 2300 	strex	r3, r2, [r1]
 80035a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80035a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1e5      	bne.n	8003574 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d118      	bne.n	80035e2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	e853 3f00 	ldrex	r3, [r3]
 80035bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	f023 0310 	bic.w	r3, r3, #16
 80035c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	461a      	mov	r2, r3
 80035cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035ce:	61bb      	str	r3, [r7, #24]
 80035d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d2:	6979      	ldr	r1, [r7, #20]
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	e841 2300 	strex	r3, r2, [r1]
 80035da:	613b      	str	r3, [r7, #16]
   return(result);
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1e6      	bne.n	80035b0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2220      	movs	r2, #32
 80035e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80035f6:	bf00      	nop
 80035f8:	3754      	adds	r7, #84	@ 0x54
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <memset>:
 8003602:	4402      	add	r2, r0
 8003604:	4603      	mov	r3, r0
 8003606:	4293      	cmp	r3, r2
 8003608:	d100      	bne.n	800360c <memset+0xa>
 800360a:	4770      	bx	lr
 800360c:	f803 1b01 	strb.w	r1, [r3], #1
 8003610:	e7f9      	b.n	8003606 <memset+0x4>
	...

08003614 <__libc_init_array>:
 8003614:	b570      	push	{r4, r5, r6, lr}
 8003616:	4d0d      	ldr	r5, [pc, #52]	@ (800364c <__libc_init_array+0x38>)
 8003618:	4c0d      	ldr	r4, [pc, #52]	@ (8003650 <__libc_init_array+0x3c>)
 800361a:	1b64      	subs	r4, r4, r5
 800361c:	10a4      	asrs	r4, r4, #2
 800361e:	2600      	movs	r6, #0
 8003620:	42a6      	cmp	r6, r4
 8003622:	d109      	bne.n	8003638 <__libc_init_array+0x24>
 8003624:	4d0b      	ldr	r5, [pc, #44]	@ (8003654 <__libc_init_array+0x40>)
 8003626:	4c0c      	ldr	r4, [pc, #48]	@ (8003658 <__libc_init_array+0x44>)
 8003628:	f000 f818 	bl	800365c <_init>
 800362c:	1b64      	subs	r4, r4, r5
 800362e:	10a4      	asrs	r4, r4, #2
 8003630:	2600      	movs	r6, #0
 8003632:	42a6      	cmp	r6, r4
 8003634:	d105      	bne.n	8003642 <__libc_init_array+0x2e>
 8003636:	bd70      	pop	{r4, r5, r6, pc}
 8003638:	f855 3b04 	ldr.w	r3, [r5], #4
 800363c:	4798      	blx	r3
 800363e:	3601      	adds	r6, #1
 8003640:	e7ee      	b.n	8003620 <__libc_init_array+0xc>
 8003642:	f855 3b04 	ldr.w	r3, [r5], #4
 8003646:	4798      	blx	r3
 8003648:	3601      	adds	r6, #1
 800364a:	e7f2      	b.n	8003632 <__libc_init_array+0x1e>
 800364c:	080036ac 	.word	0x080036ac
 8003650:	080036ac 	.word	0x080036ac
 8003654:	080036ac 	.word	0x080036ac
 8003658:	080036b0 	.word	0x080036b0

0800365c <_init>:
 800365c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800365e:	bf00      	nop
 8003660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003662:	bc08      	pop	{r3}
 8003664:	469e      	mov	lr, r3
 8003666:	4770      	bx	lr

08003668 <_fini>:
 8003668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800366a:	bf00      	nop
 800366c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800366e:	bc08      	pop	{r3}
 8003670:	469e      	mov	lr, r3
 8003672:	4770      	bx	lr
